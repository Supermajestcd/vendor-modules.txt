#!/bin/bash # # This script is meant for quick & easy install via: # 'curl -sSL https://get.replicated.com/docker | sudo bash' # or: # 'wget -qO- https://get.replicated.com/docker | sudo bash' # # This script can also be used for upgrades by re-running on same host. # set -e REPLICATED_VERSION="2.14.0" PINNED_DOCKER_VERSION="17.06.2" MIN_DOCKER_VERSION="1.7.1" SKIP_DOCKER_INSTALL=0 SKIP_DOCKER_PULL=0 NO_PUBLIC_ADDRESS=0 SKIP_OPERATOR_INSTALL=0 IS_MIGRATION=0 NO_PROXY=0 AIRGAP=0 ONLY_INSTALL_DOCKER=0 OPERATOR_TAGS="loadbalancer,memcached,db,redis,web,worker" REPLICATED_USERNAME="replicated" UI_BIND_PORT="8800" CONFIGURE_IPV6=0 NO_CE_ON_EE="" HARD_FAIL_ON_LOOPBACK="" HARD_FAIL_ON_FIREWALLD="" ADDITIONAL_NO_PROXY= FORCE_REPLICATED_DOWNGRADE=0 SKIP_PREFLIGHTS="" IGNORE_PREFLIGHTS="1" REGISTRY_ADDRESS_OVERRIDE= REGISTRY_PATH_PREFIX= DISABLE_REPLICATED_UI="" DISABLE_REPLICATED_HOST_NETWORKING="" RELEASE_SEQUENCE="" RELEASE_PATCH_SEQUENCE="" CHANNEL_CSS= set +e read -r -d '' CHANNEL_CSS << CHANNEL_CSS_EOM Ym9keSwgaHRtbCB7CiAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7Cn0KCmxhYmVsIHsKICBmb250 LXNpemU6IDEycHg7CiAgY29sb3IKfQoKI21haW4gewogIHBhZGRpbmctdG9wOiA0MHB4Owp9Cgp0 ZXh0YXJlYSwgc2VsZWN0LCBpbnB1dFt0eXBlPSJkYXRlIl0sIGlucHV0W3R5cGU9ImRhdGV0aW1l Il0sIGlucHV0W3R5cGU9ImRhdGV0aW1lLWxvY2FsIl0sIGlucHV0W3R5cGU9ImVtYWlsIl0sIGlu cHV0W3R5cGU9Im1vbnRoIl0sIGlucHV0W3R5cGU9Im51bWJlciJdLCBpbnB1dFt0eXBlPSJwYXNz d29yZCJdLCBpbnB1dFt0eXBlPSJzZWFyY2giXSwgaW5wdXRbdHlwZT0idGVsIl0sIGlucHV0W3R5 cGU9InRleHQiXSwgaW5wdXRbdHlwZT0idGltZSJdLCBpbnB1dFt0eXBlPSJ1cmwiXSwgaW5wdXRb dHlwZT0id2VlayJdIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAu Mik7CiAgYm9yZGVyOiAwIG5vbmU7CiAgYm9yZGVyLXJhZGl1czogMDsKICBib3gtc2hhZG93OiAw IDJweCAwIDAgIzZkOWNiYSBpbnNldDsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIGNvbG9y OiAjZmVmZGY4OwogIGhlaWdodDogYXV0bzsKICBmb250LXNpemU6IDE0cHg7CiAgbGluZS1oZWln aHQ6IDEuNjsKICBwYWRkaW5nOiAxMnB4IDEwcHggMTBweDsKICB0cmFuc2l0aW9uOiBhbGwgMC4y cyBlYXNlIDBzOwogIHZlcnRpY2FsLWFsaWduOiB0b3A7Cn0KdGV4dGFyZWE6Zm9jdXMsIHNlbGVj dDpmb2N1cywgaW5wdXRbdHlwZT0iZGF0ZSJdOmZvY3VzLCBpbnB1dFt0eXBlPSJkYXRldGltZSJd OmZvY3VzLCBpbnB1dFt0eXBlPSJkYXRldGltZS1sb2NhbCJdOmZvY3VzLCBpbnB1dFt0eXBlPSJl bWFpbCJdOmZvY3VzLCBpbnB1dFt0eXBlPSJtb250aCJdOmZvY3VzLCBpbnB1dFt0eXBlPSJudW1i ZXIiXTpmb2N1cywgaW5wdXRbdHlwZT0icGFzc3dvcmQiXTpmb2N1cywgaW5wdXRbdHlwZT0ic2Vh cmNoIl06Zm9jdXMsIGlucHV0W3R5cGU9InRlbCJdOmZvY3VzLCBpbnB1dFt0eXBlPSJ0ZXh0Il06 Zm9jdXMsIGlucHV0W3R5cGU9InRpbWUiXTpmb2N1cywgaW5wdXRbdHlwZT0idXJsIl06Zm9jdXMs IGlucHV0W3R5cGU9IndlZWsiXTpmb2N1cyB7CiAgYm94LXNoYWRvdzogMCAycHggMCAwICNmN2Qw MDMgaW5zZXQ7Cn0KLmZvcm0tZ3JvdXAtbGcgLmZvcm0tY29udHJvbCB7CiAgYm9yZGVyLXJhZGl1 czogMDsKfQoKLnJvdyB7CiAgICBtYXJnaW4tbGVmdDogMDsKICAgIG1hcmdpbi1yaWdodDogMDsK ICAgIHdpZHRoOiAxMDAlOwp9CgouaDEsIC5oMiwgLmgzLCAuaDQsIC5wYW5lbCAuaDUsIC5oNiwg aDEsIGgyLCBoMywgaDQsIC5wYW5lbCBoNSB7CiAgZm9udC13ZWlnaHQ6IDEwMDsKICBsZXR0ZXIt c3BhY2luZzogMC4yNWVtOwogIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7Cn0KLnJlcGxpY2F0 ZWQtY29uZmlnIC5jb25maWctZ3JvdXAgaDMuZ3JvdXAtdGl0bGUgewogIGJvcmRlci10b3A6IDJw eCBzb2xpZCByZ2JhKDEwOSwgMTU2LCAxODYsIDAuNyk7CiAgY29sb3I6ICM2ZDljYmE7CiAgZm9u dC1zaXplOiAyMHB4OwogIHBhZGRpbmc6IDVweCAwIDMwcHg7Cn0KCmgxLnBhZ2UtdGl0bGUgewog IGNvbG9yOiAjZjdkMDAzOwogIGZvbnQtc2l6ZTogMjVweDsKICBsZXR0ZXItc3BhY2luZzogMC4z ZW07CiAgbWFyZ2luLXRvcDogNDBweDsKfQoKLnNldHRpbmdzIGgxIHsKICB0ZXh0LWFsaWduOiBs ZWZ0OwogIHBhZGRpbmctbGVmdDogMzQuNSU7Cn0KLnNldHRpbmdzID4gLnJvdyB7CiAgcGFkZGlu Zy1sZWZ0OiAxMSUKfQouc2lkZWJhci5jb2wtbGctMyB7CiAgd2lkdGg6IDI1JTsKfQouc2V0dGlu Z3MgLmNvbC1sZy05IHsKICB3aWR0aDogNjMlOwp9Ci5zZXR0aW5ncyAuY29sLWxnLTkgLmNvbC1t ZC0xMSB7CiAgd2lkdGg6IDEwMCU7Cn0KLnNldHRpbmdzIC5jb2wtbGctOSAuY29sLW1kLTExLCAu c2V0dGluZ3MgLmNvbC1sZy05IC5jb2wteHMtMTIsIC5zZXR0aW5ncyAuY29sLWxnLTkgLnJvdyB7 CiAgbWFyZ2luLWxlZnQ6IDA7CiAgbWFyZ2luLXJpZ2h0OiAwOwogIHBhZGRpbmctbGVmdDogMDsK ICBwYWRkaW5nLXJpZ2h0OiAwOwp9Ci5zZXR0aW5ncyAudGV4dC1jZW50ZXIgewogIHRleHQtYWxp Z246IHJpZ2h0Owp9Cgoud2lkZ2V0IGgzIHsKICBmb250LXNpemU6IDIxcHg7CiAgbGV0dGVyLXNw YWNpbmc6IDAuMTVlbTsKfQoud2lkZ2V0LWFwcHVwZGF0ZSBoMyB7CiAgY29sb3I6ICNmN2QwMDM7 Cn0KLndpZGdldCBoNCB7CiAgZm9udC1zaXplOiAxNXB4OwogIGxldHRlci1zcGFjaW5nOiAwLjE1 ZW07Cn0KCi5yZWxlYXNlcyAuY29sLW1kLW9mZnNldC0yLmNvbC1tZC04IHsKICBtYXJnaW46IDAg MCA0MHB4OwogIHBhZGRpbmc6IDA7CiAgd2lkdGg6IDEwMCU7Cn0KCi5idG4sIC5idG4tbGcgewog IGJhY2tncm91bmQtY29sb3I6ICMzZTY4ODM7CiAgYm9yZGVyOiAwIG5vbmU7CiAgYm9yZGVyLXJh ZGl1czogMDsKICBib3gtc2hhZG93OiAwIDJweCAwIDAgcmdiYSgwLCAwLCAwLCAwLjIpOwogIGNv bG9yOiAjZmZmZmZmOwogIGZvbnQtc2l6ZTogMTFweDsKICBmb250LXdlaWdodDogYm9sZDsKICBs ZXR0ZXItc3BhY2luZzogMC4wNzVlbTsKICBwYWRkaW5nOiA5cHggMTJweDsKICB0ZXh0LXRyYW5z Zm9ybTogdXBwZXJjYXNlOwp9Ci50ZXN0LWJ1dHRvbiB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzY2 NjsKICBwYWRkaW5nOiA1cHggMTJweDsKfQouYnRuLXNhdmUgewogIGJhY2tncm91bmQtY29sb3I6 ICNmN2QwMDM7CiAgY29sb3I6ICMwMTA3MDk7Cn0KLmJ0bi1zYXZlOmhvdmVyIHsKICBiYWNrZ3Jv dW5kLWNvbG9yOiAjZmVlZDk1OwogIGNvbG9yOiAjMDEwNzA5Owp9Ci5idG4tY2hlY2tib3gsIC5i dG4teHMgewogIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OwogIGJveC1zaGFkb3c6IDAgMCAwIDAg cmdiYSgwLCAwLCAwLCAwKTsKICBjb2xvcjogI2FhYTsKICBmb250LXdlaWdodDogNDAwOwogIHBh ZGRpbmctbGVmdDogMDsKfQouYnRuLXhzIHsKICBwYWRkaW5nOiA5cHggMTJweDsKfQouYnRuLXhz LmV4cGFuZGVkIHsKICBjb2xvcjogI2Y3ZDAwMzsKfQouYnRuLWNoZWNrYm94OmhvdmVyLCAuYnRu LWNoZWNrYm94OmFjdGl2ZSwgLmJ0bi1jaGVja2JveDpmb2N1cywgLmJ0bi14czpob3ZlciB7CiAg YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgY29sb3I6ICNmN2QwMDM7Cn0KLmJ0bi1jaGVja2Jv eCAuZmEsIC5idG4tY2hlY2tib3g6aG92ZXIgLmZhIHsKICBmb250LXNpemU6IDE4cHg7CiAgbWFy Z2luLXJpZ2h0OiAxMHB4OwogIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgY29sb3I6ICNhYWE7 Cn0KLmJ0bi1jaGVja2JveC5hY3RpdmUsIC5idG4tY2hlY2tib3guYWN0aXZlOmhvdmVyIHsKICBi YWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICBjb2xvcjogI2FhYTsKfQouYnRuLWNoZWNrYm94LmFj dGl2ZSAuZmEgewogIGNvbG9yOiAjZjdkMDAzOwp9Ci5idG4tc3VjY2VzcywgLmJ0bi1zdWNjZXNz LmJ0bi1ncmFkaWVudCB7CiAgYmFja2dyb3VuZDogI2Y3ZDAwMzsKICB0ZXh0LXNoYWRvdzogMCAx cHggMCByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7Cn0KLmZvcm0tcGFzc3dvcmQtY3JlYXRlIC5idG4t YmxvY2sgewogIGZsb2F0OiByaWdodDsKICB3aWR0aDogYXV0bzsKfQoKLm1vZGFsLXRpdGxlIHsK ICBjb2xvcjogI2Y3ZDAwMzsKfQoubW9kYWwtY29udGVudCB7CiAgYmFja2dyb3VuZC1jb2xvcjog IzM1NGE1NzsKICBib3JkZXItcmFkaXVzOiAwOwogIGNvbG9yOiAjZmZmOwp9Ci5tb2RhbCAucGFu ZWwgewogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC4yKTsKfQoubW9kYWwt aGVhZGVyLCAubW9kYWwtZm9vdGVyIHsKICBib3JkZXI6IDA7Cn0KLmNsb3NlIHsKICBjb2xvcjog I2ZmZjsKICB0ZXh0LXNoYWRvdzogbm9uZTsKfQoKLnBhbmVsLWRlZmF1bHQgewogIGJvcmRlcjog MDsKfQoucGFuZWwgewogIGJvcmRlci1yYWRpdXM6IDA7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdi YSg0OSwgNzUsIDg1LCAwLjYpOwp9Cgoud2VsbCwgLndlbGwtc20gewogIGJhY2tncm91bmQtY29s b3I6IHJnYmEoNDksIDc1LCA4NSwgMC42KTsKICBib3JkZXItcmFkaXVzOiAwOwp9Ci53ZWxsIC5u YXYgPiBsaSA+IGEgewogIGNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuOCk7CiAgZm9udC1zaXpl OiAxMXB4OwogIGxldHRlci1zcGFjaW5nOiAwLjA1ZW07CiAgdGV4dC10cmFuc2Zvcm06IHVwcGVy Y2FzZTsKfQoud2VsbCAubmF2ID4gbGkgPiBhOmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiBy Z2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7CiAgY29sb3I6ICM2ZDljYmE7Cn0KLndlbGwgLm5hdiA+ IGxpLmFjdGl2ZSA+IGEsIC53ZWxsIC5uYXYgPiBsaS5hY3RpdmUgPiBhOmZvY3VzLCAud2VsbCAu bmF2ID4gbGkuYWN0aXZlID4gYTpob3ZlciB7CiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7Cn0K LnNpZGViYXIgLm5hdi1zdGFja2VkID4gbGk6Zmlyc3QtY2hpbGQgPiBhLCAuc2lkZWJhciAubmF2 LXN0YWNrZWQgPiBsaTpsYXN0LWNoaWxkID4gYSB7CiAgYm9yZGVyLXJhZGl1czogMDsKfQoKLnRh YmxlIC50YWJsZSB7CiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7CiAgYm9yZGVyOiAwOwp9Ci50 YWJsZSA+IHRib2R5ID4gdHIgPiB0ZCwgLnRhYmxlID4gdGJvZHkgPiB0ciA+IHRoLCAudGFibGUg PiB0Zm9vdCA+IHRyID4gdGQsIC50YWJsZSA+IHRmb290ID4gdHIgPiB0aCwgLnRhYmxlID4gdGhl YWQgPiB0ciA+IHRkLCAudGFibGUgPiB0aGVhZCA+IHRyID4gdGggewogIHBhZGRpbmc6IDEwcHgg OHB4OwogIGZvbnQtc2l6ZTogMTJweDsKICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwp9Ci5jb2xs YXBzZSAucm93LWhpZGRlbi1yb3cgewogIGJvcmRlcjogMDsKfQoKLnNldHRpbmdzIGhyIHsKICBk aXNwbGF5OiBub25lOwp9CgouZGFzaGJvYXJkIC5idG4td2FybmluZyB7CiAgYmFja2dyb3VuZC1j b2xvcjogI2YwYWQ0ZTsKICBib3JkZXItY29sb3I6ICNlZWEyMzY7CiAgY29sb3I6ICNmZmY7Cn0K LmRhc2hib2FyZCAuYnRuLXdhcm5pbmc6aG92ZXIgewogIGNvbG9yOiAjZmZmOwogIGJhY2tncm91 bmQtY29sb3I6ICNlYzk3MWY7CiAgYm9yZGVyLWNvbG9yOiAjZDU4NTEyOwp9CgoucmVhY3QtZ3Jp ZC1pdGVtIHsKICBib3JkZXI6IDA7Cn0KCi5uYXZiYXItaW52ZXJzZSB7CiAgICBiYWNrZ3JvdW5k LWNvbG9yOiAjMzU0YTU3OwogICAgYm9yZGVyOiAwOwp9CgoubmF2YmFyLWludmVyc2UgLm5hdmJh ci1uYXYgPiBsaSA+IGEsCi5uYXZiYXItaW52ZXJzZSAubmF2YmFyLXRleHQsCi5kcm9wZG93bi1t ZW51ID4gbGkgPiBhewogIGNvbG9yOiAjZmZmOwogIGZvbnQtc2l6ZTogMTFweDsKICBsZXR0ZXIt c3BhY2luZzogMC4xNWVtOwogIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgdHJhbnNpdGlv bjogYWxsIDAuMnMgZWFzZSAwczsKfQoubmF2YmFyLWludmVyc2UgLm5hdmJhci1uYXYgPiBsaSA+ IGE6aG92ZXIsCi5uYXZiYXItaW52ZXJzZSAubmF2YmFyLXRleHQ6aG92ZXIsCi5kcm9wZG93bi1t ZW51ID4gbGkgPiBhIHsKICBjb2xvcjogIzZkOWNiYTsKfQoubmF2YmFyLWludmVyc2UgLm5hdmJh ci1uYXYgPiAuYWN0aXZlID4gYSwKLm5hdmJhci1pbnZlcnNlIC5uYXZiYXItbmF2ID4gLmFjdGl2 ZSA+IGE6Zm9jdXMsCi5uYXZiYXItaW52ZXJzZSAubmF2YmFyLW5hdiA+IC5hY3RpdmUgPiBhOmhv dmVyIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OwogICAgY29sb3I6ICM2ZDlj YmE7Cn0KLm5hdmJhci1icmFuZCBpbWcgewogICAgbWFyZ2luLXRvcDogM3B4OwogICAgbWF4LWhl aWdodDogMjRweCAhaW1wb3J0YW50Owp9Ci5uYXZiYXIgPiAuY29udGFpbmVyLWZsdWlkIC5uYXZi YXItYnJhbmQsIC5uYXZiYXIgPiAuY29udGFpbmVyIC5uYXZiYXItYnJhbmQgewogICAgbWFyZ2lu LWxlZnQ6IC0xMHB4Owp9Ci5uYXZiYXItaW52ZXJzZSAubmF2YmFyLW5hdiA+IC5vcGVuID4gYSwK Lm5hdmJhci1pbnZlcnNlIC5uYXZiYXItbmF2ID4gLm9wZW4gPiBhOmZvY3VzLAoubmF2YmFyLWlu dmVyc2UgLm5hdmJhci1uYXYgPiAub3BlbiA+IGE6aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6 IHRyYW5zcGFyZW50OwogIGNvbG9yOiAjNmQ5Y2JhOwp9Ci5kcm9wZG93bi1tZW51IHsKICBiYWNr Z3JvdW5kLWNvbG9yOiAjMzU0YTU3Owp9Ci5kcm9wZG93bi1tZW51ID4gbGkgPiBhIHsKICBjb2xv cjogI2ZmZjsKfQoKCi50YWJsZSA+IHRib2R5ID4gdHIgPiB0ZCwgLnRhYmxlID4gdGJvZHkgPiB0 ciA+IHRoLCAudGFibGUgPiB0Zm9vdCA+IHRyID4gdGQsIC50YWJsZSA+IHRmb290ID4gdHIgPiB0 aCwgLnRhYmxlID4gdGhlYWQgPiB0ciA+IHRkLCAudGFibGUgPiB0aGVhZCA+IHRyID4gdGggewog IGJvcmRlci10b3A6IDFweCBkb3R0ZWQgcmdiYSgxMDksIDE1NiwgMTg2LCAwLjMpOwp9Ci50YWJs ZSA+IHRoZWFkID4gdHIgPiB0aCB7CiAgY29sb3I6ICM2ZDljYmE7CiAgZm9udC1zaXplOiAxMXB4 OwogIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgYm9yZGVyLWNvbG9yOiAjNmQ5Y2JhOwp9 CgoucmVhY3QtZ3JpZC1pdGVtLCAucmVhY3QtZ3JpZC1pdGVtIC53aWRnZXQtbWV0cmljcy1jaGFy dCB7CiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7Cn0KCi8qIGNwdSBncmFwaHMgKi8K LndpZGdldC1tZXRyaWNzLWNwdWFjY3QgewogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNDksIDc1 LCA4NSwgMC42KTsKfQoud2lkZ2V0LW1ldHJpY3MtY3B1YWNjdCAud2lkZ2V0LW1ldHJpY3MtY2hh cnQgewogIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50Owp9Ci53aWRnZXQtY3B1LW1ldHJp Y3MgPiAudGV4dC1tdXRlZCB7CiAgY29sb3I6ICNjY2M7Cn0KCi8qIG1lbW9yeSBncmFwaHMgKi8K LndpZGdldC1tZXRyaWNzLW1lbW9yeSB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1 NSwgMjU1LCAwLjE1KTsKfQoud2lkZ2V0LW1ldHJpY3MtbWVtb3J5IC53aWRnZXQtbWV0cmljcy1j aGFydCB7CiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7Cn0KLndpZGdldC1tZW1vcnkt bWV0cmljcyA+IC50ZXh0LW11dGVkIHsKICBjb2xvcjogI2NjYzsKfQoKLyogQXBwIHN0YXR1cyB0 aWxlICovCi53aWRnZXQtYXBwc3RhdHVzIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIzNSwg MTk3LCAxMiwwLjYpOwp9CgovKiBBcHAgdWRwYXRlIHRpbGUgKi8KLndpZGdldC1hcHB1cGRhdGUg ewogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTA5LCAxNTYsIDE4NiwwLjQpOwp9CgovKiBBcHAg YmFja3VwIHRpbGUgKi8KLndpZGdldC1hcHBiYWNrdXAgewogIGJhY2tncm91bmQtY29sb3I6IHJn YmEoMTAwLDEwMCwxMDAsMC41KTsKfQpib2R5IHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTUyYTMz OwogIGJhY2tncm91bmQtcG9zaXRpb246IDk3JSAxMCUsIGNlbnRlciBib3R0b207CiAgYmFja2dy b3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCwgcmVwZWF0LCByZXBlYXQsIHJlcGVhdDsKICBiYWNrZ3Jv dW5kLWltYWdlOiB1cmwoImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1Vo RVVnQUFBSmdBQUFCbkNBWUFBQUQ4Qm92dEFBQUFHWFJGV0hSVGIyWjBkMkZ5WlFCQlpHOWlaU0JK YldGblpWSmxZV1I1Y2NsbFBBQUFBeWhwVkZoMFdFMU1PbU52YlM1aFpHOWlaUzU0YlhBQUFBQUFB RHcvZUhCaFkydGxkQ0JpWldkcGJqMGk3N3UvSWlCcFpEMGlWelZOTUUxd1EyVm9hVWg2Y21WVGVr NVVZM3ByWXpsa0lqOCtJRHg0T25odGNHMWxkR0VnZUcxc2JuTTZlRDBpWVdSdlltVTZibk02YldW MFlTOGlJSGc2ZUcxd2RHczlJa0ZrYjJKbElGaE5VQ0JEYjNKbElEVXVOUzFqTURJeElEYzVMakUx TlRjM01pd2dNakF4TkM4d01TOHhNeTB4T1RvME5Eb3dNQ0FnSUNBZ0lDQWdJajRnUEhKa1pqcFNS RVlnZUcxc2JuTTZjbVJtUFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eE9UazVMekF5THpJeUxY SmtaaTF6ZVc1MFlYZ3Ribk1qSWo0Z1BISmtaanBFWlhOamNtbHdkR2x2YmlCeVpHWTZZV0p2ZFhR OUlpSWdlRzFzYm5NNmVHMXdQU0pvZEhSd09pOHZibk11WVdSdlltVXVZMjl0TDNoaGNDOHhMakF2 SWlCNGJXeHVjenA0YlhCTlRUMGlhSFIwY0RvdkwyNXpMbUZrYjJKbExtTnZiUzk0WVhBdk1TNHdM MjF0THlJZ2VHMXNibk02YzNSU1pXWTlJbWgwZEhBNkx5OXVjeTVoWkc5aVpTNWpiMjB2ZUdGd0x6 RXVNQzl6Vkhsd1pTOVNaWE52ZFhKalpWSmxaaU1pSUhodGNEcERjbVZoZEc5eVZHOXZiRDBpUVdS dlltVWdVR2h2ZEc5emFHOXdJRU5ESURJd01UUWdLRTFoWTJsdWRHOXphQ2tpSUhodGNFMU5Pa2x1 YzNSaGJtTmxTVVE5SW5odGNDNXBhV1E2TkVFNFJFWXpNRUUwTlRFek1URkZORUUwTTBWRk16WXhP VGxGTTBVM1F6Z2lJSGh0Y0UxTk9rUnZZM1Z0Wlc1MFNVUTlJbmh0Y0M1a2FXUTZORUU0UkVZek1F STBOVEV6TVRGRk5FRTBNMFZGTXpZeE9UbEZNMFUzUXpnaVBpQThlRzF3VFUwNlJHVnlhWFpsWkVa eWIyMGdjM1JTWldZNmFXNXpkR0Z1WTJWSlJEMGllRzF3TG1scFpEb3pNVVJCTTBGRU1UUTFNVEV4 TVVVMFFUUXpSVVV6TmpFNU9VVXpSVGRET0NJZ2MzUlNaV1k2Wkc5amRXMWxiblJKUkQwaWVHMXdM bVJwWkRvek1VUkJNMEZFTWpRMU1URXhNVVUwUVRRelJVVXpOakU1T1VVelJUZERPQ0l2UGlBOEwz SmtaanBFWlhOamNtbHdkR2x2Ymo0Z1BDOXlaR1k2VWtSR1BpQThMM2c2ZUcxd2JXVjBZVDRnUEQ5 NGNHRmphMlYwSUdWdVpEMGljaUkvUGpTdVBTRUFBQlZDU1VSQlZIamE3SjBIZUZSbHVzZS9VNmIz a2t3bXZSY0NCQkJCMTd1S1hpeFhYWGZ0QlNtdTh1aGxyU2lnQ1NGMnhiYUNvTHRMeHlDMnE2dmVW VmtzRWFXRnRFa3lTU1psSmgyU2tJUk16YlJ6OXYxT0V2YjZYSGNmMFVFUzh2MGh6NWs1VXpMem5k LzV2Ly8zT3ljekRCcG5ldkhsRjlOMTBUR0QxdXBxUkRUeHhZeTNGN1RndGxzMlVoUzFlZjZsODdQ VHM3TDNWSlNWaGNobW1yaWl4dU9MYXJmWG0vY2RPTHlwcnJIbEFwWmhpaHNhbXg5K2QxZHhnR3d1 QWxoRVphazRtSFNrd3JMVjN0NlZKMmJaemJZV3grcmRPN1lUUnlPQVJWWU4xb3JNQTZYbDJ4dWE3 R2x5bVd4OW5hM3AyWGVMMytUSjVpT0FSVlIxMVdYVERwWlY3R2kydDV2bEN0a3poWThWYkNDYmtB QVdjZFZVbGM0QlI5dldiRy9WcU5XcVZZWDVxM2VSVFVrQWk3Z09IeWk1NkZCWjFlYXVZejJNVWlG L2FFMUI0VWRra3hMQUlxNXZTLzcrWDlWMWpXOTA5L1Q2YUpxNi82bWlKL2FTVFVzQWk3aSsrWHJQ OVdWVk5lc0doNXo5RE1YYy9VUlIwU0d5aVFsZ0VWVmJTeDFsZDdRdHJMTFdQOTgvTU5oRjA4eVNK NHNldDVKTlRRQ0xOR2gwZTJmM1BRZU9sQmU2M1o3bVFDQzRhTzJ6enpuSUppZUFSVlJOOVZXc3Zi WDl3Y3JxdWhYRHdZREY3dzhzZWU2cHA3dkpwaWVBUlZTT3BscHh2YTA1djd5NmRobkg4d2VjTHZl ZEx6Ky90cDhnUUFDTHFHeldDcG10MmY2a3hkcXdPQlFLZnpIa2RDMTk5YVdYUEFRRkFsaEUxZHBz VmRiWm10Y2VxYkRjRU9MQ0h6dGRubnZYdmZTU255QkJBSXQwUnROYUd4cGZMYlBVWGk1aTJOMk45 dGFWdTdadEpRZlVDV0NSVldOZHBiSGNVdk5HczczOVZ6elA0ek0zbmdEUU9ESXlCTENJeW1vcE5k dWFIWnRxNmh1bjh4eTMvdkUxUlMrUlVTR0FSVndOdGVWSjBBaHNoWVlnbFdHWVp3b2V6ZDlNUm9V QWRqb3lXdWJoOHFwdDl2Wk9Fd3pXWTRYNXE5OGpvMElBaTdnczVRZW5sMVpVYnozYTJ5Zm51UERE anhjV2ZVWkdoUUFXY1ZWVkhKeGJXVzNkWkcvdDRGaVdlYUJvOVpwdnlLZ1F3Q0t1d3dkS0xxNnNx ZHZRMjlmdkJ0RCtPLy9SL0FveUtnU3dpT3ZRL3BLcktxcXRyL1FjUDk2SGVIVEhFMnVLbXNpb0VN QWlycSsvK093bVM1M3RHYmZiMnhibXdrdUtWaGQya2xFaGdFVlU5VFZsMVBHQkUwdXFhdXNLWFc1 UHJjdmx2dXU1cDUvcEpZQVJSVlQ0WExRV1I5dDlGbXY5ZzhQRGdjTXV0L3VlWjU5NitnUUJqQ2lp Y2pUVnNpMk85cFUxOWJhbFRxZXJ4T2x5TFh2NWhSZDlCRENpaUFxZkl0UmtieTJ3TlRzV3VEMmV2 M2w4d3crOThNeXpRUUlZVVVRMWNvcFEwNVAxdHBacmc2SGcyMVcxOVFWdjc5ekJFY0NJSXFxRzJu SnRRMlBMMnFiVzl2bkR3OE9iclExTnp3Tm9QQUdNS0tKcXQ5Y2JxMnJxMXR1YTdiT0gvZjcxaGZt ck54REFpRTRIYU9aRFpSVnZ0SFYyWjNFYy8reXFSMWErU1FBamlyanNqVFdKUnlwcnRqamEyazBN d3hTdWVIakZSd1F3b29qTGFpbk5QSGlrY2t0di80QmN4TElyQWJRdkNXQkVFVmRsMllFWlpWWFZm eDQ0NGVSb21scStZdm1LZ3dRd29vaXI5RURKQlZYV2h2VW5ocHdlbmtmTFZxMVlXVXNBSTRxNEtv N3N2NnltenZiaXNkNit2bUFvZE5mcXh3cGFDV0JFRWRmaGd5WFhsbGZWUHUzMitoeCt2Lyt1d3Z6 Vnh3aGdSQkZWaDZPQjZqcDY3TGJhK3NZMXZjZjdxOE9oME4yRkJZVURCTEFKb0p0dVh4ajdidkdi RStJRFV2Q1pHMjBkblhkYWF1dFh1VHplNzZCMDNsZFVVT2dpZ0kxajNiYmtqcVV3TWpONVRqaDZV ODF4WE1rN2IrNXNHT2VPaGo5RjZON0s2dG8vK0lPaEx3UCs0QU9GQlFWK0F0ZzQxaTJMRnRNTXcw eUhpL040eEdkdzRYQ1k0L2hxVnNTV3ZMVnRXL040Zk0ydHpWWnhZNHQ5bGJXaGVXRXdGUHlrd21K ZGNTWVBxQlBBVGhFNFlHdzZRRGNQSVQ2VHBoa2UzSzJTNTNuc2NPTUtPRWRUclF4QUs2cHZiTGsy R0F5OVZWRnRmWEwzanUwOEFXeGlsVklHZ0p0SjAvUThBQzJkb3Fnd1hCYUFnNDA1TG9CcmJyQW9t eHl0TDlpYTdCZUQvLzdsNFljZS9pTUJiT0k2SFA1eXNaa0EyenlXWlRNQU5Pd1laUUJleVZ2Ynoy eEpCZEIwalMyT1YyM05qbk1Dd2VDNlZZK3MzRVFBbStDNmVlRWlGaHh0OXBqRHdhb1FsTmV5WURC NHhrb3FkSjB4WlpYVjY5czZ1eklCLytmQTBkNGhnSjA5SlpXRmtqb2JOdzBBSFRnYzU0Y2NWNHE3 VkFqaXJiL2thMm14VlNmVzFEZHViTy9zTW9kQzRUWExIMXorS1FIc0xOT3RpNWVJb1h6T2daOTU0 WEFvR1RyVUFGd3VoZkphc212YjFsOEV1T2I2cW93eWkvV045cTR1QlVNeks4SFJ2aVdBbmIwT0p3 YUhBK0FRZEtrb0dVcFlDQzRmNHNKY3lidTdpbHRQTDJpV3FhV1ZsbzNncHQ2TExqaHZYVUpLOXVj RXNMTWZPR2t3R0RnUHl1ZzhBQzBabHNNY0Z6N0VNS2ZQNGFCMGJvZkZZcS9YK3o4Zi91K2VGOVlV RnBVU3dDWlBTWldHUXFIemNFbUZNZ29sTlJ5QVRYZ0FJUjR5M002SUFOZFVYeVVLQkFKcmxBckZZ eVg3RDRadFRmYVNudDYrKzdmOFpaT05BRGI1dWxSNWpDbjZNZ0R1bWtEQW44VFFkSkJsUlo4ZjYr MTdmL2VPN1QvcnN6RTZIQTNuZWp5ZU4zbU95enBjWVJrNGZLUnlUMjI5N2Y1dnYvcmlPQUZza21y OWhuVUtDbEczZVgyK2ViN2hZYTFFTEFuNEF3R0wwKzNlK2NyYUYreW4rbnhkYlRicDBhTzliNHRF ekc5bE1obDY3byt2RHd6N2ZCdDJGeGNYRWNDSThIRkpXVzlmLytWTkRzZTE0VEN2NDdpUWsrUFFr YTZqUFo4VjVoYzAvdEJqTm0zK2s5SHI5YS90N082K3FyZC9JTnJ2RDFBYXRRcGRjY21GYU0rWEph amUxb3dNZXAwVE10cE9uOSsvOFp1OWYyOGdnQkVKYXFndFY0bEVvb3M4SHU5ODJQSUdzVWpVUjlQ MGZyaHAzemNIRHZ1R25PN2ROWFcycThEMUtJWmhVREFZUkhnSkpWZ2d4ZXR5bzhFVFF3ZzZUYmdP SzZETmhYOGZ3M09zM1BmRlhoc0JqT2o3VXhNTkZnTUUrb3ViN0cxM2ZmbnR3VXNoek5NTXl3aTNo VU5oWVlrQkM0ZkRDQi8xd3N1KzNqNEJPQUV5RU1DRk9KNFA4Rng0NVhkZmY3V09BRWIwUFYxejQw MTNLdVR5OVFDS2ZPVFFLVUxRcVNKV3hJSkRJUUVtN0ZNWXJoT0RKeEFFZndFcWZLNGNSVk1BWWdn Z1pJWEh3ZDAzUWFOeFQ4bmVQU2RQRDJMSkVFOWVYZm03YTYrQk12a2FYSlJoZ0RCTWVLbFVLQkEw Q1NldmU5d2U1SEs3VUFoSzVraHBSQUowTlB6REhqVlNNdkYvYWluSGMvampxUjRZK3gwTUdlWko2 bHczM0JnbmxVby9ZbGxXajUxTGNDVllZbGpVS2hVQTVVWk9weE1ORGc0aW44OG5RRVhUek9pU0hv RnM5SEVZdXJGU0NOZm54aWNtdFhTME9xcUY2MlNvSjZlR2g0Yy9kN3Zjc1dFdVBBSUpHaW1ISmxN MDZ1enFScjA5UFlKejRTeUcxd3RCZnl4ekFZUmo1WFJrM2NodGVEMFg1dkI5WHZ2MUpmT2pTSW1j cFByTmRUZjgydWx5VHNVdUJLQ05aQ1hJWERLcERKbE5NWkMxQmtlQ1BNK05aRERjTFk0Q2hRRWJD L2swTTVMRlRwYk1VUmNFTzlNeU5QTVkzSDA1Q2ZtVFVKZGVkZlVodjk4L1Y4aFlvdzZGTlhmdUhG UlhWd2RCM291d3N3RWtKK0hDOElqRUlpUVdpeEdVVmFHN0hBdjdlRG9EeWluUWlHanNZQmcrdU4x TjBYUU1jYkJKcGd2LzgxSUs0SnFOUVJoekpPeE5rTWVFY0Q4MDVCVGd3WEJoOE9SS0JZSkdRSUJL QkV2c1ZYS1pET20wV3FIYlBOYmJoOFFTTVpJcjVQVGd3T0NBMSt2VjQvdUd3eUVsMEhjMUFXeVNT YUZRWE9qeGVKai9tNnY0MFdEUEFsUVlORHdYcGxRb2tWUW1IWUVNZ01wTVQwYXBpWWtvTWM2TWpF YTlBQ2IrNmVqc1F1OTk4am5xNlQyTzlBYTlIdUIwdUZ5dUZCb2dCWGViVHdDYlpJTFNkOVZZbnNK TFhQWlloa1ZUY3JKUlgvOXhGR09PRWRhTFlmMlV6SFEwWjlZTWxKUVFLMXdQQmtOQ09RUUhGQjZQ eTZVNXhvUitmK3NONktXTm03bGh2NTlXcVZVcGdVQ2dIZTZYQ0FCT0pZQk5Nb0d6SkdGWHd1Nmow K3NFeDhLWktUVTVDZTM1OGt1VW5wcU01czdLUTBueHNRZ2Y0TVlTcGlsR3l5bkFnMVRnZHZnNW9C d0s2K1Z5R2NyTHphWkxLeTNDZW5qZXhKN2VYajg0WXh3QmJKS0o0cEVFWnl5RDBTQmtxbmh3TElh bGtVR25RY3Z2dVJNWkREcWhzOFRnNFVsV0RCOEdEVi9HR29OckxQaGpSOE0vbWVrcDZFaFZqWEFi UkRCY2Ntbm5rRk5MQUp0MGhDR3ZXcXRCeVFueDZMcXJMMFBKU1Fub2k1TDlTQ2tUSTVNcFNuQWx1 Vnd1d0lOTElIWXNEQmYrd2FWUkM0LzFlbjFDSTRERFBBWlFJcEVneFNpRUk0MEFoUUVWZWR4dU41 bG9uWHhxcE1GbEZ0MXlIWW94UlFNMEFlVDJlSkJPcHhWS0lZWUZDM2VJUW1ZYmRTNE1HNFlLZDVr WUxBd2V2ZytHRWJ2VzJMU0Y0SG9DYUN5RWZ1TmJCTERKWm1BVTlUZXBUTWJMcEJJQkNneUtiOWd2 VEVXTXVBOFNTdDVZR1J4YllwaFVLcVVBRnk2aEdEaDgvN0Y4Tmdha1VEb0ZkOE56WnFLdEJMQkpw ay8vK3VFUmxVTHV4ZWQxalFHQjRjSUh0N0g3RERsZHlPbHlDeTZFNFJ2cEtNV2pZUGtGbDhMNURJ T0ZYV3JNOFR5K2tTTUN1R1NPSFNTSFpSUEpZSk5RNXVpbzd3NldWMTErL3V5WnlPVnlJUS9rcmlG WXVtSDUva2Vmb2Q3ai9RSklhbkFzclVhTnRHcTFjSGxXWGk0eVF1ZUpuUXREaDRIRElHSElPcnVQ Q3MrTmI4Tm5YYkJpMGZHM3RtMXpFY0FtZ1c1ZXVFZ3lQVGQ3bGt3bXpidnd2SE5ud0RKRmNEQndK N1ZTaGE2Y1B3ODZTWEFqY0tTNXMvUFE0T0FRaEhrdGtrTVoxZW0xU0F3bHp3aGRwd3hQd3NKbFhB NHhTTUx4U0FBUm55UFcyWDNzNUdFbC9GeWhZT2pQK0hjVHdNNENyY3JQajFVcEZlZFFDTTFRcWhT eElsWmtCSWdNRXJGWUN4dWNFb2tZWHFWVWRzZVpUZlU2clRZT2YrVFV3TUJnYjVPajlUL0dRbnh1 VGpiU3FKVm9kdDQwd1pIR1p1b3hNQ3pMSUxmYkkyU3pFY2ZDM1dYdzVPazlIdWdxN1cwZC96ellq VkNmVXFsYVN3Q2JBTHB4d2UzaXpQU1VISVZNZms0b0hKcWlrTXVpcFJLSlhxbFVHa1VzSThObk5J aFprUmRLbVNQYXFLK0RmUFFOdUVzN1BMUU5OdjdSbEl5cFAvamhjKys4czB0U1VWM1gwOVY5VElP dlMyVkt3YzF3NmNNT2hYTVdoZ1ZQVFFTRHRPQmNHRHhjVXNlYUFaelJjQmZaMEd3Wm1hS0F4NGFG c004djIvcW4xMTBFc0hHZ3BjdVdHV1BOcHBuZ05qTmdnMlpBMXRGTFJHSjhURThQSVJvV2RCaENl RDhBMUpTYWxGQUxIVm9KT0VVN3dOTUc4QXo5NUxKNTh3TC9qaDFiencrSHdsWEhlbnZGWDVWOGky YlBuSVVDdnFHVDUrRmpnSVFEM3dKY1l1RlEwZGprS2w0QzVPZ0VsTnB2OWg4ZVdROHdpc1dTWjRx M2JYbi9uOU51UktkTnR5NWVJakpGUjZYcU5lclpGRTFQRlRGTWdsZ2kwb3RZVnNjeXJCSXVJd0Fy b0ZHck9vd0d2VTJuVVZ2QlFkckJRZHFoYSt0SXpaeDIyciswdExoNHg1elNDc3UrdnY0QnlkMi9Y NExpVEFaOEVyVGdVbmc2QXJzWWRpNE1uSERLamtna0FEWTJMZkhYVC9laWltcnI2SW1JNGJWdjc5 ejU2UGVtUlFnR1AxMjNMYmxERzIrT21hNVNLV2ZBNE9ZQ0xGRUtoVnhISVVvbkhERmhXVjZuMWJq VVNtVkxqQ21xVHFtUTI2RGt0RVA1YVUvTG1qNXV2aXorazQ4L2lDdXZydDNmM25rMDZaSDcvb0Rr RWhyZzhwM01ZbmgySDVmT2svTmQ4T1lhbSt6b1FGa0Zja0QyWWhqMkJFVlJEeFp2M2JMai84MjdF VXorcGZ1d0FFNkNRYXVlSlpQSzhBY0JwME9aTU1CQWEyVXltVG9BZTdkYW93NHE1ZEplbFVyVm1C Qm5yb1dDMW9MekQ1U1d0cXpjV1JQdXU3bDM3MzV6WlpoRCtiazVPUnF2ZTBnSTk2RlFHSG5odlha MkhVWGR4M3BRMTlFZWRBSnlHSjRuQTdBNG51TzJCRU9oZ3ZkMkZmZjkwSE5PV3NCdXVuMmgycWpY WlVKcE9nZXVUb1dja2NUU3RGb3VsMmxoejVWeVBNL3B0UnF2Uk14MnFOV3ErdlRrcEZvWXlGYllV OXZndmtlaGZKMlZYNFZjVjMyRUNvVFJuVzF0YlZmNGhvZlA5ZnA4aWJoTERFSCt3cDBqb2lrMDdQ T0hHSllwcFducWx2eFZqM1g4dStjN0t3R0Qwb1dQVU1URXg4Wk1oN0kxRThwWERrWFIwUXFGVEFQ bFNjMkZPVVlpRm9YME90MEpxVlRjb2xPcnJha3BTWFc0ZklFRC9hendmRGJJM2xoekNleEllTWM3 SDF6NzJqRFlHZzc4VUM0N1lJdzJRT2wvUFQwN3ovMWpub3Vkb0FCSkpWSkphclJCUHdNQzh6VFlU ZEtoMDlLRDgyZ1ptcGJqdVJtVlVqa01tZWVZUWFkdGdpNXRIM1JoelJCYTJ5R3NkdVRtelFraW9w TjY2dG1uejVlS3hkZEhHUTFaQ3JtTUFZQitqZG1Bc2FvWUhEenhpbGFyS1lWb2NDZ2hKYnZ0Vko5 N1hEb1lsSzlvcFZLUkJuRE1GSXRGVTZHVlRzVE9JNU5KTktLUlB6bm1vZ3g2TjdoTkI0VG5CcFBS V0FON21nTktWM3RTMnBSZWdzeS9HZHNGdHpNejg2WmVLWmRLTDRQdU5ZMEhrS0tOK3Jhc3RKUVA0 UEozR1RrelhLM04xamdJOHozZ1VxR2YrL3VvTStBKytHTWk0L1Y2Ylk1Y0lwbEJNMHcyd0JFTkFS bWFMYVVTM2hnTmU5R3dScVZ5YWxUS0ZzaElWb0JJYU4rSGhvYmFwczZZNnlPWS9IZ3R1LzkrV1h5 cytXYVZTdkVydlZZYkR6c25GV2VPcVlvem0vRFhOVmNBVUlIVCtmdXAwK0ErV2h5WVk2S2pwb2xF N0hTdzIzUllhbWhFYWFWU2lZU2lxYkJXcmZHcWxQTGpVTFpzRUxTcllVL0NIK25kQm83MEwyZWVp WDZjVmhia0c2TU11Z1d3ZzBMM0s5RkRYT0F5MDFMM3hjWEdmQW83ZGdPTTd5LzZiUituRE5odGQ5 d1JJeGFKazZIRG1nWGxLNWRDVkNJcll0UVFwalY0MnBsbDZJQmVwL1VZOWZwT3RVcFpEKzVUclZR b1dzR1pKbjE0UGgwcWZPTHhOTDFHYzZ0S3BjeVZTRVF5MkRhK2xJUzR6NkZDN0lVU2Q4YS9NZTU3 Z09GdnFnREs0L1I2WFlaYUlaOHAvRlVJeXhvQkVDM0QwbktLcHlpRlhPN1RhbFZPbVZScU4rcTF0 YWJvcUxyUjJlY09lRU1rUEo5bXJTNWFNemZLWVBpdFJxMU1aVmhHckZJbys3TXlVajZDaUxFUHlw MXp2TDFlYXNQckcvTGNIczhiTkVXSkFDNWVxNEh5cFpBUFFObXlnYTFXd2JJRkgvc0M5eUhoK1Jm V3pRc1hNZG5wYVpkcE5NcjVLb1VpQVZFVUhXdUt0bWRucG4zSTgzdzU3TkNCOGY0ZXFQcWFNalcw OThIVXpHa2tQSjloM2JoZ2dTdzNPL1A2NkNqaitXSVJxOGQveldPT2pxb3lSUmsraHZqUmtEMzFI SDZpdlNkeXFPZ002cjdseTQwQTBFMGFqU3FQcHBCQ285YUVVaExqdm8weUdqNGJEL21KQURiQmRQ L3loMUpqVE5FM1FJZWRHUTZIeENxbHlnTkFmVzQwNkw5T3k1cnVQQnZmTXdIc05HcFZRZjQ1Y2Vh WTM4aWs0dmhBSUVpRE0vWFBtSmJ6SVhUZVphZDcvb2tBZHBZSm4zMlJHRysrT041c3ZrUWtZZzBp a1JqRm1hUGJJRk45NEhhN0czS216ZVluNDdnUXdINTZoeWZQU0UyKzJoUnRuQ09UU2hTd2lrK01p N1drSmlkK2NyYmtKd0xZTDZqRlM1Y2EwcEtUcmpQb05EazBUVXZrTWxsZ2FrN21kM3FkZG05S3hs UW5HU0VDMkNucDNvY2VURGFib24rblVTbVRBQ2hLcTlWNGN6TFNQZ09nRGllbFRRbVFFU0tBL1dq ZHNtZ3hCZDNkREhPVThRcU5SbVhFZjVtczErbjZjclBTUDFFbzVIVUFGRTlHaVFCMkt2bUpOWnVp NWlYRW1pOVFLaFZ5bGhWUlVRYXRQVHNqN2VQTUtUTkpmaUtBbmJKRHlWTVM0NitJaTQzSm8ybEdK R1paTGpNOTFaS1drckFuTGltTDVDY0MyS25wcGdXMzYzTnpNcStKTmhwVHdseVlsa21sQWNoUDM4 V1lvdmFuWms0aitZa0E5dE8xWWVOcjhWRDFaazZia3RWc05PZ2JTSDQ2cy9xSEFBTUE2YVp0QXMv Sy9YY0FBQUFBU1VWT1JLNUNZSUk9IiksIHVybCgiZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9S dzBLR2dvQUFBQU5TVWhFVWdBQUJFOEFBQUYvQ0FZQUFBQzQ0T2NkQUFBQUdYUkZXSFJUYjJaMGQy RnlaUUJCWkc5aVpTQkpiV0ZuWlZKbFlXUjVjY2xsUEFBQUE0WnBWRmgwV0UxTU9tTnZiUzVoWkc5 aVpTNTRiWEFBQUFBQUFEdy9lSEJoWTJ0bGRDQmlaV2RwYmowaTc3dS9JaUJwWkQwaVZ6Vk5NRTF3 UTJWb2FVaDZjbVZUZWs1VVkzcHJZemxrSWo4K0lEeDRPbmh0Y0cxbGRHRWdlRzFzYm5NNmVEMGlZ V1J2WW1VNmJuTTZiV1YwWVM4aUlIZzZlRzF3ZEdzOUlrRmtiMkpsSUZoTlVDQkRiM0psSURVdU5T MWpNREl4SURjNUxqRTFOVGMzTWl3Z01qQXhOQzh3TVM4eE15MHhPVG8wTkRvd01DQWdJQ0FnSUNB Z0lqNGdQSEprWmpwU1JFWWdlRzFzYm5NNmNtUm1QU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4 T1RrNUx6QXlMekl5TFhKa1ppMXplVzUwWVhndGJuTWpJajRnUEhKa1pqcEVaWE5qY21sd2RHbHZi aUJ5WkdZNllXSnZkWFE5SWlJZ2VHMXNibk02ZUcxd1RVMDlJbWgwZEhBNkx5OXVjeTVoWkc5aVpT NWpiMjB2ZUdGd0x6RXVNQzl0YlM4aUlIaHRiRzV6T25OMFVtVm1QU0pvZEhSd09pOHZibk11WVdS dlltVXVZMjl0TDNoaGNDOHhMakF2YzFSNWNHVXZVbVZ6YjNWeVkyVlNaV1lqSWlCNGJXeHVjenA0 YlhBOUltaDBkSEE2THk5dWN5NWhaRzlpWlM1amIyMHZlR0Z3THpFdU1DOGlJSGh0Y0UxTk9rOXlh V2RwYm1Gc1JHOWpkVzFsYm5SSlJEMGllRzF3TG1ScFpEcGhZV0ZtWkdaak5TMWpZVEU0TFRReU56 SXRPR1ExTlMweU5UTmxOamc1WVdOallXVWlJSGh0Y0UxTk9rUnZZM1Z0Wlc1MFNVUTlJbmh0Y0M1 a2FXUTZNekZFUVROQlF6ZzBOVEV4TVRGRk5FRTBNMFZGTXpZeE9UbEZNMFUzUXpnaUlIaHRjRTFO T2tsdWMzUmhibU5sU1VROUluaHRjQzVwYVdRNk1VVTJPVFV6UXpBME5URXhNVEZGTkVFME0wVkZN ell4T1RsRk0wVTNRemdpSUhodGNEcERjbVZoZEc5eVZHOXZiRDBpUVdSdlltVWdVR2h2ZEc5emFH OXdJRU5ESURJd01UUWdLRTFoWTJsdWRHOXphQ2tpUGlBOGVHMXdUVTA2UkdWeWFYWmxaRVp5YjIw Z2MzUlNaV1k2YVc1emRHRnVZMlZKUkQwaWVHMXdMbWxwWkRvM05UVTFORFkyWXkxallXWTVMVFF5 TmpRdFlqVmpNaTFsTWpZeVltRTFOMlUwT0RVaUlITjBVbVZtT21SdlkzVnRaVzUwU1VROUltRmti MkpsT21SdlkybGtPbkJvYjNSdmMyaHZjRG95TVRsalpXTXpaQzA0WkRabExURXhOemN0T1RjNFpD MWpZemRsTTJRNVpHWTFPREFpTHo0Z1BDOXlaR1k2UkdWelkzSnBjSFJwYjI0K0lEd3ZjbVJtT2xK RVJqNGdQQzk0T25odGNHMWxkR0UrSUR3L2VIQmhZMnRsZENCbGJtUTlJbklpUHo3dTNHZG5BQUFV VmtsRVFWUjQydXpkalZJYk9ib0dZRFFHNGt3NHRXVFBWazB1aHp0VDY5SjhNVnUxbGQzS3lXYnk0 ME9NZGFUUUpGNE9LQUZzMDkxK25pcVZiQmtxa3k4TXRsOS9Vb2V1NjQ0QUFBQUF1TnR2U2dBQUFB QndQK0VKQUFBQVFJUHdCQUFBQUtCQmVBSUFBQURRSUR3QkFBQUFhQkNlQUFBQUFEUUlUd0FBQUFB YWhDY0FBQUFBRGNJVEFBQUFnQWJoQ1FBQUFFQ0Q4QVFBQUFDZ1FYZ0NBQUFBMENBOEFRQUFBR2dR bmdBQUFBQTBDRThBQUFBQUdvUW5BQUFBQUEzQ0V3QUFBSUFHNFFrQUFBQkFnL0FFQUFBQW9FRjRB Z0FBQU5BZ1BBRUFBSjVGakhHdUNzQVlDRThBQUlEbkVwUUFHQVBoQ1FBQXNIY3h4bG1aWHBmNVJE V0FvUXRkMTZrQ0FBQ3dGLzFXbmRweGNsN0dhUm1yTXQ2VmtWTktTeFVDaGtoNEFnQUE3RjJNc1hi QnZ5bmpiVXBwcFNMQWtObTJBd0FBN0YxS2FWMm05NElUWUF5RUp3QUF3SE5aS3dFd0JyYnRBQUFB QURUb1BBRUFBQUJvRUo0QUFBQUFOQWhQQUFBQUFCcUVKd0FBQUFBTndoTUFBQUNBQnVFSkFBQUFR TU94RWdBQUFMUjFYWGZ2WXpubmVRaGgrWmp2QmNaQjV3a0FBQUJBZy9BRUFBQUFvRUY0QWdBQThE U09RNENKRTU0QUFBQThVczQ1bEduZXo4QkVDVThBQUFBZTcvZCtQc3M1cXdaTWxQWXlBQUNBQjhv NTF3K2lYNVh4b2wrcTg2eXNmd3dockZRSXBrWG5DUUFBd0UvVXl4RnZqSmRsNmZ6b1IzQnlvMzQ0 ZlY0ZS8zM3o2MVVQeGs5NEFnQUE4Qk1oaE9YRytGS1czcFh4OGRhWFhkYjE4dmpuemE5WFBSZy8y M1lBQUFBZUtJUnY1OE11KzROaTYvYWRHcHg4Nk5lQmlkRjVBZ0FBOEhnM25TV2ZCQ2N3WGNJVEFB Q0FSd29oMUV2c1hKYjVTalZndW9RbkFBQUFUL05WQ1dEYWhDZkFkekZHcDhFREFEeGNWZ0tZTnVF SkFBQUFRRVBvdWs0VmdHOXE1MGxLeWVYMEFBQUFOdWc4QVRhNWZEa0FBTUF0d2hQZ214aGp2YmJl dko4QkFBRG9DVStBRzcvMzg1bFNBQUFBL09ETUV6aHdNY1lhb3I0cTQ4WEc4cXFNanltbGxRb0JB QUNIVG5nQ0IrYlc1WWpyRnAyWFIvZDNvWDB1WTMxengyR3lBQURBSVJLZUFEZUJ5dVoybmN1ajY4 NlR0ZW9BQUFDSGJuWnhjYUVLY09BV2k4V3EvQzdJNWVacEdaY3BwUTlsTGFzTUFBQ0FBMk9CSDI2 MjVIeFNDZ0FBZ0IrRUo4QTNLYVhhYVZLN1RxNVVBd0FBNEFmaENiRHBxeElBQUFEOEorRUpzTWs1 SndBQUFMY0lUd0FBQUFBYWhDZkFkeW1scFNvQUFEQm1NY2E1S3JCdHdoTUFBQUNtSkNnQjJ5WThB UUFBWUJKaWpMTXl2Uzd6aVdxd1RhSHJPbFVBQUFCZ3RQcXRPclhqNUx5TTB6SldaYndySTl1YXpq WUlUd0FBOW1Eek5WZk8rVGlFc0xyck1RQWVMOFpZZDFlOEtlTnRTbW1sSW15TGJUc0FBUHRuUHo3 QURxU1UxbVY2THpoaDI0UW5BQUI3bEhPdXI3L20vUXpBOXEyVmdHM3pwQTBBc0FkMXEwNGQ1ZWFy L2pYWVdibC8wcThCc0NYT09HRVhoQ2NBQUh0UXp6anB6em41ZUhUOXFlakhjdi9yNXRrbkFNQXdD VThBQVBZb2hKREx0Q3l6dG5JQUdBbmhDUURBL21VbEFJRHhjS2xpQUFBQWdBYWRKd0FBQUFBTndo TUFBQUNBQnVFSkFBQUFRSVB3QkFBQUFLQkJlQUlBQUFEUThLVHdKTVo0cklRQUFBREFsRDIxOHlR b0lRQUFBREJsanc1UFlvejFlK2Y5REFBQUFEQkpvZXU2QjMzRHhsYWRsMGZYNFVzdTQwdWRVMG9y SlFVQUFBQ201TUhoeVkwWVk5MnljMWJHcDVUU1dpa0JBQUNBS1hyMGxwdVVVdTA0V1FwT0FBQUFn Q2w3Nm5rbFdRa0JBQUNBS1p0ZFhGdzgrcHNYaTRXdUV3QUFBR0RTWENrSEFBQUFvRUY0QWdBQUFO QWdQQUZncDJLTWMxVUFBR0RNaENjQUFBQUFEY0lUQUFBQWdJWmpKUURBY3cwQUFQZnB1dTc3N1p6 ekxJUndkZGRqVTZiekJJQ2RpVEdHTXMzN0dRQUFSa2w0QXNBdS9kN1BaMG9CQURCdU9lZjZnZGhw bVE4dVM5QktEY0RXeFJqckUrcXJNbDcwU3kvSzJxek1IMU5LS3hVQ0FCaVB1bFdudjNsU1JnMVFY cFMxeTdwUVh0dGRIVUlOaENjQVBObXR5eEhYSjlTWFIvKy91N0UrNTV5WHIvMWM1dlhOWW5uQ1hh b2dBTUJ3M1p4eGtuT3VyK0hxNjc1bFdjdDE3VkRPUEJHZUFQQmtkd1FnWC9wQVpYTzdUdjEwb25h ZXJGVU1BR0I4YW1CU08wNXVncE5ESWp3QllDZHFvTklmRkZ1MzcxeVcreDlVQlFDQU1RcUgwbUlE d1A3MTRjbC9sL0UvaDdJZkZnQ0E2WEcxSFFCMkpxVlVXem92QlNjQUFJeVo4QVNBWGZ1cUJBQUFq Sm53QklCZHkwb0FBTUNZQ1U4QUFBQUFHaHdZQ3dBQUFOQ2c4d1NBZ3hSam5La0NBQUMvUW5nQ0FB QUEwQ0E4QWVEZ3hCaERtVTdMN0hrUUFJQ2ZjdVlKQUFkalk2dk95ZEgxQndqMVNrQ1hkU0dsZEtW Q0FBRGNSWGdDd01IcE8wL21aU3hUU2k2bERBQkFrM1psQUE1T0g1aGNDazRBQVBnVndoTUFBQUNB aHRuRnhZVXFBSEJ3Rm91RnJoTUFBSDZKemhNQUFBQ0FCdUVKQUFBQVFJUHdCQUFBQUtCQmVBSUFB QURRSUR3QkFBQUFhQkNlQUFBQUFEUUlUd0FBQUFBYWhDY0FBQUFBRGNkS3dOREVHSTlUU2l1VkFB QU9TZGQxMzIvbm5JOURDS3U3SGdOZy8zU2VNRVJCQ1FBQXI0Y0FHQXJoQ1lNU1k2dy9rL04rQmdB NE9Ebm5iNitIK2htQUFiQnRoMEdvVzNYNm15K1Bya085czdMMnBiNStzSVVIQURnRWRhdk83ZGRE WmMzcklZQUJFSjR3Q0RjdkNHS01IK3NMaFRJK2xiVzF5Z0FBaCtMbWpKT2M4L2ZYUTJYdDIrc2ha NTRBUEMrdGdBeEtTaW1YYVNrNEFRQU9WUWpoMit1aG0rQUVnT2NuUEdHSXNoSUFBRjRQQVRBVVFR c2dBQUFBd1AxMG5nQUFBQUEwQ0U4QUFBQUFHb1FuQUFBQUFBM0NFd0FBQUlBRzRRa0FBQUJBZy9D RW5Zb3hIcXNDQUFBQVl5WThZZGVDRWdBQUFEQm13aE4ySnNaWWY3N20vUXdBQUFDakZMcXVVd1cy YW1PcnpzdWo2NEF1bC9HbHppbWxsUW9CQUFBd0pzSVRkaWJHV0xmc25KWHhLYVcwVmhFQUFBREd5 SFlLZGlhbFZEdE9sb0lUQUFBQXhreDR3cTVsSlFBQUFHRE1oQ2ZzbEROT0FJQkRGMk9jcXdMQXVB bFBBQUJndDRJU0FJeWI4QVFBQUhZa3hqZ3IwK3N5bjZnR3dIaTUyZzRBQUd4WnYxV25kcHljbDNG YVJ0M0svSzZNbkZKYXFoREF1QWhQQUFCZ1IyS010ZFA3VFJsdm5RVUhNRjYyN1FBQXdJNmtsTlps ZWk4NEFSZzM0UWtBd0piMDUxdkFiV3NsQUJnMzRRa0FBT3lRTTA0QXhrOTRBZ0N3QlRIR2Vqam9h WC9HQlFBd0lRNk1CUUI0Z28ydE92VlN0RFU0eVdWYzFvV1UwcFVLQWNENENVOEFBTGFnN3p5cGw2 ZGRwcFN5aWdEQWRHZ3JCUURZZ2o0d3VSU2NBTUQwQ0U4QUFBQUFHbVlYRnhlcUFBQ3dCWXZGUXRj SkFFeVF6aE1BQUFDQUJ1RUpBQUFBUUlQd0JBQUFBS0JCZUFJQUFBRFFJRHdCQUFBQWFCQ2VBQUFB QURRSVR3QUFBQUFhaENjQUFBQUFEY0lUQUFBQWdBYmhDUUFBQUVDRDhBUUFBQUNnUVhnQ0FBQUEw Q0E4QVFBQUFHZ1FuZ0FBQUFBMENFOEFBQUFBR29RbkFBQUFBQTNDRXdBQUFJQUc0UWtBQUFCQWcv QUVBQUFBb0VGNEFnQUFBTkFnUEFFQUFBQm9FSjRBb3hOalBGWUZBQUJnWDRRbndCZ0ZKUUFBQVBa RmVBS01Tb3l4L3Q2YTl6TUFBTURPaGE3clZBRVl2STJ0T2krUHJvUGZYTWFYT3FlVVZpb0VBQURz aXZBRUdKVVlZOTJ5YzFiR3A1VFNXa1VBQUlCZDAvWU9qRXBLcVhhY0xBVW5BQURBdmdoUGdESEtT Z0FBQU95TDhBUVlIV2VjQUFDSExzWTRWd1hZSCtFSkFBREErQVFsZ1AwUm5nQUFBSXhJakhGV3B0 ZGxQbEVOMkE5WDJ3RUFBQmlCZnF0TzdUZzVMK08wakxxVitWMFpPYVcwVkNIWUhlRUpBQURBaU1R WTZ3NkNOMlc4ZFJZYzdJZHRPd0FBQUNPU1VscVg2YjNnQlBaSGVBSUFBREErYXlXQS9iRnRCd0FB QUtCQjV3a0FBQUJBZy9BRUFBQUFvT0ZZQ1FCZ25EYTMzdWFjWjNVT0lWemQ5VGdBQUkrbjh3UUFB QUNnUWVjSkFFekRTVDlmS1FVQXdIYnBQQUdBa2FwYmRmb3hMM2RmbFhGV2JyKzhXVmNoQUlEdDBI a0NBT08zTGlQM3Q3TnlBQUJzbDg0VEFCaXBlamhzUHk3TDNVOWxmQzYzbHpmcktnUUFzQjA2VHdC Z0dsWktBQUN3R3pwUEFBQUFBQnBDMTNXcUFBQUFBSEFQblNjQUFBQUFEY0lUQUFBQWdBYmhDUUFB QUVDRDhBUUFBQUNnUVhnQ0FBQUEwQ0E4QVFBQUFHZ1FuZ0FBQUFBMENFOEFBQUFBR29RbkFBQUFB QTNDRXdBQUFJQUc0UWtBQUFCQWcvQUVBQUFBb0VGNEFnQUFVTVFZNTZvQTNFVjRBZ0FBY0Mwb0FY QVg0UWtBQUhEd1lveXpNcjB1ODRscUFMZUZydXRVQVFBQU9FajlWcDNhY1hKZXhta1pxekxlbFpG VFNrc1ZBaXJoQ1FBQWNQQmlqTFVyLzAwWmIxTktLeFVCTnRtMkF3QUFITHlVMHJwTTd3VW53RjJF SndBQUFOZldTZ0RjeGJZZEFBQUFnQWFkSndBQUFBQU53aE1BQUFDQUJ1RUpBQUFBUUlQd0JBQUFB S0JCZUFJQUFBRFFJRHdCQUFBQWFCQ2VBQUFBQURRSVR3QUFBQUFhaENjQUFBQUFEY0lUQUFBQWdJ WmpKUUFBQUtDbDY3cnZ0M1BPc3hEQzFWMlB3VlRwUEFFQUFBQm9FSjRBQUFEd1MzTE9vVXluWmZa ZWtvUGlCeDRBQUlDbXVsV25qbkx6UlJrMVFIbXhzUWFUSnp3QkFBQ2dxWjV4MHA5ejhyOWw1REtX RzJzd2VjSVRBQUFBZmtrSW9RWW5sLzBNQjBONEFnQUFBTkFRWEZZS0FBQUE0SDQ2VHdBQUFBQWFq cFVBZUU2dDdyZWM4enlFc0h6TTl3SUFBR3lMemhNQUFBQ0FCdUVKQUFBQVFJUHdCQmd5V3dzQkFJ Qm5KendCQmlubkhNbzA3K2VkaURIT1ZCb0FBUGdaNFFrd1ZMLzM4MW5PV1RVQUFJQm5JendCQmlY bi9Gc1ovMVZ1dnV5WFhwUnhYdGEydW9VbnhsZzdXazdMN1BjZ0FBRFFkQkRuQ2R5MDVxZVVydnlU dzdEVXl4RnYzSzJCUmcxTmZydmpkMVVOVUQ2WGVYMnpXUDZmWGo3MjkwRngwdjk1TDhyYXBkOFJB QURBZlJ6R0NEeXJFTUovQkNBNTV5OWxxb0hLMmNaeURUYytscTlkYjM1dDEzVVAvdk51QXBJWTQ3 ci9jNVpsemI0Z0FBRGdYb2ZTcm43U0QyRGdRZ2czZ2NxbmZxa0dKeDl1QnlkUDFRY21sNElUQUFE Z1p5YmJlWEtyTmY5VmZVL1duM0dnUFIvR1lkbi92L3VwQmlvQUFBRFA1UkE2VCtxbjFYbGpBQ01R UXZqV0dWTG1uUVdkUWxRQUFPQlhUTGJ6Wk9OTjBWV01zYmIvLy9hWXd5V0JaL1ZWQ1FBQWdPZDJL QWZHcnZ4VHd5anBGZ01BQUo3ZGIwb0FBQUFBY0wvd21FdDlBZ0FBQUJ3S25TY0FBQUFBRGNJVEFB QUFnQWJoQ1FBQUFFQ0Q4QVFBQUFDZ1FYZ0NBQUFBMENBOEFRQUFBR2dRbmdBQUFBQTBDRThBQUFB QUdvUW5BQUFBVHhCai9Jc3F3TFFKVHdBQUFBQWFoQ2NBQUFCUEU1UUFwazE0QWdBQThEUnpKWUJw RTU0QUFBQThVb3l4dnFjNkwvTk1OV0M2aENjQUFBQ1A5N2VqNjIwN2Y4UVliZCtCaVpwZFhGeW9B Z0FBd0FQRUdJL0xlNmsveXMyLzlrdDE2ODVaV1ZzdUZvdVZDc0cwaEs3clZBRUFBS0RoMXVXSTZ4 YWRHcHFjM1BHbHVZeC9sZkgxWmlHbDlHOFZoSEViZlhpeStkK2ZjejRPSWF6dWVnd0FBR0JiK2kw Nk5WQjVjL1RqYWp0L2x2R1BsSkxPRTVpWTQ0bjlmZXd4QkFBQWRpNmxWRHRNM3ZjaFNnMVFQcFMx djZzTVROTmtEb3pOT2RlL3k3eWZBUUFBOXFGdXlhbEJ5aitWQXFacjlFRkQzYXBUUjduNXF2Lzdu Slg3Si8wYUFBREF6cVNVMW1YNnM4eVhxZ0hUTmZyd3BKNXgwcDl6OHJHTStvdnJZN24vZGZQc0V3 QUFnQjM2ckFRd2JaUFo0aEpDcUsxeXl6S3YvYk1DQUFCNzVEMElUTnpVemdmSi9ra0JBQUNBYlFv dTV3c0FBQUJ3UDFlbUFRQUFBR2dRbmdBQUFBQTBDRThBQUFBQUdvUW5BQUFBQUEzQ0V3QUFBSUFH NFFrQUFBQkFnL0FFQUxZb3hqaFRCUUNBYVJHZUFBQUFBRFFJVHdCZ1MyS01vVXluWmZiOENnQXdJ YUhyT2xVQWdDZlkyS3B6Y25UOXdVUXU0N0l1cEpTdVZBZ0FZTnlFSndDd0pYM255YnlNWlVvcHF3 Z0F3RFJvS3dhQUxla0RrMHZCQ1FEQXRBaFBBQUFBQUJwbUZ4Y1hxZ0FBVzdKWUxIU2RBQUJNak00 VEFBQUFnQWJoQ1FBQUFFQ0Q4QVFBQUFDZ1FYZ0NBQUFBMENBOEFZQUJpREhPVkFFQVlKaUVKd0FB QUFBTndoTUFlR1l4eGxDbTB6SjdYZ1lBR0tEUWRaMHFBTUF6Mk5pcWMzSjAvWUZHTHVPeUxxU1Vy bFFJQUdBWWhDY0E4TXo2enBONUdjdVVVbFlSQUlCaDBSNE1BTStzRDB3dUJTY0FBTU1rUEFFQUFB Qm9tRjFjWEtnQ0FEeXp4V0toNndRQVlLQjBuZ0FBQU1EQXhCai9vZ3JESVR3QkFBQUFhQkNlQUFB QXdQQUVKUmdPNFFrQUFBQU16MXdKaGtONEFnQUFBQU1TWTZ6djFjL0xQRk9OWVJDZUFBQUF3TEQ4 N2VoNjI4NGZNVWJiZHdiQXBZb0JBQUJnQUdLTXgrVTkraC9sNWwvN3BicDE1NnlzTFJlTHhVcUZu ay9vdWs0VkFBQUFZTTl1WFk2NGJ0R3BvY25KSFYrYXkvaFhHVjl2RmxKSy8xYkIvUkdlQUFBQXdB RDBXM1Jxb1BMbTZNZlZkdjRzNHg4cEpaMG56MGg0QWdBQUFBTVNZM3g5ZEIyZ2ZFZ3AvVjFGbnA4 RFl3RUFBR0JZNnBhY3VsWG5uMG94RE1JVEFBQUFHSkNVMHJwTWY1YjVValdHUVhnQ0FBQUF3L05a Q1laRGVBSUFBQUREczFhQzRSQ2VBQUFBQURTNDJnNEFBQUJBZzg0VEFBQUFnQWJoQ1FBQUFFQ0Q4 QVFBQUFDZ1FYZ0NBQUFBMENBOEFRQUFBR2c0VmdLbWJ2T0tVam5uNHhEQzZxN0hBQUFBNEM0NlR6 ZzBRUWtBQUFCNENPRUpCeVBuWEgvZTUvME1BQUFBdjhTYlNDYXZidFdwbzl4ODFmL01uNVg3Si8w YUFBQUFOQWxQbUx4NnhrbC96c25ITXRaMUx2ZS9icDU5QWdBQUFQY1JubkF3UWdpNVRNc3lyMVVE QUFDQVh5VTg0ZEJrSlFBQUFPQWhna3UxQWdEQTRZZ3h6bE5LUzVVQStIVTZUd0FBNExBRUpRQjRH T0VKQUFBY2lCampyRXl2eTN5aUdnQy96cllkQUFDWXVMcFY1K2k2NCtTOGpOTXk2bFVIMzVXUmJl RUIrRG5oQ1FBQUhJZ1lZKzA4ZjFQRzI1VFNTa1VBZm8xdE93QUFjQ0JTU3VzeXZSZWNBRHlNOEFR QUFBN0xXZ2tBSHNhMkhRQUFBSUFHblNjQUFBQUFEY0lUQUFBQWdBYmhDUUFBQUVDRDhBUUFBQUNn UVhnQ0FBQUEwQ0E4QVFBQUFHZ1FuZ0FBQUFBMENFOEFBQUFBR29RbkFBQUFBQTNDRXdBQUFJQUc0 UWtBQUFCQWcvQUVBQUFBb0NIa25GVUJBQUFBNEI0NlR3QUFBQUFhaENjQUFBQUFEY0lUQUFBQWdB YmhDUUFBQUVDRDhBUUFBQUNnUVhnQ0FBQUEwQ0E4QVFBQUFHZ1FuZ0FBQUFBMENFOEFBQUFBR29R bkFBQUFBQTNDRXdBQUFJQUc0UWtBQUFCQWcvQUVBQUFBb0VGNEFnQUFBTkFnUEFFQUFBQm9FSjRB QUFBQU5BaFBBQUFBQUJxRUp3QUFBQUFOd2hNQUFBQ0FCdUVKQUFBQVFJUHdCQUFBQUtCQmVBSUFB QURRSUR3QkFBQUFhQkNlQUFBQUFEUUlUd0FBQUFBYWhDY0FBQUFBRGY4bndBQnJaaXRlQ3duUnF3 QUFBQUJKUlU1RXJrSmdnZz09IiksIHVybCgiZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBL R2dvQUFBQU5TVWhFVWdBQUEvRUFBQUpCQ0FZQUFBQU9mRFZVQUFBQUdYUkZXSFJUYjJaMGQyRnla UUJCWkc5aVpTQkpiV0ZuWlZKbFlXUjVjY2xsUEFBQUE0WnBWRmgwV0UxTU9tTnZiUzVoWkc5aVpT NTRiWEFBQUFBQUFEdy9lSEJoWTJ0bGRDQmlaV2RwYmowaTc3dS9JaUJwWkQwaVZ6Vk5NRTF3UTJW b2FVaDZjbVZUZWs1VVkzcHJZemxrSWo4K0lEeDRPbmh0Y0cxbGRHRWdlRzFzYm5NNmVEMGlZV1J2 WW1VNmJuTTZiV1YwWVM4aUlIZzZlRzF3ZEdzOUlrRmtiMkpsSUZoTlVDQkRiM0psSURVdU5TMWpN REl4SURjNUxqRTFOVGMzTWl3Z01qQXhOQzh3TVM4eE15MHhPVG8wTkRvd01DQWdJQ0FnSUNBZ0lq NGdQSEprWmpwU1JFWWdlRzFzYm5NNmNtUm1QU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1Rr NUx6QXlMekl5TFhKa1ppMXplVzUwWVhndGJuTWpJajRnUEhKa1pqcEVaWE5qY21sd2RHbHZiaUJ5 WkdZNllXSnZkWFE5SWlJZ2VHMXNibk02ZUcxd1RVMDlJbWgwZEhBNkx5OXVjeTVoWkc5aVpTNWpi MjB2ZUdGd0x6RXVNQzl0YlM4aUlIaHRiRzV6T25OMFVtVm1QU0pvZEhSd09pOHZibk11WVdSdllt VXVZMjl0TDNoaGNDOHhMakF2YzFSNWNHVXZVbVZ6YjNWeVkyVlNaV1lqSWlCNGJXeHVjenA0YlhB OUltaDBkSEE2THk5dWN5NWhaRzlpWlM1amIyMHZlR0Z3THpFdU1DOGlJSGh0Y0UxTk9rOXlhV2Rw Ym1Gc1JHOWpkVzFsYm5SSlJEMGllRzF3TG1ScFpEcGtORFE0T1RNME1DMWlaakZqTFRRMVlqa3RZ ams0TVMxaE1qaGxPR0poT0RJNVlUWWlJSGh0Y0UxTk9rUnZZM1Z0Wlc1MFNVUTlJbmh0Y0M1a2FX UTZSalUyT0VORFJVVTBOVEV3TVRGRk5FRTBNMFZGTXpZeE9UbEZNMFUzUXpnaUlIaHRjRTFOT2ts dWMzUmhibU5sU1VROUluaHRjQzVwYVdRNlJqVTJPRU5EUlVRME5URXdNVEZGTkVFME0wVkZNell4 T1RsRk0wVTNRemdpSUhodGNEcERjbVZoZEc5eVZHOXZiRDBpUVdSdlltVWdVR2h2ZEc5emFHOXdJ RU5ESURJd01UUWdLRTFoWTJsdWRHOXphQ2tpUGlBOGVHMXdUVTA2UkdWeWFYWmxaRVp5YjIwZ2Mz UlNaV1k2YVc1emRHRnVZMlZKUkQwaWVHMXdMbWxwWkRveU16SXhObVJsWmkwMU9UbG1MVFE0TjJZ dE9HUTFaQzA1TXpNME1EUXdZbVZqTmpBaUlITjBVbVZtT21SdlkzVnRaVzUwU1VROUltRmtiMkps T21SdlkybGtPbkJvYjNSdmMyaHZjRG96TVdKaU5EWmlPQzA0WkRabExURXhOemN0T1RjNFpDMWpZ emRsTTJRNVpHWTFPREFpTHo0Z1BDOXlaR1k2UkdWelkzSnBjSFJwYjI0K0lEd3ZjbVJtT2xKRVJq NGdQQzk0T25odGNHMWxkR0UrSUR3L2VIQmhZMnRsZENCbGJtUTlJbklpUHo0M0ZmMVBBQUFYU2ts RVFWUjQydXpkM1c4YjE1bkFZUjJMMUZMZTJvWVMyMUZicE5nRXhXSXZObW11QytTaWY5bmgvR2t0 OW42QlJYS3pDWXEwaTdhVzZnL0ZOU3habERqN0hudm9FSTZjeWhaSm5TR2ZCemc0NUZqOXlPdEE0 azh6NUtUeGVMd0ZBQUFBMU8rR0VRQUFBSUNJQndBQUFFUThBQUFBaUhnQUFBQkF4QU1BQUFBaUhn QUFBRVE4QUFBQUlPSUJBQUFBRVE4QUFBQWlIZ0FBQUJEeEFBQUFnSWdIQUFBQUVROEFBQUNJZUFB QUFFREVBd0FBZ0lnSEFBQUFSRHdBQUFBZzRnRUFBRURFQXdBQUFDSWVBQUFBUkR3QUFBQWc0Z0VB QUFBUkR3QUFBQ0llQUFBQUVQRUFBQUNBaUFjQUFBQVJEd0FBQUloNEFBQUFRTVFEQUFDQWlBY0FB QUJFUEFBQUFDRGlBUUFBUU1RRGNCazU1eDFUQUFCQXhBUDB3MjBqQUFEZ2ZReU1BR0ExY3M3RDJH N0Z1aGVQeXk5Um56Uk5NekVaQUFCRVBFQmx1bUIvWEFJK0hqODBFUUFBM3BYTDZRRlc3NmtSQUFB ZzRnRjZvR21hVTFNQUFFREVBd0FBZ0lnSEFBQUFSRHdBQUFBZzRnRUFBRURFQXdBQUFDSWVBQUFB RVBFQUFBQWc0Z0VBQUFBUkR3QUFBSWg0QUFBQUVQRUFBQUNBaUFjQUFBQVJEd0FBQUloNEFBQUFR TVFEQUFDQWlBY0FBQUJFUEFBQUFDRGlBUUFBUU1RREFBQUFJaDRBQUFBUThRQUFBQ0RpQVFBQUFC RVBBQUFBaUhnQUFBQVE4UUFBQUlDSUJ3QUFBRVE4QUFBQWlIZ0FBQUJBeEFNQUFJQ0lCd0FBQUVR OEFBQUFJT0lCQUFCQXhBTUFBQUFpSGdBQUFCRHhBQUFBSU9JQkFBQUFFUThBQUFDSWVBQUFBQkR4 QUFBQWdJZ0hBQUFBUkR3QUFBQ0llQUFBQUVERUF3QUFBQ0llQUFBQVJEd0FBR3NoNXp3eUJRQVJE d0JBUHlRakFCRHhBQUJVTHVlOEhkdGU3QVBUQUtpSGI4b0FBTXpIKyt3UytyMVl3MWo3Y2V4UjdH M1ROQ2NtQkNEaUFRQ294Q3pVSTl3UFNzREhPb3hqWnlZRFVBZVgwd01BY0ZITVQyTTdFdkFBSWg0 QWdINllHZ0dBaUFmZ21ybHRGSEFaM2dNUElPSUJxSVBiUmdFQWlIZ0FhdWUyVVFBQS9lVUZITURt eEx2YlJnRUFpSGdBK3NCdG93QUErcy9sOUFDYkYvTnVHd1VBSU9JQjZCRzNqUUlBRVBFQTlJSDN3 QU1BaUhnQUFBQkF4QU1BQUFBaUhnQUFBRVE4QUFBQUlPSUJBQUJBeEFNQUFBQWlIZ0FBQUJEeEFB QUFJT0lCQUFBQUVROEFBQUNJZUFBQUFGaExBeU9veDNnOGZybTNiYnVUVWpxZFAvWlRjczQzbTZa NWJvSUFBQURyelpuNE90Mk9rSCtYci8rRmtRRUFBS3cvWitJckV1RStqTzFXckh1eGJzVHpKMDNU VE43MjlUbm4zZGcraXZYcmVGeCtJZk4vOGZYSEpna0FBQ0RpV2JLVVVnbjJ4eEh2SmNnZnh2T2Z2 SnkrQy9idkl1QUg4ZmhiRXdRQUFGaHZMcWV2MDlNUzhPL2dyMFlHQUFDdy90SmxQamdOQUFBQXVI N094QU1BQUlDSUJ3QUFBRVE4QUFBQWlIZ0FBQUJBeEFNQUFBQWlIZ0FBQUVROEFBQUFJT0lCQUFB QUVROEFBQUFpSGdBQUFCRHhBQUFBZ0lnSEFBQUFFUThBQUFDSWVBQUFBRURFQXdBQWdJZ0hBQUFB UkR3QUFBQWc0Z0VBQUVERUF3QUFzREk1NTVFcGlIZ0FBQUQ2SVJtQmlBY0FBS0J5T2VmdDJQWmlI NWpHZXZNWERBQUEwTjk0bjExQ3Z4ZHJHR3MvamoyS3ZXMmE1c1NFUkR3QUFBQ1ZtSVY2aFB0QkNm aFloM0hzekdUV2w4dnBBUUFBK2gvejA5aU9CTHlJQndBQW9CK21SaURpQVFBQTZBSHZnUmZ4QUFB QWdJZ0hBQUFBUkR3QUFBQ0llQUFBQUVERUF3QUFBQ0llQUFBQVJEd0FBQUFnNGdFQUFBQVJEd0FB QUNJZUFBQUFFUEVBQUFDQWlBY0FBQUFSRHdBQUFJaDRBQUFBRVBFQUFBQ0FpQWNBQUFCRVBBQUFB SWg0QUFBQVFNUURzQlp5emlOVEFBQVE4UUQwUXpJQ0FBQVJEMERsY3M3YnNlM0ZQakFOQUlEVjhN SUxnSGVOOTlrbDlIdXhockgyNDlpajJOdW1hVTVNQ0FCQXhBTlFpVm1vUjdnZmxJQ1BkUmpIemt3 R0FHRDVYRTRQd1B2Ry9EUzJJd0VQQUNEaUFlaUhxUkVBQUt5T3krbDViVHdldjM3Y3R1MG9wWFJ5 MFo4QnpIZ1BQQURBYWprVHo5dTRiUlFBQUlDSXAzWnQyNzY4YlZUc3J0UUFBQUFROFZRYTc2T3k0 dUg5cmU2MlVmRjh0enNHQUFDQWlLY1c1VDN3M2Z2Z3kyMmpKckVleFBQaitmZkdBd0FBSU9LcEsr WmYzallxZHJlTkFnQUFFUEgwZ050R0FRQUFWQ2E1ZFJnQUFBRDBnelB4QUFBQUlPSUJBQUFBRVEv MFNzN1piUW9CQUVERUF6MlJqQUFBQUVROFVMbWM4M1pzZTdFUFRBTUFBSzdHaTJwZ1dmRSt1NFIr TDlZdzFuNGNleFI3MnpUTmlRa0JBSUNJQnlveEMvVUk5NE1TOExFTzQ5aVp5UUFBd1B0ek9UMnc3 SmlmeG5ZazRBRUFRTVFEL1RBMUFnQUFFUEZBRDNnUFBBQUFpSGdBQUFBUThRQUFBSUNJQndBQUFF UThBQUFBaUhnQUFBQkF4QU1BQUFBaUhnQUFBRVE4QUFBQUlPSUJBQUFBRVE4QUFBQWlIZ0FBQUJE eEFBQUFnSWdIQUFBQUVROEFBQUNJZUFBQUFCRHhBQUFBZ0lnSEFBQUFSRHdBQUFDSWVBQUFBRURF QXdBQUFDSWVBQUFBUkR3QUFBQWc0Z0VBQUFBUkR3QUFBQ0llQUFBQUVQRUFBQ3hQem5sa0NnQWlI Z0NBZmtoR0FDRGlBUUNvWE01NU83YTkyQWVtQWRCZnZva0RBS3gzdk04dW9kK0xOWXkxSDhjZXhk NDJUWE5pUWdBaUhnQ0FTc3hDUGNMOW9BUjhyTU00ZG1ZeUFQM2tjbm9BZ00ySStXbHNSd0llUU1R REFOQVBVeU1BRVBFQUFQU0E5OEFEaUhnQUFBQkF4QU1BQUFBaUhnQUFBRVE4QUFBQUlPSUJBQUJB eEFNQUFBQWlIZ0FBQUJEeEFBQUFJT0lCQUFBQUVROEFBQUNJZUFBQUFCRHhBQUFBZ0lnSEFBQUFS RHdBQUFDSWVBQUFBRURFQXdBQUFDSWVBQUFBUkR3QUFBQWc0Z0VBQUFBUkR3QUFBQ0llQUFBQUVQ RUFBQUFnNGdFQUFBQVJEd0FBQUloNEFBQUEyRGdESXdBQW9GYmo4ZmpsM3JidFRrcnBkUDRZd0Na eUpoNEFnRDY0SFNGdkNvQ0lOd0lBQUdvVjRUNk05VUU4dkJmcmZubHVLb0NJQndDQUNxV1VKckVl eDhPL3h6b3N6MDBGRVBFQUFGQzNweEh3cGdCc3ZPU0RRUUFBQUtBZm5Ja0hBQUFBRVE4QUFBQ0ll QUJnSlhMT2QwMEJBRVE4QU5BUEF5TUFBRCtZdCtZL1VLOXQyMUZLNmVTaVB3TUFya2ZPZVRlMnoy Si8xalROTXhNQmdBMk8rRGU0WHdnQTFCUHY1Ukw2N1ZqL0dldFdyQy9qMkgvSGZoWXgvOUNFQUdD REk3NXQyL0lpWVMvMlNVcnB6RjhKQUZ5dldhaEh1RCtPN1hleC9pdU9QVGNaQUxoKzEvYWUrSElK ZlZueDhINnNZYXo5ZUw3YkhRTUFyai9tSjdGOUxlQUJRTVJ2bGZmQWQrK0RQNGhWWGlROGlPZkg4 KytOQndDdTNRc2pBQUFSUHgvejA5aU9YRW9QQVBYeEhuaUF6WlJ6ZG9XMGlQOUpVMzhWQUFBQTFm RGg0N1greGJpZEd3QUFBRE01NS9MaDR4L0ZPbXlheGhYVGxSa1lBUUFBQUhPWDBPOXRkUjgrSHNj ZXhkNUd6UHZzTWhFUEFBQkFMV2FoSHVGZVBueDhmOHVaK0NyZE1BSUFBQURtWXY3bGg0OExlQkVQ QUFCQVAvandjUkVQQUFCQUgzZ1B2SWdIQUFBQVJEd0FBQUNJZUFBQUFFREVBd0FBQUNJZUFBQUFS RHdBQUFBZzRnRUFBQUFSRHdBQUFDSWVBQUFBRVBFQUFBQ0FpQWNBQUFBUkR3QUFBSWg0QUFBQVFN UURBQUNBaUFjQUFBQkVQQUFBQUloNEFBQUFRTVFEQUFBQUloNEFBQUJFUEFBQUFDRGlBUUFBQUJF UEFBQUFJaDRBQUFBUThRQUFBSUNJQndBQUFCRVBBQUFBaUhnQUFBRGdBZ01qQUFBQWdQYzNIbzlm UDI3YmRwUlNPcm5venhiQm1YZ0FBQUJZbkxUTS8zSVJEd0FBQUF2UXR1MTJiSHV4TCsycWR4RVBB QUFBVjR2M1VWbng4SDZzWWF6OWVMN2JIUlB4QUFBQVVJdnlIdmp1ZmZBSHNTYXhIc1R6NC9uM3hv dDRBQUFBcUN2bXA3RWR4WDYyclA4TkVROEFBQUNMTTEzbWYzbGE5TWZkQXdEQXVsamxiYU1BTHNP WmVBQUF1SnhrQklDSUJ3Q0F5cTNpdGxFQUloNEFBSzRXN3l1N2JSU0FpQWNBZ0N0WTVXMmpBRVE4 QUFBc0p1YVhmdHNvQUJFUEFBQ0xNelVDNExxNXhSd0FBQUQwaERQeEFBQUFJT0lCQUFBQUVROEFB QUFpSGdBQUFCRHhBQUFBZ0lnSEFBQUFFUThBQUFDSWVBQUFBRURFQXdDd2dYTE9kMHdCRVBFQUFO QVAyMFlBaUhnQUFLaGN6bmtudGs5ajN6VU5ZSjBOakFDQVRUSWVqMS91YmR2ZVRDazluejhHOURM ZXl5WDA1Y1RVSjdGS3dIOGV4NzZKL2J4cG11OU5DQkR4QUxBZWZoRWgvMjJFdkVsQWo4MUNQY0w5 SDdGOUVldXJPSFppTXNDNmNqazlBQnNsd24wMzFyL0Z3MS9IK3ZmeTNGUmdMV0wrTExidkJEd2c0 Z0ZnamFTVWptTjlGdysvamZXLzVibXB3TnFZR0FFZzRnRmdQZjNWcGZTd1hyd0hIdGdFeVlmNUFB QUFRRDg0RXc4QUFBQWlIZ0FBQUZna3Q1Z0QzdG44MjNEYXRyMmJVbnA0MFo4QkFBQ0w1VXc4Y0ZW K0dRZ0FBQ0llcUYxM2YrM1BZditaYVFBQWdJZ0g2b3ozdTdFK2lvZS9qWFVyMXBmeGZMOGNOeDBB QUJEeFFFWEtlK0JqSGNURFA4UjZGdXYzOGZ6Qi9IdmpBUUFBRVEvVUZmT1QyTDZPL2JscEFBQ0Fp QWZxOThJSUFBQmdOWkxiUVFFQThLNXl6cU9tYVU1TUFtQzFuSWtIQU9COUpDTUFFUEVBQUZRdTU3 d2QyMTdzQTlNQVdDM2ZlQUVBdUd5OGo3cUhlN0dHc2ZiajJLUFlXNWZXQTRoNEFBQXFNZ3YxQ1Bk eW05SDlXSWR4N014a0FGYkg1ZlFBQUx4cnpFOWpPeEx3QUNJZUFJQittQm9CZ0lnSEFLQUh2QWNl UU1RREFBQUFJaDRBQUFCRVBBQUFBQ0RpQVFBQUFCRVBBQUFBSWg0QUFBQVE4UUFBQUNEaUFRQUFB QkVQQUFBQWlIZ0FBQUFROFFBQUFJQ0lCMWhuT2VlQktRQUFJT0lCQUFBQUVROEFBQUFpSHNEM1ZB QUE4SUlUb0ZLRG5ITXlCZ0FBUkR4QXhTTGVkN3FITzZZQkFNQ3krQ1JsZ0t2RmV6bnpQcHo3ZnJv ZHgwYXhuelpOTXpVaEFBQkVQTUQxUmZ2ODk4M1VmUjk5OHhMNmNwWFRLTDUyRW5zN094aFJmMmFD QUFDSWVJQVZ1U0RFSjEzWXoxOUdmNzcxNmt4OGEySUFBSWg0Z01yQ1BrSitxd3Y1ODNqK3dsUUFB RmdHSDJ3SHNLQ1E3eDVPVEFNQUFCRVBVTDl6SDJZSEFJQ0lCK2hKeEJzQkFBQWlIZ0FBQUJEeEFB QUFJT0lCTm96N3dBTUFJT0lCQUFBQUVROEFBQUFpSGdBQUFCRHhBQUFBSU9JQkFBQUFFUThBQUFD SWVBQUFBQkR4QUFBQWdJZ0hBQUFBUkR3QUFBQ0llQUFBQUVERUF3QUFBQ0llQUFBQVJEd0FBQUFn NGdFQUFBQVJEd0FBQUNJZUFBQUFXTHFCRVFBQTFHRThIcjkrM0xidEtLVjBjdEdmQWJDNW5Ja0hB S2hUTWdLQXhjczVmeWppQVFCWW1MWnR0MlBiaTkxVmt3Q0llQUNBU3VOOVZGWTh2QjlyR0dzL251 OTJ4d0JZakY1ZjZTVGlBUUJxZVZXWjBrbjNQdmlEV0pOWUQrTDU4Zng3NHdHNHNwc2lIZ0NBUmNi OE5MYWoyTTlNQTJCeGNzN2w3VXAzWSsvdDI1VkVQQUNiOUlQN2ppblFJMU1qQUZpNG4yKzl1cHor NDNoZDBNdkw2cFBibFFDd1FSSC9RZE0wajAwQ0FEYnVOVUQ1bkpGZnhwci9aUHJuc2Y0VXJ3MmVp M2dBcU8rSDkwNXNuOGY2T241WUg1c0lBS3oxei8zNVdDK1h6cGNQRE4yNTRFdmJXSCtMZFRvN0VL OFRIb2w0QUxpK0grTGxFdnJ5OXJGUFl2MXI5MFA2bTFqbjhVUDZleE1DZ0kxNFBWQXVuUzloLzZ1 dEh6NmQvaWpXbitQMXdLUlAveXdpSG9CTitlRmRmZ3YvUmF5djRvZTFUL29HZ00xOFBWRE95SDhj NjBtOEh2aGpILzhaZkxBZEFCc2hmbENYVC9uK1RzQUR3RVlybDhxWFMrai8wdGQvQUJFUHdDYVpH QUVBYks2bWFjNWpPNHI5aFlnSGdQcC9jSHNQUEFEd3JNLy81MFU4QUFBQW0rUmN4QU1BQUFBaUhn QUFBQmFsOXZ2QWkzZ0FBQUJZRXlJZUFBQUFSRHdBQUFBZzRnRUFBRURFQXdBQUFDSWVBQUFBRVBF QUFBQWc0Z0VBQUFBUkR3QUFBSWg0QUFBQUVQRUFBQUNBaUFjQUFBQkVQQUFBQUloNEFBQUFRTVFE QUFBQUloNEFBQUJFUEFBQUFDRGlBUUFBQUJFUEFBQUFJaDRBQUFBUThRQUFBQ0RpQVFDQVM4azVl eTBOaUhnQUFPaUpiU01BVm0xZ0JBQUFjSGs1NTlTOWpoNTJqeWROMDdRbUE0aDRBQUNvVEJmc2t3 ajQ4bmhpSXNBcXVad2VBQURlejdrUkFLdm1UUHlDamNmanQvNVoyN2FEbE5MWisveG5WeVhudk4w MGpSOUlBQUQvUkx4bW1wb0NzR3JPeFBPbWZ6RUNBQUNBT2prVHowdmRMVkpLd04vc1BxRGwyRytY QVFBQVJQd21xL2JLaHk3WWowdkF4K1BuL3FvQUFBQkU1Y1pxMjVkM0hSbkVuaXIvdi9yQzN4WUFB SUNJMzNRN3M3MEwraXI1VURzQUFBQVJ2N0hLbWZkWUplQm5iMTNZampXS1kyWVBBQUNBaUwvbWFC L01yV0VKOXEwZmYvYkFqUzdraC9OZmIzb0FBQUNJK0JVcTk0R2ZXNU00ZEJ6cjlJMHZLNWVzSDVj L24vOTYwd01BQU9Dbk9QdTcvS2d2MjFuM1B2aWRMdUJmZE1jQkFBRGcwcHlKWDUzWm1mYUpnQWNB QUVERVY2d0w5L1BZcDZZQkFBQ0FpSytmMjdjQkFBQWc0Z0VBQUVERUF3QUFBRlZJNC9IWUZBQUFB S0FIbklrSEFBQUFFUThBQUFDSWVBQUFBQkR4QUFBQWdJZ0hBQUFBUkR3QUFBQ0llQUFBQUVERUF3 QUFBQ0llQUFBQVJEd0FBQUFnNGdFQUFBQVJEd0FBQUNJZUFBQUFFUEVBQUFDQWlBY0FBSUNlR2hn QkFBREExWXpINDllUDI3YTltMUo2ZU5HZndWVTVFdzhBQUxCWVRwWWk0Z0VBQUdyWHR1MXViSi9G L2pQVFFNUURBTUNTNVp3L05BWGVJOTd2eHZvb0h2NDIxcTFZWDhiei9YTGNkQkR4QUFBQUZTbnZn WTkxRUEvL0VPdFpyTi9IOHdmejc0MEhFUThBQUV2b01TUGdDakUvaWUzcjJKK2JCaUllQUFDVzc2 WVJjRVV2aklCbFNXNTNBQUFBcitTY3QyUDdUYXovYVpybXpFU0EyamdURHdBQVAvajUxcXZMNlQr T29IZFpQVkFkOXk4RUFHRGpSYkFQWS90bHJOa24wMzhRYXhUSC85UTBqZmMyQXlJZUFBQ3VNZG8v Zk9NMThmMVlPMjk4V1hsdi9IL0UxLzR0OXRQWndZajZSeVlJaUhnQUFGaVJOME04UXYxdzY5Vlor Rjl0L2ZEcDlFZXgvaHhmT3pFeFFNUURBRUE5VWQvRzlqQml2bnhtMU1leG5zU3hQNW9NVUJzZmJB Y0FBRDhvWitoTDBQL0ZLQUFSRHdBQUZXdWE1ankybzlqZDV4c1E4UUFBMEFQUGpBQVE4UUFBMEEv blJnQ0llQUFBQUVERUF3REFvcmdQUENEaUFRQUFBQkVQQUFBQUloNEFBQUFROFFBQUFJQ0lCd0FB QUJFUEFBQUFpSGdBQUFCQXhBTUFBSUNJQndBQUFFUThBQUFBSU9JQkFBQkF4QU1BQUFBaUhnQUFB QkR4c0lseXpqdW1BQUFBSWg3b2g5dEdBQUFBL1RRd0F0Z01PZWRoYkxkaTNZdkg1UmQ0VDVxbW1a Z01BQUNJZUtBeVhiQS9MZ0VmangrYUNBQUE5SS9MNldIelBEVUNBQUFROFVBUE5FMXphZ29BdkUz TytZNHBBSWg0QUFENllkc0lBRVE4QUFDVjYyNUQrbW5zdTZZQlVDY2ZiQWNBeXd1aThrR1NVNU9n Qi8rdWxrdm95OG1kVDJLVmdQODhqbjBUKzNuOE8veTlDUUdJZUFEWUJPV3laQkZQOVdhaEh1SCtq OWkraVBWVkhEc3hHWUQ2cFBGNGJBb0FzRUFSUW1ucjFTL0toN0hPWWswaWlGcVRvU2YvL3Q1MUsx S0FlamtURHdBTDFnWDdKR0tvUEo2WUNEM2ozMW1BaXZsZ093Qllubk1qb0crOEJ4NUF4QVBBcHNh UTk4TURBQ0llQUFBQVJEd0FBQUFnNGdFQUFBQVJEd0FBQUNJZUFBQUFFUEVBQUFDQWlBY0FBQUFS RHdBQUFJaDRBQUFBUU1RREFBQ0FpQWNBQUFCRVBBQUFBQ0RpQVFBQVFNUURBQUFBSWg0QUFBQVE4 UUFBQUNEaUFRQUFBQkVQQUFBQUloNEFBQUFROFFBQUFJQ0lCd0FBQUJFUEFBQUFpSGdBQUFCQXhB TUFBSUNJQndBQUFFUThBQUFBSU9JQkFBQkF4QU1BQUFBaUhnQUFBQkR4QUFBQUlPSUJBQUFBRVE4 QUFBQ0llQUFBQUJEeEFBQUFnSWdIQUFBQUVROEFBQUNJZUFBQUFFREVBd0FBZ0lnSEFBQUFSRHdB QUFBZzRnRUFBRURFQXdBQUFDSWVBQUFBRVBFQUFBQWc0Z0VBQUFBUkR3QUFBSWg0QUFBQUVQRUFB QUNBaUFjQUFBQkVQQUFBQUloNEFBQUFRTVFEQUFDQWlBY0FBQUJFUEFBQUFDRGlBUUFBUU1RREFB QUFWUmtZQVFBQXl6UWVqOS82WjIzYkRsSktaKy96bndYWVJNN0VBd0FBZ0lnSEFBQUFSRHdBQUY2 UEF2aW1DUUFBcTlHMmJka0dzU2ZUQUJEeEFBRFViV2UyZDBFUHdEL3grdFBwWjUvOEdkOUFkMUpL cC9QSEFBQmdVYm96NzhPNTE2TGJzVVp4L0RSZWgwNU5DT0R0TGpvVGY5dHZRZ0VBV0dDMEQrWldp ZmZSMW85dmRYeWpDL25oL05lYkhzQmJJcjc3aHZsQlBMd1g2MzczRFJZQUFLNmszQWQrYmszaTBI R3MwemUrN0x3Y0wzOCsvL1dtQi9DV2lPKytZVDZPaDMrUGRkaDlnd1VBZ0VWSC9WWVg2S2R6QWY4 aWpya2NGT0N5RVQvbmFmbkdDZ0FBU3pZNzB6N3graFBnY243MHdYWk4wNXo2UURzQTNpYm5mQ2Qr Vm54dkVzQlZsWEJ2Mi9iY2g5a0JYSjViekFId3JyYU5BRmlnY3lNQUVQRUFMRUhPdWR6VCtkUFlk MDBEQUdEMTNMWURnTXZFKzUydFY3LzQvU1JXQ2ZqUDQ5ZzNzWis3dEI0QVlIV1M5NzhEOEE0eFgz NzUrMFdzcnlMZVQwd0VBR0MxL2wrQUFRQjhlNlNkcE1qMmxRQUFBQUJKUlU1RXJrSmdnZz09Iiks IHVybCgiZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUJCc0FB QUlNQ0FZQUFBQzBRYVRkQUFBQUdYUkZXSFJUYjJaMGQyRnlaUUJCWkc5aVpTQkpiV0ZuWlZKbFlX UjVjY2xsUEFBQUE0WnBWRmgwV0UxTU9tTnZiUzVoWkc5aVpTNTRiWEFBQUFBQUFEdy9lSEJoWTJ0 bGRDQmlaV2RwYmowaTc3dS9JaUJwWkQwaVZ6Vk5NRTF3UTJWb2FVaDZjbVZUZWs1VVkzcHJZemxr SWo4K0lEeDRPbmh0Y0cxbGRHRWdlRzFzYm5NNmVEMGlZV1J2WW1VNmJuTTZiV1YwWVM4aUlIZzZl RzF3ZEdzOUlrRmtiMkpsSUZoTlVDQkRiM0psSURVdU5TMWpNREl4SURjNUxqRTFOVGMzTWl3Z01q QXhOQzh3TVM4eE15MHhPVG8wTkRvd01DQWdJQ0FnSUNBZ0lqNGdQSEprWmpwU1JFWWdlRzFzYm5N NmNtUm1QU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUx6QXlMekl5TFhKa1ppMXplVzUw WVhndGJuTWpJajRnUEhKa1pqcEVaWE5qY21sd2RHbHZiaUJ5WkdZNllXSnZkWFE5SWlJZ2VHMXNi bk02ZUcxd1RVMDlJbWgwZEhBNkx5OXVjeTVoWkc5aVpTNWpiMjB2ZUdGd0x6RXVNQzl0YlM4aUlI aHRiRzV6T25OMFVtVm1QU0pvZEhSd09pOHZibk11WVdSdlltVXVZMjl0TDNoaGNDOHhMakF2YzFS NWNHVXZVbVZ6YjNWeVkyVlNaV1lqSWlCNGJXeHVjenA0YlhBOUltaDBkSEE2THk5dWN5NWhaRzlp WlM1amIyMHZlR0Z3THpFdU1DOGlJSGh0Y0UxTk9rOXlhV2RwYm1Gc1JHOWpkVzFsYm5SSlJEMGll RzF3TG1ScFpEcGhNelU1TVRVeVpDMDNNREl5TFRRMU9ERXRPRGd5TnkweE4yUmtZell6WTJWaE16 QWlJSGh0Y0UxTk9rUnZZM1Z0Wlc1MFNVUTlJbmh0Y0M1a2FXUTZNVVUyT1RVelFrUTBOVEV4TVRG Rk5FRTBNMFZGTXpZeE9UbEZNMFUzUXpnaUlIaHRjRTFOT2tsdWMzUmhibU5sU1VROUluaHRjQzVw YVdRNk1VVTJPVFV6UWtNME5URXhNVEZGTkVFME0wVkZNell4T1RsRk0wVTNRemdpSUhodGNEcERj bVZoZEc5eVZHOXZiRDBpUVdSdlltVWdVR2h2ZEc5emFHOXdJRU5ESURJd01UUWdLRTFoWTJsdWRH OXphQ2tpUGlBOGVHMXdUVTA2UkdWeWFYWmxaRVp5YjIwZ2MzUlNaV1k2YVc1emRHRnVZMlZKUkQw aWVHMXdMbWxwWkRvNFltRmtPRFZrT1MxaVl6UXpMVFF4TVdRdE9USmpNaTAwWWpNNU1XRXhZbUk1 WVRJaUlITjBVbVZtT21SdlkzVnRaVzUwU1VROUltRmtiMkpsT21SdlkybGtPbkJvYjNSdmMyaHZj RG96TjJJek9XVTNZaTA0WkRabExURXhOemN0T1RjNFpDMWpZemRsTTJRNVpHWTFPREFpTHo0Z1BD OXlaR1k2UkdWelkzSnBjSFJwYjI0K0lEd3ZjbVJtT2xKRVJqNGdQQzk0T25odGNHMWxkR0UrSUR3 L2VIQmhZMnRsZENCbGJtUTlJbklpUHo1YzcxQmtBQUFTUUVsRVFWUjQydXpkWFc4Y1JScUc0UlQr Q0lvUkVjdUtIQkdKWDFyVFB6VWNvV2lSQ0lvajFsNVA3MXZFem5yWnNPRHcyTlBkdmk2cFZEM3Rr K2kxNDloM3VudmFicmQ3QWdBQUFKRHltUkVBQUFBQVNXSURBQUFBRUNVMkFBQUFBRkZpQXdBQUFC QWxOZ0FBQUFCUllnTUFBQUFRSlRZQUFBQUFVV0lEQUFBQUVDVTJBQUFBQUZGaUF3QUFBQkFsTmdB QUFBQlJZZ01BQUFBUUpUWUFBQUFBVVdJREFBQUFFQ1UyQUFBQUFGRmlBd0FBQUJBbE5nQUFBQUJS WWdNQUFBQVFKVFlBQUFBQVVXSURBQUFBRUNVMkFBQUFBRkZpQXdBQUFCQWxOZ0FBQUFCUllnTUFB QUFRSlRZQUFBQUFVV0lEQUFBQUVDVTJBQUFBQUZGaUF3QUFBQkFsTmdBQUFBQlJZZ01BQUFBUUpU WUFBQUFBVVdJREFBQUFFQ1UyQUFBQUFGRmlBd0FBQUJBbE5nQUFBQUJSWWdNQUFBQVFKVFlBQUFB QVVXSURBQUFBRUNVMkFBQUFBRkZpQXdBQUFCQWxOZ0FBQUFCUllnTUFBQUFRSlRZQUFBQUFVV0lE QUFBQUVDVTJBQUFBQUZGaUF3QUFBQkFsTmdBQUFBQlJZZ01BQUFBUUpUWUFBQUFBVVdJREFBQUFF Q1UyQUFBQUFGRmlBd0FBQUJBbE5nQUFBQUJSWWdNQUFBQVFKVFlBQUFBQVVXSURBQUFBRUNVMkFB QUFBRkZpQXdBQUFCQWxOZ0FBQUFCUllnTUFBQUFRSlRZQUFBQUFVV0lEQUFBQUVDVTJBQUFBQUZG aUF3QUFBQkFsTmdBQUFBQlJZZ01BQUFBUUpUWUFBQUFBVVdJREFBQUFFQ1UyQUFBQUFGRmlBd0FB QUJBbE5nQUFBQUJSWWdNQUFBQVFKVFlBQUFBQVVXSURBQUFBRUNVMkFBQUFBRkZpQXdBQUFCQWxO Z0FBQUFCUllnTUFBQUFRSlRZQUFBQUFVV0lEQUFBQUVDVTJBQUFBQUZGaUF3QUFBQkFsTmdBQUFB QlJZZ01BQUFBUUpUWUFBQUFBVVdJREFBQUFFQ1UyQUFBQUFGRmlBd0FBQUJBbE5nQUFBQUJSWWdN QUFBQVFKVFljU08vOTFCUUFBQURZSXJIQjdBRUFBTUF2dkd2WGV6K3E3Y3ZhajAwREFBQ0FyZkhM N2dPNnZuV2kxZnJ5ZXZaZjE3azN0ZStuYWJvd0lRQUFBTFpBYkhoQU4wR2g5LzVqYlgrdjlXT2R1 eklaQUFBQXRzUnRGQWN3VGRPK3RwK0ZCZ0FBQUxaSWJEaWN2UkVBQUFDd1JXTERnWGhHQXdBQUFG c2xOZ0FBQUFCUllnTUFBQUFRSlRZQUFBQUFVV0lEQUFBQUVDVTJBQUFBQUZGaUF3QUFBQkFsTmdB QUFBQlJZZ01BQUFBUUpUWUFBQUFBVVdJREFBQUFFQ1UyQUFBQUFGRmlBd0FBQUJBbE5nQUFBQUJS WWdNQUFBQVFKVFlBQUFBQVVXSURBQUFBRUNVMkFBQUFBRkZpQXdBQUFCQWxOZ0FBQUFCUllnTUFB QUFRSlRZQUFBQUFVV0lEQUFBQUVDVTJBQUFBQUZGaUF3QUFBQkFsTmdBQUFBQlJZZ01BQUFBUUpU WUFBQUFBVVdJREFBQUFFQ1UyQUFBQUFGRmlBd0FBQUJBbE5nQUFBQUJSWWdNQUFBQVFKVFlBQUFB QVVXSURBQUFBRUNVMkFBQUFBRkZpQXdBQUFCQWxOZ0FBQUFCUllnTUFBQUFRSlRZQUFBQUFVV0lE QUFBQUVDVTJBQUFBQUZGaUF3QUFBQkFsTmdBQUFBQlJZZ01BQUFBUUpUWUFBQUNiMEh0L1pncXdE R0lEQUFEZzl4dkFYMFlBQUlEYmV1L0h0YjJvL2RRMDRQQ09qUUFBQUZpcjYxc25XcTF2YW8zUThM TE8vVkQ3ZnBxbWR5WUVoeUUyQUFBQXEzVVRGSHJ2cjJyN3J0YjNkZTdTWk9DdzNFWUJBQUNzM2pS Tis5cGVDdzJ3REdJREFBQ3dGVmRHQU1zZ05nQUFBSnZnR1Eyd0hHSURBQUFBRUNVMkFBQUFBRkZp QXdBQUFCQWxOZ0FBQUFCUllnTUFBQUFRSlRZQUFBQUFVV0lEQUFBQUVDVTJBQUFBQUZGaUF3QUFB QkFsTmdBQUFBQlJZZ01BQUFBUUpUWUFBQUFBVVdJREFBQUFFQ1UyQUFBQUFGRmlBd0FBQUJBbE5n QUFBQUJSWWdNQUFBQVFKVFlBQUFBQVVXSURBQUFBRUNVMkFBQUFBRkZpQXdBQUFCQWxOZ0FBQUFC UllnTUFBQUFRSlRZQUFBQUFVV0lEQUFBQUVDVTJBQUFBQUZGaUF3QUFBQkFsTmdBQUFBQlJZZ01B QUFBUUpUWUFBQUFBVVdJREFBQUFFQ1UyQUFBQUFGRmlBd0FBQUJBbE5nQUFBQUJSWWdNQUFBQVFK VFlBQUFBQVVXSURBQUFBRUNVMkFBQUFBRkZpQXdBQUFCQWxOZ0FBQUFCUllnTUFBQUFRZFd3RUFP dTAyKzErM2VkNVBtbXRYZjcyUEFBQUhJb3JHd0RXcnhrQkFBQkxJallBck5nOHorUDcrRm50UjZZ QkFNQlNpQTBBSzlSN1A1bm4rYlFPbjljYW9lSDVlRDF1cVRBZEFBQU9UV3dBV0tGcG1pNWJheGQx K0ZPdGZhMDM0L1h0WnpjQUFNQ2hpQTBBSzlaYW0yczdyLzNLTkFBQVdBcXhBV0Q5OWtZQUFNQ1NO RytSQmdBQUFDUzVzZ0VBQUFDSUVoc0FBQUNBS0xFQkFBQUFpQkliQUFBQWdDaXhBUUFBQUlnU0d3 QUFBSUFvc1FFQUFBQ0lFaHNBQUFDQUtMRUJBQUFBaUJJYkFBQUFnQ2l4QVFBQUFJZ1NHd0FBQUlB b3NRRUFBQUNJRWhzQUFBQ0FLTEVCQUFBQWlCSWJBQUFBZ0NpeEFRQUFBSWdTR3dBQUFJQW9zUUVB QUFDSUVoc0FBQUNBS0xFQkFBQUFpQkliQUFBQWdDaXhBUUFBQUlnU0d3QUFBSUFvc1FFQUFBQ0lF aHNBQUFDQUtMRUJBQUFBaUJJYkFBQUFnQ2l4QVFBQUFJZ1NHd0FBQUlBb3NRRUFBQUNJRWhzQUFB Q0FLTEVCQUFBQWlCSWJBQUFBZ0NpeEFRQUFBSWdTR3dBQUFJQW9zUUVBQUFDSUVoc0FBQUNBS0xF QkFBQUFpQkliQUFBQWdDaXhBUUFBQUlnU0d3QUFBSUFvc1FFQUFBQ0lFaHNBQUFDQUtMRUJBQUFB aUJJYkFBQUFnQ2l4QVFBQUFJZ1NHd0FBQUlBb3NRRUFBQUNJRWhzQUFBQ0FLTEVCQUFBQWlCSWJB QUFBZ0NpeEFRQUFBSWdTR3dBQUFJQW9zUUVBQUFDSUVoc0FBQUNBS0xFQkFBQUFpQkliQUFBQWdD aXhBUUFBQUlnU0d3QUFBSUFvc1FFQUFBQ0lFaHNBQUFDQUtMRUJBQUFBN3FqM2ZtUUt2MDlzQUFB QUFLTEVCZ0FBQUxpRDNudXI3YlIydjFQL2ptTWpBQUFBZ0Q5MjY5YUprMW9qT0R5dGN4Zmp4RFJO VnliMEgySURBQUFBL0FrM1FhSDN2cS90ODFxLzFMblpaUDZYU3o0QUFBRGdEcTREdzRYUThQdkVC Z0FBQUNCS2JBQUFBSUE3OG95Ry8wOXNBQUFBQUtMRUJnQUFBQ0JLYkFBQUFBQ2l4QVlBQUFBZ1Nt d0FBQUFBb3NRR0FBQUFJRXBzQUFBQUFLTEVCZ0FBQUNCS2JBQUFBQUNpeEFZQUFBQWdTbXdBQUFB QW9zUUdBQUFBSUVwc0FBQUFBS0xFQmdBQUFDQktiQUFBQUFDaWpvMEFsbU8zMjMwNG51ZjV0TFYy OGJHUEFRQUFMSmtyRzhEZlR3QUFBTC9Nd05iTjgzeFUyNWUxdS9vSUFBQllIYkVCRm1UY09sSHJh UjMrN2NuNzI1eStydGVmai9PbUF3QUFySVhZQUFzeW50RlE2NTkxK0dPdGY5WDZSNzMrNWZhekd3 QUFBSlpPYklBRmFxM3RhL3U1OWl2VEFBQUExa1pzZ09YYUd3RUFBTEJHemR2cEFRQUFBRW11YkFB QUFBQ2l4QVlBQUFBZ1Ntd0FBQUFBb3NRR0FBQUFJRXBzQUFBQUFLTEVCZ0FBQUNCS2JBQUFBQUNp eEFZQUFBQWdTbXdBQUFBQW9zUUdBQUFBSUVwc0FBQUFBS0tPalFBQUhvZmRidmZoZUo3blo2MjFk eC83R0FEQVgrWEtCZ0R3TXdBQWdCODBBSUJQTjgvenVMTHhSZTJucGdFQTNBZXhBUUFlaVhIclJL MnpPdnkyMWdnTkwrdjFGK084NlFBQVNXSURBRHdTNHhrTnRjN3I4Rld0aTdIWDY3ZTNuOTBBQUpB Z05nREFJOU5hMjlmMnV2Wkwwd0FBN29QWUFBQ1AwNVVSQUFEM3BhM2hyYTU2N3lmVE5QbmZGd0FB QUZpQnRWelowSHlxQUFBQVlCMFdIeHQ2NytQUGVGYjdrVThYQUFBQUxOL3hVdjlnNDlhSkorK3Zh Qmh2MFRWQ3cvTTY5N2IyMlMwVkFBQUFzRnlMalEwM1FhSDNQdmF2YXIycGN4NW1CUUFBQUF1MytO c29wbW1hYXpzWEdnQUFBR0FkMXZLQXlMMVBGUUFBQUt6REttS0RaelFBQUFEQWVueG1CQUFBQUVD UzJBQUFBQUJFaVEwQUFBQkFsTmdBQUFBQVJJa05BQUFBUUpUWUFBQUFBRVNKRFFBQUFFQ1UyQUFB QUFCRWlRMEFBQUJBbE5nQUFBQUFSSWtOQUFBQVFKVFlBQUFBQUVTSkRRQUFBRUNVMkFBQUFBQkVp UTBBQUFCQWxOZ0FBQUFBUklrTkFBQUFRSlRZQUFBQUFFUWRHd0VBQUFCYnRkdnRQaHpQOC95c3Rm YnVZeDhqeTVVTkFBQUErQjBZZ3dZQUFJQzdtT2Q1WE5uL292WlQwN2gvWWdNQUFBQ2JOVzZkcUhW V2g5L1dHcUhoWmIzK1lwdzNuZnNqTmdBQUFMQlo0eGtOdGM3cjhGV3RpN0hYNjdlM245MUFudGdB QUFEQTVyWFc5clc5cnYzU05PNmYyQUFBQU1CamNXVUVENk41cXc4QUFBQWd5WlVOQUFBQVFKVFlB QUFBQUVTSkRRQUFBRUNVMkFBQUFBQkVpUTBBQUFCQWxOZ0FBQUFBUklrTkFBQUFRSlRZQUFBQUFF U0pEUUFBQUVDVTJBQUFBQUJFaVEwQUFBQkFsTmdBQUFBQVJJa05BQUFBUUpUWUFBQUFBRVNKRFFB QUFFQ1UyQUFBQUFCRWlRMEFBQUJBbE5nQUFBQUFSSWtOQUFBQVFKVFlBQUFBQUVTSkRRQUFBRUNV MkFBQUFBQkVpUTBBQUFCQWxOZ0FBQUFBUklrTkFBQUFRSlRZQUFBQUFFU0pEUUFBQUVDVTJBQUFB QUJFaVEwQUFBQkFsTmdBQUFBQVJJa053T3IwM2s5TUFRQUFsa3RzQU5hb0dRRUFBQ3lYMkFDc1N1 OTlmTjg2cS8zSU5BQUFZSm1PalFCWWcrdGJKOFlWRFdlMVJtaDRYdWZlMWo1UDAzUnBRZ0FBc0J4 aUE3QUtOMEdoOXo3MnIycTlxWE5YSmdNQUFNdmpOZ3BnVmFacG1tczdGeG9BQUdDNXhBWmdqZlpH QUFBQXkrVTJDbUIxUEtNQkFPQzkzVzczNFhpZTU2UFcydFhIUGdZUHpaVU5BQUFBUUpUWUFBQUFz SEx6UEk5MzdUcXQzZTk0TElJdlJBQUFnSlVhdDA2TVZZZFBuN3gvbS9DbnQ4N0J3WGhtQXdCczBH L3U0VDFwclYxKzdHTUFyTnZOTXhycWUvMTRnUGJudFg2cGM3UHY5eHlhS3hzQTRCSDhMR29FQUJ2 L1J2OCtNRnpjaEFZNE5MRUJBRGJzK3Q3ZE01ZlRBZ0FQcWJtMEJnQzJwL2QrOHVUOUZRMW50VVpv R0pmWHZxMDFlL3RZQU9DK3ViSUJBRFpvUEtPaDFrVWQvdlRrZldoNE0xN2ZmbllEQU1COUVSc0FZ TU91NzkwOXYzbUFHQURBUXhBYkFHRDc5a1lBQUR3a3oyd0FBQUFBb2x6WkFBQUFBRVNKRFFBQUFF Q1UyQUFBQUFCRWlRMEFBQUJBbE5nQUFBQUFSSWtOQUFBQVFKVFlBQUFBQUVTSkRRQUFBRUNVMkFB QUFBQkVpUTBBQUFCQWxOZ0FBQUFBUklrTkFBQUFRSlRZQUFBQUFFU0pEUUFBQUVDVTJBQUFBQUJF aVEwQUFBQkFsTmdBQUFBQVJJa05BQUFBUUpUWUFBQUFBRVNKRFFBQUFFQ1UyQUFBQUFCRWlRMEFB QUJBbE5nQUFBQUFSSWtOQUFBQVFKVFlBQUFBQUVTSkRRQUFBRUNVMkFBQUFBQkVpUTBBQUFCQWxO Z0FBQUFBUklrTkFBQUFRSlRZQUFBQUFFU0pEUUFBQUVDVTJBQUFBQUJFaVEwQUFBQkFsTmdBQUFB QVJJa05BQUFBUUpUWUFBQUFBRVNKRFFBQUFFQ1UyQUFBQUFCRWlRMEFBQUJBbE5nQUFBQUFSSWtO QUFBQVFKVFlBQUFBQUVTSkRRQUFBRUNVMkFBQUFBQkVpUTBBQUFCQWxOZ0FBQUFBUklrTkFBQUFR SlRZQUFBQUFFU0pEUUFBQUVDVTJBQUFBQUJFaVEwQUFBQkFsTmdBQUFBQVJJa05BQUFBUUpUWUFB QUFBRVNKRFFBQUFFQ1UyQUFBQUFCRWlRMEFBQUJBbE5nQUFBQUFSSWtOQUFBQVFKVFlBQUFBQUVT SkRRQUFBRUNVMkFBQUFBQkVpUTBBQUFCQWxOZ0FBQUFBUklrTkFBQUFRSlRZQUFBQUFFU0pEUUFB QUVDVTJBQUFBQUJFaVEwQUFBQkFsTmdBQUFBQVJJa05BQUFBUUpUWUFBQUFBRVNKRFFBQUFFQ1Uy QUFBQUFCRWlRMEFBQUJBbE5nQUFBQUFSSWtOQUFDUFhPLzltU2tBa0NRMkFBRGdaMElBL01NQ0FF Qkc3LzI0dGhlMW41b0dBQ25IUmdBQThQaGMzenJSYW4xVGE0U0dsM1h1aDlyMzB6UzlNeUVBL2dx eEFRRGdFYm9KQ3IzM1Y3VjlWK3Y3T25kcE1nQWt1STBDQU9BUm02WnBYOXRyb1FHQUpMRUJBSUFy SXdBZ1NXelltTjc3aVNrQUFIZmhHUTBBcElrTjI5T01BQUFBZ0VNU0d6YWs5ejQrbjJlMUg1a0dB QUFBaCtMZEtEYmcrdGFKY1VYRFdhMFJHcDdYdWJlMXp4NzJCQUFBd0VNVEd6YmdKaWowM3NmK1Zh MDNkYzZEbmdBQUFEZ0l0MUZzeURSTmMyM25RZ01BQUFDSEpEWnN6OTRJQUFBQU9DU3hZV004b3dF QUFJQkRFeHNBQUFDQUtMRUJBQUFBaUJJYkFBQUFnQ2l4QVFBQUFJZ1NHd0FBQUlBb3NRRUFBQUNJ RWhzQUFBQ0FLTEVCQUFBQWlCSWJBQUFBZ0NpeEFRQUFBSWdTR3dBQUFJQW9zUUVBQUFDSU9qWUNB QUNHM1c3MzRYaWU1MmV0dFhjZit4Z0EvQkZYTmdBQTRPZEVBUHdqQWdEQS9abm5lVno5K3FMMlU5 TUE0Rk9JRFFBQS9HcmNPbEhyckE2L3JUVkN3OHQ2L2NVNGJ6b0EzSVhZQUFEQXI4WXpHbXFkMStH cldoZGpyOWR2YnorN0FRRCtETEVCQUlELzBscmIxL2E2OWt2VEFPQlRpQTBBQUh6TWxSRUE4S21h dHpGaXJYN3o5bHdudC8vM3hkYzFBQURBNGJpeWdhMW9SZ0FBQUxBTVlnT3JOOC96K0RvK3EvM0lO QUFBQUE1UGJHQzF4cTBUMSsvLy9ieldDQTNQeCt0eDNuUUFBQUFPUjJ4Z3RjWXpHbXFOdCtYNnFk WjRhdmFiOGRxVHN3RUFBQTVMYkdEMVdtdHpiZWUxZTJvMkFBREFBb2dOYk1YZUNBQUFBSmJCVzE4 Q0FBQUFVYTVzQUFBQUFLTEVCZ0FBQUNCS2JBQUFBQUNpeEFZQUFBQWdTbXdBQUFBQW9zUUdBQUFB SUVwc0FBQUFBS0xFQmdBQUFDQktiQUFBQUFDaXhBWUFBQUFnU213QUFBQUFvdjR0d0FEVXR2K3J6 Nm5vWmdBQUFBQkpSVTVFcmtKZ2dnPT0iKQogIDsKfQo= CHANNEL_CSS_EOM set -e TERMS= ####################################### # # common.sh # ####################################### GREEN='\033[0;32m' BLUE='\033[0;94m' LIGHT_BLUE='\033[0;34m' YELLOW='\033[0;33m' RED='\033[0;31m' NC='\033[0m' # No Color ####################################### # Check if command exists. # Globals: # None # Arguments: # None # Returns: # 0 if command exists ####################################### commandExists() { command -v "$@" > /dev/null 2>&1 } ####################################### # Check if replicated 1.2 is installed # Globals: # None # Arguments: # None # Returns: # 0 if replicated 1.2 is installed ####################################### replicated12Installed() { commandExists replicated && replicated --version | grep -q "Replicated version 1\.2" } ####################################### # Check if replicated 2.0 is installed # Globals: # None # Arguments: # None # Returns: # 0 if replicated 2.0 is installed ####################################### replicated2Installed() { commandExists /usr/local/bin/replicatedctl && /usr/local/bin/replicatedctl version >/dev/null 2>&1 } ####################################### # Returns replicated 2.0 version # Globals: # None # Arguments: # None # Returns: # INSTALLED_REPLICATED_VERSION ####################################### replicated2Version() { if replicated2Installed; then INSTALLED_REPLICATED_VERSION="$(/usr/local/bin/replicatedctl version --quiet)" else INSTALLED_REPLICATED_VERSION="" fi } ####################################### # Returns 0 if replicated will downgrade # Globals: # None # Arguments: # Next replicated version # Returns: # 0 if replicated version is less than current # 1 if replicated version is greater than or equal to current ####################################### isReplicatedDowngrade() { if ! replicated2Installed; then return 1 fi replicated2Version semverCompare "$1" "$INSTALLED_REPLICATED_VERSION" if [ "$SEMVER_COMPARE_RESULT" -lt "0" ]; then return 0 fi return 1 } ####################################### # Gets curl or wget depending if cmd exits. # Globals: # PROXY_ADDRESS # Arguments: # None # Returns: # URLGET_CMD ####################################### URLGET_CMD= getUrlCmd() { if commandExists "curl"; then URLGET_CMD="curl -sSL" if [ -n "$PROXY_ADDRESS" ]; then URLGET_CMD=$URLGET_CMD" -x $PROXY_ADDRESS" fi else URLGET_CMD="wget -qO-" fi } ####################################### # Generates a 32 char unique id. # Globals: # None # Arguments: # None # Returns: # GUID_RESULT ####################################### getGuid() { GUID_RESULT="$(head -c 128 /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)" } ####################################### # performs in-place sed substitution with escapting of inputs (http://stackoverflow.com/a/10467453/5344799) # Globals: # None # Arguments: # None # Returns: # None ####################################### safesed() { sed -i "s/$(echo $1 | sed -e 's/\([[\/.*]\|\]\)/\\&/g')/$(echo $2 | sed -e 's/[\/&]/\\&/g')/g" $3 } ####################################### # Parses a semantic version string # Globals: # None # Arguments: # Version # Returns: # major, minor, patch ####################################### semverParse() { major="${1%%.*}" minor="${1#$major.}" minor="${minor%%.*}" patch="${1#$major.$minor.}" patch="${patch%%[-.]*}" } ####################################### # Compare two semvers. # Returns -1 if A lt B, 0 if eq, 1 A gt B. # Globals: # None # Arguments: # Sem Version A # Sem Version B # Returns: # SEMVER_COMPARE_RESULT ####################################### SEMVER_COMPARE_RESULT= semverCompare() { semverParse "$1" _a_major="${major:-0}" _a_minor="${minor:-0}" _a_patch="${patch:-0}" semverParse "$2" _b_major="${major:-0}" _b_minor="${minor:-0}" _b_patch="${patch:-0}" if [ "$_a_major" -lt "$_b_major" ]; then SEMVER_COMPARE_RESULT=-1 return fi if [ "$_a_major" -gt "$_b_major" ]; then SEMVER_COMPARE_RESULT=1 return fi if [ "$_a_minor" -lt "$_b_minor" ]; then SEMVER_COMPARE_RESULT=-1 return fi if [ "$_a_minor" -gt "$_b_minor" ]; then SEMVER_COMPARE_RESULT=1 return fi if [ "$_a_patch" -lt "$_b_patch" ]; then SEMVER_COMPARE_RESULT=-1 return fi if [ "$_a_patch" -gt "$_b_patch" ]; then SEMVER_COMPARE_RESULT=1 return fi SEMVER_COMPARE_RESULT=0 } ####################################### # Inserts a parameter into a json file. If the file does not exist, creates it. If the parameter is already set, replaces it. # Globals: # None # Arguments: # path, parameter name, value # Returns: # None ####################################### insertOrReplaceJsonParam() { if ! [ -f "$1" ]; then # If settings file does not exist mkdir -p "$(dirname "$1")" echo "{\"$2\": \"$3\"}" > "$1" else # Settings file exists if grep -q -E "\"$2\" *: *\"[^\"]*\"" "$1"; then # If settings file contains named setting, replace it sed -i -e "s/\"$2\" *: *\"[^\"]*\"/\"$2\": \"$3\"/g" "$1" else # Insert into settings file (with proper commas) if [ $(wc -c <"$1") -ge 5 ]; then # File long enough to actually have an entry, insert "name": "value",\n after first { _commonJsonReplaceTmp="$(awk "NR==1,/^{/{sub(/^{/, \"{\\\"$2\\\": \\\"$3\\\", \")} 1" "$1")" echo "$_commonJsonReplaceTmp" > "$1" else # file not long enough to actually have contents, replace wholesale echo "{\"$2\": \"$3\"}" > "$1" fi fi fi } ###################################### # Inserts a string array of length 1 into a json file. Fails if key is found in file. # Globals: # None # Arguments: # path, key, value[0] # Returns: # 1 if there are errors ###################################### insertJSONArray() { if ! [ -f "$1" ] || [ $(wc -c <"$1") -lt 5 ]; then mkdir -p "$(dirname "$1")" cat > $1 < "$1" return 0 } ####################################### # Splits an address in the format "host:port". # Globals: # None # Arguments: # address # Returns: # HOST # PORT ####################################### splitHostPort() { oIFS="$IFS"; IFS=":" read -r HOST PORT <<< "$1"; IFS="$oIFS" } ####################################### # Checks if Docker is installed # Globals: # None # Arguments: # None # Returns: # 0 if Docker is installed ####################################### isDockerInstalled() { commandExists "docker" && ps aux | grep -q '[d]ockerd' } ####################################### # Creates and sets REPLICATED_TEMP_DIR variable if not set. # Globals: # None # Arguments: # adNonedress # Returns: # REPLICATED_TEMP_DIR ####################################### maybeCreateTempDir() { if [ -z "$REPLICATED_TEMP_DIR" ]; then REPLICATED_TEMP_DIR="$(mktemp -d --suffix=replicated)" fi } ####################################### # Prints the first arg in green with a checkmark # Globals: # None # Arguments: # Message # Returns: # None ####################################### logSuccess() { printf "${GREEN}✔ $1${NC}\n" 1>&2 } ####################################### # Prints the first arg in blue # Globals: # None # Arguments: # Message # Returns: # None ####################################### logStep() { printf "${BLUE}⚙ $1${NC}\n" 1>&2 } ####################################### # Prints the first arg indented in light blue # Globals: # None # Arguments: # Message # Returns: # None ####################################### logSubstep() { printf "\t${LIGHT_BLUE}- $1${NC}\n" 1>&2 } ####################################### # Prints the first arg in Yellow # Globals: # None # Arguments: # Message # Returns: # None ####################################### logWarn() { printf "${YELLOW}$1${NC}\n" 1>&2 } ####################################### # Prints the first arg in Red # Globals: # None # Arguments: # Message # Returns: # None ####################################### logFail() { printf "${RED}$1${NC}\n" 1>&2 } ####################################### # Prints the args in Red and exits 1 # Globals: # None # Arguments: # Message # Returns: # None ####################################### bail() { logFail "$@" exit 1 } ####################################### # # prompt.sh # ####################################### PROMPT_RESULT= if [ -z "$READ_TIMEOUT" ]; then READ_TIMEOUT="-t 20" fi ####################################### # Prompts the user for input. # Globals: # READ_TIMEOUT, FAST_TIMEOUTS # Arguments: # Read timeout, formatted "-t int" # Returns: # PROMPT_RESULT ####################################### promptTimeout() { set +e if [ -z "$FAST_TIMEOUTS" ]; then read ${1:-$READ_TIMEOUT} PROMPT_RESULT < /dev/tty else read ${READ_TIMEOUT} PROMPT_RESULT < /dev/tty fi set -e } ####################################### # Confirmation prompt default yes. # Globals: # READ_TIMEOUT, FAST_TIMEOUTS # Arguments: # Read timeout, formatted "-t int" # Returns: # None ####################################### confirmY() { printf "(Y/n) " promptTimeout "$@" if [ "$PROMPT_RESULT" = "n" ] || [ "$PROMPT_RESULT" = "N" ]; then return 1 fi return 0 } ####################################### # Confirmation prompt default no. # Globals: # READ_TIMEOUT, FAST_TIMEOUTS # Arguments: # Read timeout, formatted "-t int" # Returns: # None ####################################### confirmN() { printf "(y/N) " promptTimeout "$@" if [ "$PROMPT_RESULT" = "y" ] || [ "$PROMPT_RESULT" = "Y" ]; then return 0 fi return 1 } ####################################### # Prompts the user for input. # Globals: # READ_TIMEOUT # Arguments: # None # Returns: # PROMPT_RESULT ####################################### prompt() { set +e read PROMPT_RESULT < /dev/tty set -e } ####################################### # # system.sh # ####################################### ####################################### # Requires a 64 bit platform or exits with an error. # Globals: # None # Arguments: # None # Returns: # None ####################################### require64Bit() { case "$(uname -m)" in *64) ;; *) echo >&2 'Error: you are not using a 64bit platform.' echo >&2 'This installer currently only supports 64bit platforms.' exit 1 ;; esac } ####################################### # Detects the Linux kernel version. # Globals: # None # Arguments: # None # Returns: # KERNEL_MAJOR # KERNEL_MINOR # KERNEL_PATCH ####################################### KERNEL_MAJOR= KERNEL_MINOR= KERNEL_PATCH= getKernelVersion() { semverParse "$(uname -r)" KERNEL_MAJOR=$major KERNEL_MINOR=$minor KERNEL_PATCH=$patch } ####################################### # Requires that the script be run with the root user. # Globals: # None # Arguments: # None # Returns: # USER ####################################### USER= requireRootUser() { USER="$(id -un 2>/dev/null || true)" if [ "$USER" != "root" ]; then echo >&2 "Error: This script requires admin privileges. Please re-run it as root." exit 1 fi } ####################################### # Detects the linux distribution. # Upon failure exits with an error. # Globals: # None # Arguments: # None # Returns: # LSB_DIST # DIST_VERSION - should be MAJOR.MINOR e.g. 16.04 or 7.4 # DIST_VERSION_MAJOR ####################################### LSB_DIST= DIST_VERSION= DIST_VERSION_MAJOR= detectLsbDist() { _dist= _error_msg="We have checked /etc/os-release and /etc/centos-release files." if [ -f /etc/centos-release ] && [ -r /etc/centos-release ]; then # CentOS 6 example: CentOS release 6.9 (Final) # CentOS 7 example: CentOS Linux release 7.5.1804 (Core) # CentOS 9 example: CentOS Stream release 9 _dist="$(cat /etc/centos-release | cut -d" " -f1)" _version="$(cat /etc/centos-release | sed 's/Linux //' | sed 's/Stream //' | cut -d" " -f3 | cut -d "." -f1-2)" elif [ -f /etc/os-release ] && [ -r /etc/os-release ]; then _dist="$(. /etc/os-release && echo "$ID")" _version="$(. /etc/os-release && echo "$VERSION_ID")" elif [ -f /etc/redhat-release ] && [ -r /etc/redhat-release ]; then # this is for RHEL6 _dist="rhel" _major_version=$(cat /etc/redhat-release | cut -d" " -f7 | cut -d "." -f1) _minor_version=$(cat /etc/redhat-release | cut -d" " -f7 | cut -d "." -f2) _version=$_major_version elif [ -f /etc/system-release ] && [ -r /etc/system-release ]; then if grep --quiet "Amazon Linux" /etc/system-release; then # Special case for Amazon 2014.03 _dist="amzn" _version=`awk '/Amazon Linux/{print $NF}' /etc/system-release` fi else _error_msg="$_error_msg\nDistribution cannot be determined because neither of these files exist." fi if [ -n "$_dist" ]; then _error_msg="$_error_msg\nDetected distribution is ${_dist}." _dist="$(echo "$_dist" | tr '[:upper:]' '[:lower:]')" case "$_dist" in ubuntu) _error_msg="$_error_msg\nHowever detected version $_version is less than 12." oIFS="$IFS"; IFS=.; set -- $_version; IFS="$oIFS"; [ $1 -ge 12 ] && LSB_DIST=$_dist && DIST_VERSION=$_version && DIST_VERSION_MAJOR=$1 ;; debian) _error_msg="$_error_msg\nHowever detected version $_version is less than 7." oIFS="$IFS"; IFS=.; set -- $_version; IFS="$oIFS"; [ $1 -ge 7 ] && LSB_DIST=$_dist && DIST_VERSION=$_version && DIST_VERSION_MAJOR=$1 ;; fedora) _error_msg="$_error_msg\nHowever detected version $_version is less than 21." oIFS="$IFS"; IFS=.; set -- $_version; IFS="$oIFS"; [ $1 -ge 21 ] && LSB_DIST=$_dist && DIST_VERSION=$_version && DIST_VERSION_MAJOR=$1 ;; rhel) _error_msg="$_error_msg\nHowever detected version $_version is less than 6." oIFS="$IFS"; IFS=.; set -- $_version; IFS="$oIFS"; [ $1 -ge 6 ] && LSB_DIST=$_dist && DIST_VERSION=$_version && DIST_VERSION_MAJOR=$1 ;; centos) _error_msg="$_error_msg\nHowever detected version $_version is less than 6." oIFS="$IFS"; IFS=.; set -- $_version; IFS="$oIFS"; [ $1 -ge 6 ] && LSB_DIST=$_dist && DIST_VERSION=$_version && DIST_VERSION_MAJOR=$1 ;; amzn) _error_msg="$_error_msg\nHowever detected version $_version is not one of\n 2, 2.0, 2018.03, 2017.09, 2017.03, 2016.09, 2016.03, 2015.09, 2015.03, 2014.09, 2014.03." [ "$_version" = "2" ] || [ "$_version" = "2.0" ] || \ [ "$_version" = "2018.03" ] || \ [ "$_version" = "2017.03" ] || [ "$_version" = "2017.09" ] || \ [ "$_version" = "2016.03" ] || [ "$_version" = "2016.09" ] || \ [ "$_version" = "2015.03" ] || [ "$_version" = "2015.09" ] || \ [ "$_version" = "2014.03" ] || [ "$_version" = "2014.09" ] && \ LSB_DIST=$_dist && DIST_VERSION=$_version && DIST_VERSION_MAJOR=$_version ;; sles) _error_msg="$_error_msg\nHowever detected version $_version is less than 12." oIFS="$IFS"; IFS=.; set -- $_version; IFS="$oIFS"; [ $1 -ge 12 ] && LSB_DIST=$_dist && DIST_VERSION=$_version && DIST_VERSION_MAJOR=$1 ;; ol) _error_msg="$_error_msg\nHowever detected version $_version is less than 6." oIFS="$IFS"; IFS=.; set -- $_version; IFS="$oIFS"; [ $1 -ge 6 ] && LSB_DIST=$_dist && DIST_VERSION=$_version && DIST_VERSION_MAJOR=$1 ;; *) _error_msg="$_error_msg\nThat is an unsupported distribution." ;; esac fi if [ -z "$LSB_DIST" ]; then echo >&2 "$(echo | sed "i$_error_msg")" echo >&2 "" echo >&2 "Please visit the following URL for more detailed installation instructions:" echo >&2 "" echo >&2 " https://help.replicated.com/docs/distributing-an-application/installing/" exit 1 fi } ####################################### # Detects the init system. # Upon failure exits with an error. # Globals: # None # Arguments: # None # Returns: # INIT_SYSTEM ####################################### INIT_SYSTEM= detectInitSystem() { if [[ "$(/sbin/init --version 2>/dev/null)" =~ upstart ]]; then INIT_SYSTEM=upstart elif [[ "$(systemctl 2>/dev/null)" =~ -\.mount ]]; then INIT_SYSTEM=systemd elif [ -f /etc/init.d/cron ] && [ ! -h /etc/init.d/cron ]; then INIT_SYSTEM=sysvinit else echo >&2 "Error: failed to detect init system or unsupported." exit 1 fi } ####################################### # Finds the init system conf dir. One of /etc/default, /etc/sysconfig # Globals: # None # Arguments: # None # Returns: # CONFDIR ####################################### CONFDIR= detectInitSystemConfDir() { # NOTE: there was a bug in support bundle that creates a dir in place of non-existant conf files if [ -d /etc/default/replicated ] || [ -d /etc/default/replicated-operator ]; then if [ -d /etc/default/replicated ]; then rm -rf /etc/default/replicated fi if [ -d /etc/default/replicated-operator ]; then rm -rf /etc/default/replicated-operator fi if [ ! "$(ls -A /etc/default 2>/dev/null)" ]; then # directory is empty, probably exists because of support bundle rm -rf /etc/default fi fi if [ -d /etc/sysconfig/replicated ] || [ -d /etc/sysconfig/replicated-operator ]; then if [ -d /etc/sysconfig/replicated ]; then rm -rf /etc/sysconfig/replicated fi if [ -d /etc/sysconfig/replicated-operator ]; then rm -rf /etc/sysconfig/replicated-operator fi if [ ! "$(ls -A /etc/sysconfig 2>/dev/null)" ]; then # directory is empty, probably exists because of support bundle rm -rf /etc/sysconfig fi fi # prefer dir if config is already found if [ -f /etc/default/replicated ] || [ -f /etc/default/replicated-operator ]; then CONFDIR="/etc/default" elif [ -f /etc/sysconfig/replicated ] || [ -f /etc/sysconfig/replicated-operator ]; then CONFDIR="/etc/sysconfig" elif [ "$INIT_SYSTEM" = "systemd" ] && [ -d /etc/sysconfig ]; then CONFDIR="/etc/sysconfig" else CONFDIR="/etc/default" fi mkdir -p "$CONFDIR" } ####################################### # prevent a package from being automatically updated # Globals: # LSB_DIST # Arguments: # None # Returns: # None ####################################### lockPackageVersion() { case $LSB_DIST in rhel|centos) yum install -y yum-plugin-versionlock yum versionlock ${1}-* ;; ubuntu) apt-mark hold $1 ;; esac } ####################################### # # docker.sh # # require common.sh, system.sh # ####################################### RESTART_DOCKER=0 ####################################### # Prints a message and exits if docker is not installed. # Globals: # None # Arguments: # None # Returns: # None ####################################### requireDocker() { if isDockerInstalled ; then return fi printf "${RED}Docker is not installed. Please install Docker before proceeding.\n" 1>&2 printf "Instructions for installing Docker can be found at the link below:\n" 1>&2 printf "\n" 1>&2 printf " https://help.replicated.com/community/t/installing-docker-in-airgapped-environments/81${NC}\n" 1>&2 exit 127 } ####################################### # Starts docker. # Globals: # LSB_DIST # INIT_SYSTEM # Arguments: # None # Returns: # None ####################################### startDocker() { if [ "$LSB_DIST" = "amzn" ]; then service docker start return fi case "$INIT_SYSTEM" in systemd) systemctl enable docker systemctl start docker ;; upstart|sysvinit) service docker start ;; esac } ####################################### # Restarts docker. # Globals: # LSB_DIST # INIT_SYSTEM # Arguments: # None # Returns: # None ####################################### restartDocker() { case "$INIT_SYSTEM" in systemd) systemctl daemon-reload systemctl restart docker ;; upstart|sysvinit) service docker restart ;; esac } ####################################### # Checks support for docker driver. # Globals: # None # Arguments: # None # Returns: # None ####################################### checkDockerDriver() { if ! isDockerInstalled ; then echo >&2 "Error: docker is not installed." exit 1 fi if [ "$(ps -ef | grep "docker" | grep -v "grep" | wc -l)" = "0" ]; then startDocker fi _driver=$(docker info 2>/dev/null | grep 'Execution Driver' | awk '{print $3}' | awk -F- '{print $1}') if [ "$_driver" = "lxc" ]; then echo >&2 "Error: the running Docker daemon is configured to use the '${_driver}' execution driver." echo >&2 "This installer only supports the 'native' driver (AKA 'libcontainer')." echo >&2 "Check your Docker daemon options." exit 1 fi } ####################################### # Checks support for docker storage driver. # Globals: # BYPASS_STORAGEDRIVER_WARNINGS # Arguments: # HARD_FAIL_ON_LOOPBACK # Returns: # None ####################################### BYPASS_STORAGEDRIVER_WARNINGS= checkDockerStorageDriver() { if [ "$BYPASS_STORAGEDRIVER_WARNINGS" = "1" ]; then return fi if ! isDockerInstalled ; then echo >&2 "Error: docker is not installed." exit 1 fi if [ "$(ps -ef | grep "docker" | grep -v "grep" | wc -l)" = "0" ]; then startDocker fi _driver=$(docker info 2>/dev/null | grep 'Storage Driver' | awk '{print $3}' | awk -F- '{print $1}') if [ "$_driver" = "devicemapper" ] && docker info 2>/dev/null | grep -Fqs 'Data loop file:' ; then printf "${RED}The running Docker daemon is configured to use the 'devicemapper' storage driver \ in loopback mode.\nThis is not recommended for production use. Please see to the following URL for more \ information.\n\nhttps://help.replicated.com/docs/kb/developer-resources/devicemapper-warning/.${NC}\n\n\ " # HARD_FAIL_ON_LOOPBACK if [ -n "$1" ]; then printf "${RED}Please configure a recommended storage driver and try again.${NC}\n\n" exit 1 fi printf "Do you want to proceed anyway? " if ! confirmN; then exit 0 fi fi } ####################################### # Get the docker group ID. # Default to 0 for root group. # Globals: # None # Arguments: # None # Returns: # DOCKER_GROUP_ID # None ####################################### DOCKER_GROUP_ID=0 detectDockerGroupId() { # Parse the docker group from the docker.sock file # On most systems this will be a group called `docker` if [ -e /var/run/docker.sock ]; then DOCKER_GROUP_ID="$(stat -c '%g' /var/run/docker.sock)" # If the docker.sock file doesn't fall back to the docker group. elif [ "$(getent group docker)" ]; then DOCKER_GROUP_ID="$(getent group docker | cut -d: -f3)" fi } ####################################### # Check if docker image exists. # Globals: # None # Arguments: # None # Returns: # 0 if image exists ####################################### dockerImageExists() { [[ "$(docker images -q "$@" 2> /dev/null)" != "" ]]; } ####################################### # Gets the image repo tag from the tar file. # Globals: # None # Arguments: # - Path to the tar file # Returns: # REPO_TAG ####################################### REPO_TAG= dockerGetRepoTagFromTar() { REPO_TAG="$(tar -xOf "$1" manifest.json | sed 's/.*RepoTags":\["\([^"]*\).*/\1/')" } ####################################### # Replaces the registry address from a docker repo tag. # Globals: # None # Arguments: # - Repo tag # - New registry address # Returns: # REPO_TAG ####################################### REPO_TAG= dockerReplaceRegistryAddress() { local first local rest oIFS="$IFS"; IFS="/" read -r first rest <<< "$1"; IFS="$oIFS" if [ -z "$rest" ]; then # There are no slashes so this is an official image in the official registry. REPO_TAG="$2/library/$1" elif echo "$rest" | grep -q '/'; then REPO_TAG="$2/$rest" else # NOTE: This makes some assumptions about the domain component vs the org component that # are probably not true but it seems good enough for our use case. if echo "$first" | grep -q '\.' || echo "$first" | grep -q ':'; then # There is probably just no org component here. REPO_TAG="$2/$rest" else # This is the official registry since there is no domain component. REPO_TAG="$2/$1" fi fi } ####################################### # Re-tags and pushes image to specified registry. # Globals: # None # Arguments: # - Repo tag # - New registry address # Returns: # None ####################################### REPO_TAG= dockerRetagAndPushImageToRegistry() { dockerReplaceRegistryAddress "$1" "$2" local _localTag="$REPO_TAG" (set -x; docker tag "$1" "$_localTag") (set -x; docker push "$_localTag") } ####################################### # Gets the Docker logging driver. # Globals: # None # Arguments: # None # Returns: # DOCKER_LOGGING_DRIVER ####################################### DOCKER_LOGGING_DRIVER= dockerGetLoggingDriver() { DOCKER_LOGGING_DRIVER="$(docker info 2>/dev/null | grep -i "Logging Driver:" | sed 's/[Ll]ogging [Dd]river: *//')" } ####################################### # Gets the docker0 bridge network gateway ip. # Globals: # None # Arguments: # None # Returns: # DOCKER0_GATEWAY_IP ####################################### get_docker0_gateway_ip() { DOCKER0_GATEWAY_IP=$(ip -o -4 address | grep docker0 | awk '{ print $4 }' | cut -d'/' -f1) if [ -z "$DOCKER0_GATEWAY_IP" ]; then DOCKER0_GATEWAY_IP=172.17.0.1 fi } ####################################### # # docker-version.sh # # require common.sh, system.sh # ####################################### ####################################### # Gets docker server version. # Globals: # None # Arguments: # None # Returns: # DOCKER_VERSION ####################################### DOCKER_VERSION= getDockerVersion() { if ! isDockerInstalled ; then return fi DOCKER_VERSION=$(docker version --format '{{.Server.Version}}' 2>/dev/null || docker -v | awk '{gsub(/,/, "", $3); print $3}') } ####################################### # Parses docker version. # Globals: # None # Arguments: # Docker Version # Returns: # DOCKER_VERSION_MAJOR # DOCKER_VERSION_MINOR # DOCKER_VERSION_PATCH # DOCKER_VERSION_RELEASE ####################################### DOCKER_VERSION_MAJOR= DOCKER_VERSION_MINOR= DOCKER_VERSION_PATCH= DOCKER_VERSION_RELEASE= parseDockerVersion() { # reset DOCKER_VERSION_MAJOR= DOCKER_VERSION_MINOR= DOCKER_VERSION_PATCH= DOCKER_VERSION_RELEASE= if [ -z "$1" ]; then return fi OLD_IFS="$IFS" && IFS=. && set -- $1 && IFS="$OLD_IFS" DOCKER_VERSION_MAJOR=$1 DOCKER_VERSION_MINOR=$2 OLD_IFS="$IFS" && IFS=- && set -- $3 && IFS="$OLD_IFS" DOCKER_VERSION_PATCH=$1 DOCKER_VERSION_RELEASE=$2 } ####################################### # Compare two docker versions ignoring the patch version. # Returns -1 if A lt B, 0 if eq, 1 A gt B. # Globals: # None # Arguments: # Docker Version A # Docker Version B # Returns: # COMPARE_DOCKER_VERSIONS_RESULT ####################################### COMPARE_DOCKER_VERSIONS_RESULT= compareDockerVersionsIgnorePatch() { # reset COMPARE_DOCKER_VERSIONS_RESULT= parseDockerVersion "$1" _a_major="$DOCKER_VERSION_MAJOR" _a_minor="$DOCKER_VERSION_MINOR" parseDockerVersion "$2" _b_major="$DOCKER_VERSION_MAJOR" _b_minor="$DOCKER_VERSION_MINOR" if [ "$_a_major" -lt "$_b_major" ]; then COMPARE_DOCKER_VERSIONS_RESULT=-1 return fi if [ "$_a_major" -gt "$_b_major" ]; then COMPARE_DOCKER_VERSIONS_RESULT=1 return fi if [ "$_a_minor" -lt "$_b_minor" ]; then COMPARE_DOCKER_VERSIONS_RESULT=-1 return fi if [ "$_a_minor" -gt "$_b_minor" ]; then COMPARE_DOCKER_VERSIONS_RESULT=1 return fi COMPARE_DOCKER_VERSIONS_RESULT=0 } ####################################### # Compare two docker versions. # Returns -1 if A lt B, 0 if eq, 1 A gt B. # Globals: # None # Arguments: # Docker Version A # Docker Version B # Returns: # COMPARE_DOCKER_VERSIONS_RESULT ####################################### COMPARE_DOCKER_VERSIONS_RESULT= compareDockerVersions() { # reset COMPARE_DOCKER_VERSIONS_RESULT= compareDockerVersionsIgnorePatch "$1" "$2" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -ne "0" ]; then return fi parseDockerVersion "$1" _a_patch="$DOCKER_VERSION_PATCH" parseDockerVersion "$2" _b_patch="$DOCKER_VERSION_PATCH" if [ "$_a_patch" -lt "$_b_patch" ]; then COMPARE_DOCKER_VERSIONS_RESULT=-1 return fi if [ "$_a_patch" -gt "$_b_patch" ]; then COMPARE_DOCKER_VERSIONS_RESULT=1 return fi COMPARE_DOCKER_VERSIONS_RESULT=0 } ####################################### # Get max docker version for lsb dist/version. # Globals: # LSB_DIST # DIST_VERSION_MAJOR # DIST_VERSION # Arguments: # None # Returns: # MAX_DOCKER_VERSION_RESULT ####################################### MAX_DOCKER_VERSION_RESULT= getMaxDockerVersion() { MAX_DOCKER_VERSION_RESULT= # Max Docker version on CentOS 6 is 1.7.1. if [ "$LSB_DIST" = "centos" ]; then if [ "$DIST_VERSION_MAJOR" = "6" ]; then MAX_DOCKER_VERSION_RESULT="1.7.1" fi fi # Max Docker version on RHEL 6 is 1.7.1. if [ "$LSB_DIST" = "rhel" ]; then if [ "$DIST_VERSION_MAJOR" = "6" ]; then MAX_DOCKER_VERSION_RESULT="1.7.1" fi fi if [ "$LSB_DIST" = "ubuntu" ]; then # Max Docker version on Ubuntu 14.04 is 18.06.1. # see https://github.com/docker/for-linux/issues/591 if [ "$DIST_VERSION" = "14.04" ]; then MAX_DOCKER_VERSION_RESULT="18.06.1" # Max Docker version on Ubuntu 16.04 is 19.03.8. elif [ "$DIST_VERSION" = "16.04" ]; then MAX_DOCKER_VERSION_RESULT="19.03.8" fi fi if [ "$LSB_DIST" = "debian" ]; then # Max Docker version on Debian 7 is 18.03.1 if [ "$DIST_VERSION" = "7" ]; then MAX_DOCKER_VERSION_RESULT="18.03.1" # Max Docker version on Debian 8 is 18.06.2. elif [ "$DIST_VERSION" = "8" ]; then MAX_DOCKER_VERSION_RESULT="18.06.2" # Max Docker version on Debian 9 is 19.03.8. elif [ "$DIST_VERSION" = "9" ]; then MAX_DOCKER_VERSION_RESULT="19.03.8" fi fi # 2020-05-11 # Max Docker version on SUSE Linux Enterprise Server 12 and 15 is 19.03.5. if [ "$LSB_DIST" = "sles" ]; then MAX_DOCKER_VERSION_RESULT="19.03.5" fi # Max Docker version on Oracle Linux 6.x seems to be 17.05.0. if [ "$LSB_DIST" = "ol" ]; then if [ "$DIST_VERSION_MAJOR" = "6" ]; then MAX_DOCKER_VERSION_RESULT="17.05.0" fi fi } ####################################### # Get min docker version for lsb dist/version. # Globals: # LSB_DIST # DIST_VERSION_MAJOR # DIST_VERSION # Arguments: # None # Returns: # MIN_DOCKER_VERSION_RESULT ####################################### MIN_DOCKER_VERSION_RESULT= getMinDockerVersion() { MIN_DOCKER_VERSION_RESULT= if [ "$LSB_DIST" = "ubuntu" ]; then # Min Docker version on Ubuntu 20.04 is 19.03.9. if [ "$DIST_VERSION" = "20.04" ]; then MIN_DOCKER_VERSION_RESULT="19.03.11" fi fi if [ "$LSB_DIST" = "centos" ] || [ "$LSB_DIST" = "rhel" ] || [ "$LSB_DIST" = "ol" ]; then # Min Docker version on RHEL/CentOS/OL 8.x is 20.10.7 if [ "$DIST_VERSION_MAJOR" = "8" ]; then MIN_DOCKER_VERSION_RESULT="20.10.7" fi fi } ####################################### # # docker-install.sh # # require common.sh, prompt.sh, system.sh, docker-version.sh # ####################################### ####################################### # Installs requested docker version. # Requires at least min docker version to proceed. # Globals: # LSB_DIST # INIT_SYSTEM # AIRGAP # Arguments: # Requested Docker Version # Minimum Docker Version # Returns: # DID_INSTALL_DOCKER ####################################### DID_INSTALL_DOCKER=0 installDocker() { _dockerGetBestVersion "$1" if ! isDockerInstalled ; then _dockerRequireMinInstallableVersion "$2" _installDocker "$BEST_DOCKER_VERSION_RESULT" 1 return fi getDockerVersion compareDockerVersions "$DOCKER_VERSION" "$2" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -eq "-1" ]; then _dockerRequireMinInstallableVersion "$2" _dockerForceUpgrade "$BEST_DOCKER_VERSION_RESULT" else compareDockerVersions "$DOCKER_VERSION" "$BEST_DOCKER_VERSION_RESULT" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -eq "-1" ]; then _dockerUpgrade "$BEST_DOCKER_VERSION_RESULT" if [ "$DID_INSTALL_DOCKER" -ne "1" ]; then _dockerProceedAnyway "$BEST_DOCKER_VERSION_RESULT" fi elif [ "$COMPARE_DOCKER_VERSIONS_RESULT" -eq "1" ]; then # allow patch versions greater than the current version compareDockerVersionsIgnorePatch "$DOCKER_VERSION" "$BEST_DOCKER_VERSION_RESULT" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -eq "1" ]; then _dockerProceedAnyway "$BEST_DOCKER_VERSION_RESULT" fi fi # The system has the exact pinned version installed. # No need to run the Docker install script. fi } ####################################### # Install docker from a prepared image # Globals: # LSB_DIST # INIT_SYSTEM # Returns: # DID_INSTALL_DOCKER ####################################### DID_INSTALL_DOCKER=0 installDockerOffline() { if isDockerInstalled ; then return fi case "$LSB_DIST$DIST_VERSION" in ubuntu16.04) mkdir -p image/ layer_id=$(tar xvf packages-docker-ubuntu1604.tar -C image/ | grep layer.tar | cut -d'/' -f1) tar xvf image/${layer_id}/layer.tar pushd archives/ dpkg -i --force-depends-version *.deb popd DID_INSTALL_DOCKER=1 return ;; ubuntu18.04) mkdir -p image/ layer_id=$(tar xvf packages-docker-ubuntu1804.tar -C image/ | grep layer.tar | cut -d'/' -f1) tar xvf image/${layer_id}/layer.tar pushd archives/ dpkg -i --force-depends-version *.deb popd DID_INSTALL_DOCKER=1 return ;; centos7.4|centos7.5|centos7.6|centos7.7|centos7.8|centos7.9|rhel7.4|rhel7.5|rhel7.6|rhel7.7|rhel7.8|rhel7.9) mkdir -p image/ layer_id=$(tar xvf packages-docker-rhel7.tar -C image/ | grep layer.tar | cut -d'/' -f1) tar xvf image/${layer_id}/layer.tar pushd archives/ rpm --upgrade --force --nodeps *.rpm popd systemctl enable docker systemctl start docker DID_INSTALL_DOCKER=1 return ;; *) esac printf "Offline Docker install is not supported on ${LSB_DIST} ${DIST_MAJOR}" exit 1 } _installDocker() { _should_skip_docker_ee_install if [ "$SHOULD_SKIP_DOCKER_EE_INSTALL" -eq "1" ]; then printf "${RED}Enterprise Linux distributions require Docker Enterprise Edition. Please install Docker before running this installation script.${NC}\n" 1>&2 exit 1 fi if [ "$LSB_DIST" = "amzn" ]; then # Docker install script no longer supports Amazon Linux printf "${YELLOW}Pinning Docker version not supported on Amazon Linux${NC}\n" printf "${GREEN}Installing Docker from Yum repository${NC}\n" # 2021-11-16 # Amazon Linux has very specific Docker versions available. # We support 17.12.1, 18.06.1, 18.09.9 and 20.10.7-3. compareDockerVersions "18.0.0" "${1}" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -eq "-1" ]; then compareDockerVersions "19.0.0" "${1}" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -le "0" ]; then ( set -x; yum install -y -q docker-20.10.7-3.amzn2 || yum install -y docker-20.10.7-3.amzn2 || \ yum install -y -q docker || yum install -y -q docker ) else compareDockerVersions "18.09.0" "${1}" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -le "0" ]; then if commandExists "amazon-linux-extras"; then ( set -x; amazon-linux-extras install -y -q docker=18.09.9 || amazon-linux-extras install -y docker=18.09.9 || \ amazon-linux-extras install -y -q docker || amazon-linux-extras install -y docker ) else ( set -x; yum install -y -q docker-18.09.9ce || yum install -y -q docker ) fi else if commandExists "amazon-linux-extras"; then ( set -x; amazon-linux-extras install -y -q docker=18.06.1 || amazon-linux-extras install -y docker=18.06.1 || \ amazon-linux-extras install -y -q docker || amazon-linux-extras install -y docker ) else ( set -x; yum install -y -q docker-18.06.1ce || yum install -y -q docker ) fi fi fi else if commandExists "amazon-linux-extras"; then ( set -x; amazon-linux-extras install -y -q docker=17.12.1 || amazon-linux-extras install docker=17.12.1 \ || amazon-linux-extras install -y -q docker || amazon-linux-extras install docker ) else ( set -x; yum install -y -q docker-17.12.1ce || yum install -y -q docker ) fi fi service docker start || true DID_INSTALL_DOCKER=1 return elif [ "$LSB_DIST" = "sles" ]; then printf "${YELLOW}Pinning Docker version not supported on SUSE Linux${NC}\n" printf "${GREEN}Installing Docker from Zypper repository${NC}\n" # 2020-05-11 # SUSE has Docker 17.09.1_ce, 18.09.7_ce and 19.03.5 available. compareDockerVersions "19.0.0" "${1}" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -eq "-1" ]; then ( set -x; zypper -n install "docker=19.03.5_ce" || zypper -n install docker ) else compareDockerVersions "18.0.0" "${1}" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -eq "-1" ]; then ( set -x; zypper -n install "docker=18.09.7_ce" || zypper -n install docker ) else ( set -x; zypper -n install "docker=17.09.1_ce" || zypper -n install docker ) fi fi service docker start || true DID_INSTALL_DOCKER=1 return fi compareDockerVersions "17.06.0" "${1}" if { [ "$LSB_DIST" = "rhel" ] || [ "$LSB_DIST" = "ol" ] ; } && [ "$COMPARE_DOCKER_VERSIONS_RESULT" -le "0" ]; then if yum list installed "container-selinux" >/dev/null 2>&1; then # container-selinux installed printf "Skipping install of container-selinux as a version of it was already present\n" else # Install container-selinux from official source, ignoring errors logStep "Installing container-selinux" yum install -y container-selinux 2> /dev/null || true # verify installation success if yum list installed "container-selinux" >/dev/null 2>&1; then logSuccess "Installed container-selinux from existing sources" else if [ "$DIST_VERSION" = "7.6" ]; then # Install container-selinux from mirror.centos.org yum install -y "http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.107-1.el7_6.noarch.rpm" if yum list installed "container-selinux" >/dev/null 2>&1; then logWarn "Installed package required by docker container-selinux from fallback source of mirror.centos.org" else bail "Failed to install container-selinux package, required by Docker CE. Please install the container-selinux package or Docker before running this installation script." fi else # Install container-selinux from mirror.centos.org yum install -y "http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.107-3.el7.noarch.rpm" if yum list installed "container-selinux" >/dev/null 2>&1; then logWarn "Installed package required by docker container-selinux from fallback source of mirror.centos.org" else bail "Failed to install container-selinux package, required by Docker CE. Please install the container-selinux package or Docker before running this installation script." fi fi fi fi fi # docker-ce 20.10+ includes docker-ce-rootless-extras, which has some depenendencies not # Found in any of the yum repos available on RHEL on Azure. # Also seen on Oracle Enterprise Linux. compareDockerVersions "20.10.0" "${1}" if { [ "$LSB_DIST" = "rhel" ] || [ "$LSB_DIST" = "ol" ] ; } && [ "$COMPARE_DOCKER_VERSIONS_RESULT" -le "0" ]; then if ! yum list installed "yum-utils" >/dev/null 2>&1; then logStep "Installing yum-utils" yum install -y yum-utils logSuccess "Installed yum-utils" fi getUrlCmd if [ "$DIST_VERSION_MAJOR" -eq 7 ]; then yum-config-manager --add-repo=http://mirror.centos.org/centos/7/extras/x86_64 || true $URLGET_CMD "https://www.centos.org/keys/RPM-GPG-KEY-CentOS-7" > EXTRAS_KEY else yum-config-manager --add-repo=http://mirror.centos.org/centos/8/extras/x86_64/os || true $URLGET_CMD "https://www.centos.org/keys/RPM-GPG-KEY-CentOS-Official" > EXTRAS_KEY fi rpm --import EXTRAS_KEY rm EXTRAS_KEY fi _docker_install_url="https://get.replicated.com/docker-install.sh" printf "${GREEN}Installing docker version ${1} from ${_docker_install_url}${NC}\n" getUrlCmd $URLGET_CMD "$_docker_install_url?docker_version=${1}&lsb_dist=${LSB_DIST}&dist_version=${DIST_VERSION_MAJOR}" > "$REPLICATED_TEMP_DIR/docker_install.sh" # When this script is piped into bash as stdin, apt-get will eat the remaining parts of this script, # preventing it from being executed. So using /dev/null here to change stdin for the docker script. VERSION="${1}" sh "$REPLICATED_TEMP_DIR/docker_install.sh" < /dev/null printf "${GREEN}External script is finished${NC}\n" # Need to manually start Docker in these cases if [ "$INIT_SYSTEM" = "systemd" ]; then systemctl enable docker systemctl start docker elif [ "$LSB_DIST" = "centos" ] && [ "$DIST_VERSION_MAJOR" = "6" ]; then service docker start elif [ "$LSB_DIST" = "rhel" ] && [ "$DIST_VERSION_MAJOR" = "6" ]; then service docker start fi # i guess the second arg means to skip this? if [ "$2" -eq "1" ]; then # set +e because df --output='fstype' doesn't exist on older versions of rhel and centos set +e _maybeRequireRhelDevicemapper set -e fi DID_INSTALL_DOCKER=1 } _maybeRequireRhelDevicemapper() { # If the distribution is CentOS or RHEL and the filesystem is XFS, it is possible that docker has installed with overlay as the device driver # In that case we should change the storage driver to devicemapper, because while loopback-lvm is slow it is also more likely to work if { [ "$LSB_DIST" = "centos" ] || [ "$LSB_DIST" = "rhel" ] ; } && { df --output='fstype' 2>/dev/null | grep -q -e '^xfs$' || grep -q -e ' xfs ' /etc/fstab ; } ; then # If distribution is centos or rhel and filesystem is XFS # xfs (RHEL 7.2 and higher), but only with d_type=true enabled. Use xfs_info to verify that the ftype option is set to 1. # https://docs.docker.com/storage/storagedriver/overlayfs-driver/#prerequisites oIFS="$IFS"; IFS=.; set -- $DIST_VERSION; IFS="$oIFS"; _dist_version_minor=$2 if [ "$DIST_VERSION_MAJOR" -eq "7" ] && [ "$_dist_version_minor" -ge "2" ] && xfs_info / | grep -q -e 'ftype=1'; then return fi # Get kernel version (and extract major+minor version) kernelVersion="$(uname -r)" semverParse $kernelVersion if docker info | grep -q -e 'Storage Driver: overlay2\?' && { ! xfs_info / | grep -q -e 'ftype=1' || [ $major -lt 3 ] || { [ $major -eq 3 ] && [ $minor -lt 18 ]; }; }; then # If storage driver is overlay and (ftype!=1 OR kernel version less than 3.18) printf "${YELLOW}Changing docker storage driver to devicemapper." printf "Using overlay/overlay2 requires CentOS/RHEL 7.2 or higher and ftype=1 on xfs filesystems.\n" printf "It is recommended to configure devicemapper to use direct-lvm mode for production.${NC}\n" systemctl stop docker insertOrReplaceJsonParam /etc/docker/daemon.json storage-driver devicemapper systemctl start docker fi fi } _dockerUpgrade() { _should_skip_docker_ee_install if [ "$SHOULD_SKIP_DOCKER_EE_INSTALL" -eq "1" ]; then return fi if [ "$AIRGAP" != "1" ]; then printf "This installer will upgrade your current version of Docker (%s) to the recommended version: %s\n" "$DOCKER_VERSION" "$1" printf "Do you want to allow this? " if confirmY; then _installDocker "$1" 0 return fi fi } _dockerForceUpgrade() { if [ "$AIRGAP" -eq "1" ]; then echo >&2 "Error: The installed version of Docker ($DOCKER_VERSION) may not be compatible with this installer." echo >&2 "Please manually upgrade your current version of Docker to the recommended version: $1" exit 1 fi _dockerUpgrade "$1" if [ "$DID_INSTALL_DOCKER" -ne "1" ]; then printf "Please manually upgrade your current version of Docker to the recommended version: %s\n" "$1" exit 0 fi } _dockerProceedAnyway() { printf "The installed version of Docker (%s) may not be compatible with this installer.\nThe recommended version is %s\n" "$DOCKER_VERSION" "$1" printf "Do you want to proceed anyway? " if ! confirmN; then exit 0 fi } _dockerGetBestVersion() { BEST_DOCKER_VERSION_RESULT="$1" getMinDockerVersion if [ -n "$MIN_DOCKER_VERSION_RESULT" ]; then compareDockerVersions "$MIN_DOCKER_VERSION_RESULT" "$BEST_DOCKER_VERSION_RESULT" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -eq "1" ]; then BEST_DOCKER_VERSION_RESULT="$MIN_DOCKER_VERSION_RESULT" return fi fi getMaxDockerVersion if [ -n "$MAX_DOCKER_VERSION_RESULT" ]; then compareDockerVersions "$BEST_DOCKER_VERSION_RESULT" "$MAX_DOCKER_VERSION_RESULT" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -eq "1" ]; then BEST_DOCKER_VERSION_RESULT="$MAX_DOCKER_VERSION_RESULT" return fi fi } _dockerRequireMinInstallableVersion() { getMaxDockerVersion if [ -z "$MAX_DOCKER_VERSION_RESULT" ]; then return fi compareDockerVersions "$1" "$MAX_DOCKER_VERSION_RESULT" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -eq "1" ]; then echo >&2 "Error: This install script may not be compatible with this linux distribution." echo >&2 "We have detected a maximum docker version of $MAX_DOCKER_VERSION_RESULT while the required minimum version for this script is $1." exit 1 fi } ####################################### # Checks if Docker EE should be installed or upgraded. # Globals: # LSB_DIST # NO_CE_ON_EE # Returns: # SHOULD_SKIP_DOCKER_EE_INSTALL ####################################### SHOULD_SKIP_DOCKER_EE_INSTALL= _should_skip_docker_ee_install() { SHOULD_SKIP_DOCKER_EE_INSTALL= if [ "$LSB_DIST" = "rhel" ] || [ "$LSB_DIST" = "ol" ] || [ "$LSB_DIST" = "sles" ]; then if [ -n "$NO_CE_ON_EE" ]; then SHOULD_SKIP_DOCKER_EE_INSTALL=1 return fi fi SHOULD_SKIP_DOCKER_EE_INSTALL=0 } ####################################### # Docker uses cgroupfs by default to manage cgroup. On distributions using systemd, # i.e. RHEL and Ubuntu, this causes issues because there are now 2 seperate ways # to manage resources. For more info see the link below. # https://github.com/kubernetes/kubeadm/issues/1394#issuecomment-462878219 # Globals: # None # Returns: # None ####################################### changeCgroupDriverToSystemd() { insertJSONArray "/etc/docker/daemon.json" "exec-opts" "native.cgroupdriver=systemd" } ####################################### # # replicated.sh # # require prompt.sh # ####################################### ####################################### # Reads a value from the /etc/replicated.conf file # Globals: # None # Arguments: # Variable to read # Returns: # REPLICATED_CONF_VALUE ####################################### readReplicatedConf() { unset REPLICATED_CONF_VALUE if [ -f /etc/replicated.conf ]; then REPLICATED_CONF_VALUE=$(cat /etc/replicated.conf | grep -o "\"$1\":\s*\"[^\"]*" | sed "s/\"$1\":\s*\"//") || true fi } ####################################### # Adds word-readable permission to conf file so the replicated container can read it # Globals: # None # Arguments: # None # Returns: # None ####################################### ensureReplicatedConfReadable() { if [ -f /etc/replicated.conf ]; then chmod a+r /etc/replicated.conf fi } ####################################### # Reads a value from REPLICATED_OPTS variable in the /etc/default/replicated file # Globals: # REPLICATED_OPTS # Arguments: # Variable to read # Returns: # REPLICATED_OPTS_VALUE ####################################### readReplicatedOpts() { unset REPLICATED_OPTS_VALUE REPLICATED_OPTS_VALUE="$(echo "$REPLICATED_OPTS" | grep -o "$1=[^ ]*" | cut -d'=' -f2)" } ####################################### # Reads a value from REPLICATED_OPERATOR_OPTS variable in the /etc/default/replicated-operator file # Globals: # REPLICATED_OPTS # Arguments: # Variable to read # Returns: # REPLICATED_OPTS_VALUE ####################################### readReplicatedOperatorOpts() { unset REPLICATED_OPTS_VALUE REPLICATED_OPTS_VALUE="$(echo "$REPLICATED_OPERATOR_OPTS" | grep -o "$1=[^ ]*" | cut -d'=' -f2)" } ####################################### # Prompts for daemon endpoint if not already set. # Globals: # None # Arguments: # None # Returns: # DAEMON_ENDPOINT ####################################### DAEMON_ENDPOINT= promptForDaemonEndpoint() { if [ -n "$DAEMON_ENDPOINT" ]; then return fi printf "Please enter the 'Daemon Address' displayed on the 'Cluster' page of your On-Prem Console.\n" while true; do printf "Daemon Address: " prompt if [ -n "$PROMPT_RESULT" ]; then DAEMON_ENDPOINT="$PROMPT_RESULT" return fi done } ####################################### # Prompts for daemon token if not already set. # Globals: # None # Arguments: # None # Returns: # DAEMON_TOKEN ####################################### DAEMON_TOKEN= promptForDaemonToken() { if [ -n "$DAEMON_TOKEN" ]; then return fi printf "Please enter the 'Secret Token' displayed on the 'Cluster' page of your On-Prem Console.\n" while true; do printf "Secret Token: " prompt if [ -n "$PROMPT_RESULT" ]; then DAEMON_TOKEN="$PROMPT_RESULT" return fi done } ####################################### # Creates user and adds to Docker group # Globals: # REPLICATED_USERNAME # Arguments: # None # Returns: # REPLICATED_USER_ID ####################################### REPLICATED_USER_ID=0 maybeCreateReplicatedUser() { # require REPLICATED_USERNAME if [ -z "$REPLICATED_USERNAME" ]; then return fi # Create the users REPLICATED_USER_ID=$(id -u "$REPLICATED_USERNAME" 2>/dev/null || true) if [ -z "$REPLICATED_USER_ID" ]; then useradd -g "${DOCKER_GROUP_ID:-0}" "$REPLICATED_USERNAME" REPLICATED_USER_ID=$(id -u "$REPLICATED_USERNAME") fi # Add the users to the docker group if needed # Versions older than 2.5.0 run as root if [ "$REPLICATED_USER_ID" != "0" ]; then usermod -a -G "${DOCKER_GROUP_ID:-0}" "$REPLICATED_USERNAME" fi } ####################################### # Gets the replicated image registry prefix # Globals: # None # Arguments: # Replicated version # Returns: # REPLICATED_REGISTRY_PREFIX ####################################### REPLICATED_REGISTRY_PREFIX= getReplicatedRegistryPrefix() { REPLICATED_REGISTRY_PREFIX=replicated local replicated_version="$1" semverCompare "$replicated_version" "2.45.0" if [ "$SEMVER_COMPARE_RESULT" -lt "0" ]; then REPLICATED_REGISTRY_PREFIX=quay.io/replicated fi } ####################################### # Pull replicated and replicated-ui container images. # Globals: # REGISTRY_ADDRESS_OVERRIDE # REGISTRY_PATH_PREFIX # REPLICATED_REGISTRY_PREFIX # Arguments: # None # Returns: # None ####################################### pullReplicatedImages() { if [ -n "$REGISTRY_ADDRESS_OVERRIDE" ]; then docker pull "${REGISTRY_ADDRESS_OVERRIDE}/${REGISTRY_PATH_PREFIX}replicated/replicated:stable-2.14.0" docker pull "${REGISTRY_ADDRESS_OVERRIDE}/${REGISTRY_PATH_PREFIX}replicated/replicated-ui:stable-2.14.0" (set -x; docker tag "${REGISTRY_ADDRESS_OVERRIDE}/${REGISTRY_PATH_PREFIX}replicated/replicated:stable-2.14.0" "${REPLICATED_REGISTRY_PREFIX}/replicated:stable-2.14.0") (set -x; docker tag "${REGISTRY_ADDRESS_OVERRIDE}/${REGISTRY_PATH_PREFIX}replicated/replicated-ui:stable-2.14.0" "${REPLICATED_REGISTRY_PREFIX}/replicated-ui:stable-2.14.0") else docker pull "${REPLICATED_REGISTRY_PREFIX}/replicated:stable-2.14.0" docker pull "${REPLICATED_REGISTRY_PREFIX}/replicated-ui:stable-2.14.0" fi } ####################################### # Pull replicated-operator container image. # Globals: # None # Arguments: # None # Returns: # None ####################################### pullOperatorImage() { if [ -n "$REGISTRY_ADDRESS_OVERRIDE" ]; then docker pull "${REGISTRY_ADDRESS_OVERRIDE}/${REGISTRY_PATH_PREFIX}replicated/replicated-operator:2.14.0" (set -x; docker tag "${REGISTRY_ADDRESS_OVERRIDE}/${REGISTRY_PATH_PREFIX}replicated/replicated-operator:2.14.0" "${REPLICATED_REGISTRY_PREFIX}/replicated-operator:2.14.0") else docker pull "${REPLICATED_REGISTRY_PREFIX}/replicated-operator:2.14.0" fi } ####################################### # Tag and push replicated-operator container image to the on-prem registry. # Globals: # None # Arguments: # On-prem registry address # Returns: # None ####################################### tagAndPushOperatorImage() { docker tag \ "${REPLICATED_REGISTRY_PREFIX}/replicated-operator:2.14.0" \ "${1}/replicated/replicated-operator:2.14.0" docker push "${1}/replicated/replicated-operator:2.14.0" } ####################################### # # cli-script.sh # ####################################### ####################################### # Writes the replicated CLI to /usr/local/bin/replicated # Wtires the replicated CLI V2 to /usr/local/bin/replicatedctl # Globals: # None # Arguments: # Container name/ID or script that identifies the container to run the commands in # Returns: # None ####################################### installCliFile() { _installCliFile "/usr/local/bin" "$1" "$2" } _installCliFile() { set +e read -r -d '' _flags < "${1}/replicated" <<-EOF #!/bin/bash set -eo pipefail ${_flags} sh -c "${2} \$flags \\ ${3} \\ replicated\$push \$(printf "%s" "\$opts")" EOF chmod a+x "${1}/replicated" cat > "${1}/replicatedctl" <<-EOF #!/bin/bash set -eo pipefail ${_flags} sh -c "${2} \$flags \\ ${3} \\ replicatedctl\$push \$(printf "%s" "\$opts")" EOF chmod a+x "${1}/replicatedctl" } ####################################### # # alias.sh # # require common.sh # ####################################### ####################################### # Writes the alias command to the /etc/replicated.alias file # Globals: # None # Arguments: # Alias to write # Returns: # REPLICATED_CONF_VALUE ####################################### installAliasFile() { # "replicated" is no longer an alias, and we need to remove it from the file. # And we still need to create this file so replicated can write app aliases here. requireAliasFile _match="alias replicated=\".*\"" if grep -q -s "$_match" /etc/replicated.alias; then # Replace in case we switched tags sed -i "s#$_match##" /etc/replicated.alias fi installAliasBashrc } ####################################### # Creates the /etc/replicated.alias file if it does not exist # Globals: # None # Arguments: # None # Returns: # None ####################################### requireAliasFile() { # Old script might have mounted this file when it didn't exist, and now it's a folder. if [ -d /etc/replicated.alias ]; then rm -rf /etc/replicated.alias fi if [ ! -e /etc/replicated.alias ]; then echo "# THIS FILE IS GENERATED BY REPLICATED. DO NOT EDIT!" > /etc/replicated.alias chmod a+r /etc/replicated.alias fi } ####################################### # Sources the /etc/replicated.alias file in the .bashrc # Globals: # None # Arguments: # None # Returns: # None ####################################### installAliasBashrc() { bashrc_file= if [ -f /etc/bashrc ]; then bashrc_file="/etc/bashrc" elif [ -f /etc/bash.bashrc ]; then bashrc_file="/etc/bash.bashrc" else echo "${RED}No global bashrc file found. Replicated command aliasing will be disabled.${NC}" fi if [ -n "$bashrc_file" ]; then if ! grep -q "/etc/replicated.alias" "$bashrc_file"; then cat >> "$bashrc_file" <<-EOF if [ -f /etc/replicated.alias ]; then . /etc/replicated.alias fi EOF fi fi } ####################################### # # ip-address.sh # # require common.sh, prompt.sh # ####################################### PRIVATE_ADDRESS= PUBLIC_ADDRESS= ####################################### # Prompts the user for a private address. # Globals: # None # Arguments: # None # Returns: # PRIVATE_ADDRESS ####################################### promptForPrivateIp() { _count=0 _regex="^[[:digit:]]+: ([^[:space:]]+)[[:space:]]+[[:alnum:]]+ ([[:digit:].]+)" while read -r _line; do [[ $_line =~ $_regex ]] if [ "${BASH_REMATCH[1]}" != "lo" ]; then _iface_names[$((_count))]=${BASH_REMATCH[1]} _iface_addrs[$((_count))]=${BASH_REMATCH[2]} let "_count += 1" fi done <<< "$(ip -4 -o addr)" if [ "$_count" -eq "0" ]; then echo >&2 "Error: The installer couldn't discover any valid network interfaces on this machine." echo >&2 "Check your network configuration and re-run this script again." echo >&2 "If you want to skip this discovery process, pass the 'local-address' arg to this script, e.g. 'sudo ./install.sh local-address=1.2.3.4'" exit 1 elif [ "$_count" -eq "1" ]; then PRIVATE_ADDRESS=${_iface_addrs[0]} printf "The installer will use network interface '%s' (with IP address '%s')\n" "${_iface_names[0]}" "${_iface_addrs[0]}" return fi printf "The installer was unable to automatically detect the private IP address of this machine.\n" printf "Please choose one of the following network interfaces:\n" for i in $(seq 0 $((_count-1))); do printf "[%d] %-5s\t%s\n" "$i" "${_iface_names[$i]}" "${_iface_addrs[$i]}" done while true; do printf "Enter desired number (0-%d): " "$((_count-1))" prompt if [ -z "$PROMPT_RESULT" ]; then continue fi if [ "$PROMPT_RESULT" -ge "0" ] && [ "$PROMPT_RESULT" -lt "$_count" ]; then PRIVATE_ADDRESS=${_iface_addrs[$PROMPT_RESULT]} printf "The installer will use network interface '%s' (with IP address '%s').\n" "${_iface_names[$PROMPT_RESULT]}" "$PRIVATE_ADDRESS" return fi done } ####################################### # Discovers public IP address from cloud provider metadata services. # Globals: # None # Arguments: # None # Returns: # PUBLIC_ADDRESS ####################################### discoverPublicIp() { if [ -n "$PUBLIC_ADDRESS" ]; then printf "The installer will use service address '%s' (from parameter)\n" "$PUBLIC_ADDRESS" return fi # gce if commandExists "curl"; then set +e _out=$(curl --noproxy "*" --max-time 5 --connect-timeout 2 -qSfs -H 'Metadata-Flavor: Google' http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip 2>/dev/null) _status=$? set -e else set +e _out=$(wget --no-proxy -t 1 --timeout=5 --connect-timeout=2 -qO- --header='Metadata-Flavor: Google' http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip 2>/dev/null) _status=$? set -e fi if [ "$_status" -eq "0" ] && [ -n "$_out" ]; then PUBLIC_ADDRESS=$_out printf "The installer will use service address '%s' (discovered from GCE metadata service)\n" "$PUBLIC_ADDRESS" return fi # ec2 if commandExists "curl"; then set +e _out=$(curl --noproxy "*" --max-time 5 --connect-timeout 2 -qSfs http://169.254.169.254/latest/meta-data/public-ipv4 2>/dev/null) _status=$? set -e else set +e _out=$(wget --no-proxy -t 1 --timeout=5 --connect-timeout=2 -qO- http://169.254.169.254/latest/meta-data/public-ipv4 2>/dev/null) _status=$? set -e fi if [ "$_status" -eq "0" ] && [ -n "$_out" ]; then PUBLIC_ADDRESS=$_out printf "The installer will use service address '%s' (discovered from EC2 metadata service)\n" "$PUBLIC_ADDRESS" return fi # azure if commandExists "curl"; then set +e _out=$(curl --noproxy "*" --max-time 5 --connect-timeout 2 -qSfs -H Metadata:true "http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-08-01&format=text" 2>/dev/null) _status=$? set -e else set +e _out=$(wget --no-proxy -t 1 --timeout=5 --connect-timeout=2 -qO- --header='Metadata:true' "http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-08-01&format=text" 2>/dev/null) _status=$? set -e fi if [ "$_status" -eq "0" ] && [ -n "$_out" ]; then PUBLIC_ADDRESS=$_out printf "The installer will use service address '%s' (discovered from Azure metadata service)\n" "$PUBLIC_ADDRESS" return fi } ####################################### # Prompts the user for a public address. # Globals: # None # Arguments: # None # Returns: # PUBLIC_ADDRESS ####################################### shouldUsePublicIp() { if [ -z "$PUBLIC_ADDRESS" ]; then return fi printf "The installer has automatically detected the service IP address of this machine as %s.\n" "$PUBLIC_ADDRESS" printf "Do you want to:\n" printf "[0] default: use %s\n" "$PUBLIC_ADDRESS" printf "[1] enter new address\n" printf "Enter desired number (0-1): " promptTimeout if [ "$PROMPT_RESULT" = "1" ]; then promptForPublicIp fi } ####################################### # Prompts the user for a public address. # Globals: # None # Arguments: # None # Returns: # PUBLIC_ADDRESS ####################################### promptForPublicIp() { while true; do printf "Service IP address: " promptTimeout "-t 120" if [ -n "$PROMPT_RESULT" ]; then if isValidIpv4 "$PROMPT_RESULT"; then PUBLIC_ADDRESS=$PROMPT_RESULT break else printf "%s is not a valid ip address.\n" "$PROMPT_RESULT" fi else break fi done } ####################################### # Determines if the ip is a valid ipv4 address. # Globals: # None # Arguments: # IP # Returns: # None ####################################### isValidIpv4() { if echo "$1" | grep -qs '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$'; then return 0 else return 1 fi } ####################################### # Determines if the ip is a valid ipv6 address. This will match long and short IPv6 addresses as # well as the loopback address. # Globals: # None # Arguments: # IP # Returns: # None ####################################### isValidIpv6() { if echo "$1" | grep -qs "^\([0-9a-fA-F]\{0,4\}:\)\{1,7\}[0-9a-fA-F]\{0,4\}$"; then return 0 else return 1 fi } ####################################### # Returns the ip portion of an address. # Globals: # None # Arguments: # ADDRESS # Returns: # PARSED_IPV4 ####################################### PARSED_IPV4= parseIpv4FromAddress() { PARSED_IPV4=$(echo "$1" | grep --only-matching '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*') } ####################################### # Validates a private address against the ip routes. # Globals: # None # Arguments: # None # Returns: # 0 if valid ####################################### isValidPrivateIp() { local privateIp="$1" local _regex="^[[:digit:]]+: ([^[:space:]]+)[[:space:]]+[[:alnum:]]+ ([[:digit:].]+)" while read -r _line; do [[ $_line =~ $_regex ]] if [ "${BASH_REMATCH[1]}" != "lo" ] && [ "${BASH_REMATCH[2]}" = "$privateIp" ]; then return 0 fi done <<< "$(ip -4 -o addr)" return 1 } ####################################### # # proxy.sh # # require prompt.sh, system.sh, docker.sh, replicated.sh # ####################################### PROXY_ADDRESS= DID_CONFIGURE_DOCKER_PROXY=0 ####################################### # Prompts for proxy address. # Globals: # None # Arguments: # None # Returns: # PROXY_ADDRESS ####################################### promptForProxy() { printf "Does this machine require a proxy to access the Internet? " if ! confirmN; then return fi printf "Enter desired HTTP proxy address: " prompt if [ -n "$PROMPT_RESULT" ]; then if [ "${PROMPT_RESULT:0:7}" != "http://" ] && [ "${PROMPT_RESULT:0:8}" != "https://" ]; then echo >&2 "Proxy address must have prefix \"http(s)://\"" exit 1 fi PROXY_ADDRESS="$PROMPT_RESULT" printf "The installer will use the proxy at '%s'\n" "$PROXY_ADDRESS" fi } ####################################### # Discovers proxy address from environment. # Globals: # None # Arguments: # None # Returns: # PROXY_ADDRESS ####################################### discoverProxy() { readReplicatedConf "HttpProxy" if [ -n "$REPLICATED_CONF_VALUE" ]; then PROXY_ADDRESS="$REPLICATED_CONF_VALUE" printf "The installer will use the proxy at '%s' (imported from /etc/replicated.conf 'HttpProxy')\n" "$PROXY_ADDRESS" return fi if [ -n "$HTTP_PROXY" ]; then PROXY_ADDRESS="$HTTP_PROXY" printf "The installer will use the proxy at '%s' (imported from env var 'HTTP_PROXY')\n" "$PROXY_ADDRESS" return elif [ -n "$http_proxy" ]; then PROXY_ADDRESS="$http_proxy" printf "The installer will use the proxy at '%s' (imported from env var 'http_proxy')\n" "$PROXY_ADDRESS" return elif [ -n "$HTTPS_PROXY" ]; then PROXY_ADDRESS="$HTTPS_PROXY" printf "The installer will use the proxy at '%s' (imported from env var 'HTTPS_PROXY')\n" "$PROXY_ADDRESS" return elif [ -n "$https_proxy" ]; then PROXY_ADDRESS="$https_proxy" printf "The installer will use the proxy at '%s' (imported from env var 'https_proxy')\n" "$PROXY_ADDRESS" return fi } ####################################### # Requires that docker is set up with an http proxy. # Globals: # PROXY_ADDRESS # NO_PROXY_ADDRESSES # DID_INSTALL_DOCKER # Arguments: # None # Returns: # None ####################################### requireDockerProxy() { _previous_proxy="$(docker info 2>/dev/null | grep -i 'Http Proxy:' | sed 's/ *Http Proxy: //I')" _previous_no_proxy="$(docker info 2>/dev/null | grep -i 'No Proxy:' | sed 's/ *No Proxy: //I')" if [ "$PROXY_ADDRESS" = "$_previous_proxy" ] && [ "$NO_PROXY_ADDRESSES" = "$_previous_no_proxy" ]; then return fi _allow=n if [ "$DID_INSTALL_DOCKER" = "1" ]; then _allow=y else if [ -n "$_previous_proxy" ]; then printf "${YELLOW}It looks like Docker is set up with http proxy address $_previous_proxy.${NC}\n" if [ -n "$_previous_no_proxy" ]; then printf "${YELLOW}and no proxy addresses $_previous_no_proxy.${NC}\n" fi printf "${YELLOW}This script will automatically reconfigure it now.${NC}\n" else printf "${YELLOW}It does not look like Docker is set up with http proxy enabled.${NC}\n" printf "${YELLOW}This script will automatically configure it now.${NC}\n" fi printf "${YELLOW}Do you want to allow this?${NC} " if confirmY; then _allow=y fi fi if [ "$_allow" = "y" ]; then configureDockerProxy else printf "${YELLOW}Do you want to proceed anyway?${NC} " if ! confirmN; then printf "${RED}Please manually configure your Docker daemon with environment HTTP_PROXY.${NC}\n" 1>&2 exit 1 fi fi } ####################################### # Configures docker to run with an http proxy. # Globals: # INIT_SYSTEM # PROXY_ADDRESS # NO_PROXY_ADDRESSES # Arguments: # None # Returns: # RESTART_DOCKER ####################################### configureDockerProxy() { case "$INIT_SYSTEM" in systemd) _docker_conf_file=/etc/systemd/system/docker.service.d/http-proxy.conf mkdir -p /etc/systemd/system/docker.service.d _configureDockerProxySystemd "$_docker_conf_file" "$PROXY_ADDRESS" "$NO_PROXY_ADDRESSES" RESTART_DOCKER=1 ;; upstart|sysvinit) _docker_conf_file= if [ -e /etc/sysconfig/docker ]; then _docker_conf_file=/etc/sysconfig/docker else _docker_conf_file=/etc/default/docker mkdir -p /etc/default fi _configureDockerProxyUpstart "$_docker_conf_file" "$PROXY_ADDRESS" "$NO_PROXY_ADDRESSES" RESTART_DOCKER=1 ;; *) return 0 ;; esac DID_CONFIGURE_DOCKER_PROXY=1 } ####################################### # Configures systemd docker to run with an http proxy. # Globals: # None # Arguments: # $1 - config file # $2 - proxy address # $3 - no proxy address # Returns: # None ####################################### _configureDockerProxySystemd() { if [ ! -e "$1" ]; then touch "$1" # create the file if it doesn't exist fi if [ ! -s "$1" ]; then # if empty echo "# Generated by replicated install script" >> "$1" echo "[Service]" >> "$1" fi if ! grep -q "^\[Service\] *$" "$1"; then # don't mess with this file in this case return fi if ! grep -q "^Environment=" "$1"; then echo "Environment=" >> "$1" fi sed -i'' -e "s/\"*HTTP_PROXY=[^[:blank:]]*//" "$1" # remove old http proxy address sed -i'' -e "s/\"*HTTPS_PROXY=[^[:blank:]]*//" "$1" # remove old https proxy address sed -i'' -e "s/\"*NO_PROXY=[^[:blank:]]*//" "$1" # remove old no proxy address sed -i'' -e "s/^\(Environment=\) */\1/" "$1" # remove space after equals sign sed -i'' -e "s/ $//" "$1" # remove trailing space sed -i'' -e "s#^\(Environment=.*$\)#\1 \"HTTP_PROXY=${2}\"#" "$1" sed -i'' -e "s#^\(Environment=.*$\)#\1 \"HTTPS_PROXY=${2}\"#" "$1" sed -i'' -e "s#^\(Environment=.*$\)#\1 \"NO_PROXY=${3}\"#" "$1" } ####################################### # Configures upstart docker to run with an http proxy. # Globals: # None # Arguments: # $1 - config file # $2 - proxy address # $3 - no proxy address # Returns: # None ####################################### _configureDockerProxyUpstart() { if [ ! -e "$1" ]; then touch "$1" # create the file if it doesn't exist fi _export_proxy="export http_proxy=\"$2\"" _export_noproxy="export NO_PROXY=\"$3\"" if grep -q "^export http_proxy" "$1"; then sed -i'' -e "s#^export *http_proxy=.*#$_export_proxy#" "$1" _export_proxy= fi if grep -q "^export NO_PROXY" "$1"; then sed -i'' -e "s#^export *NO_PROXY=.*#$_export_noproxy#" "$1" _export_noproxy= fi if [ -n "$_export_proxy" ] || [ -n "$_export_noproxy" ]; then echo "" >> "$1" echo "# Generated by replicated install script" >> "$1" fi if [ -n "$_export_proxy" ]; then echo "$_export_proxy" >> "$1" fi if [ -n "$_export_noproxy" ]; then echo "$_export_noproxy" >> "$1" fi } ####################################### # Check that the docker proxy configuration was successful. # Globals: # DID_CONFIGURE_DOCKER_PROXY # Arguments: # None # Returns: # None ####################################### checkDockerProxyConfig() { if [ "$DID_CONFIGURE_DOCKER_PROXY" != "1" ]; then return fi if docker info 2>/dev/null | grep -q -i "Http Proxy:"; then return fi echo -e "${RED}Docker proxy configuration failed.${NC}" printf "Do you want to proceed anyway? " if ! confirmN; then echo >&2 "Please manually configure your Docker daemon with environment HTTP_PROXY." exit 1 fi } ####################################### # Exports proxy configuration. # Globals: # PROXY_ADDRESS # Arguments: # None # Returns: # None ####################################### exportProxy() { if [ -z "$PROXY_ADDRESS" ]; then return fi if [ -z "$http_proxy" ]; then export http_proxy=$PROXY_ADDRESS fi if [ -z "$https_proxy" ]; then export https_proxy=$PROXY_ADDRESS fi if [ -z "$HTTP_PROXY" ]; then export HTTP_PROXY=$PROXY_ADDRESS fi if [ -z "$HTTPS_PROXY" ]; then export HTTPS_PROXY=$PROXY_ADDRESS fi } ####################################### # Assembles a sane list of no_proxy addresses # Globals: # ADDITIONAL_NO_PROXY (optional) # Arguments: # None # Returns: # NO_PROXY_ADDRESSES ####################################### NO_PROXY_ADDRESSES= getNoProxyAddresses() { get_docker0_gateway_ip NO_PROXY_ADDRESSES="localhost,127.0.0.1,$DOCKER0_GATEWAY_IP" if [ -n "$ADDITIONAL_NO_PROXY" ]; then NO_PROXY_ADDRESSES="$NO_PROXY_ADDRESSES,$ADDITIONAL_NO_PROXY" fi while [ "$#" -gt 0 ] do # [10.138.0.2]:9878 -> 10.138.0.2 hostname=`echo $1 | sed -e 's/:[0-9]*$//' | sed -e 's/[][]//g'` if [ -n "$hostname" ]; then NO_PROXY_ADDRESSES="$NO_PROXY_ADDRESSES,$hostname" fi shift done # filter duplicates NO_PROXY_ADDRESSES=`echo "$NO_PROXY_ADDRESSES" | sed 's/,/\n/g' | sort | uniq | paste -s --delimiters=","` } ####################################### # # airgap.sh # # require prompt.sh # ####################################### ####################################### # Loads replicated main images into docker # Globals: # None # Arguments: # None # Returns: # None ####################################### airgapLoadReplicatedImages() { docker load < replicated.tar docker load < replicated-ui.tar } ####################################### # Loads replicated operator image into docker # Globals: # None # Arguments: # None # Returns: # None ####################################### airgapLoadOperatorImage() { docker load < replicated-operator.tar } ####################################### # Loads replicated support images into docker # Globals: # None # Arguments: # None # Returns: # None ####################################### airgapLoadSupportImages() { docker load < cmd.tar docker load < statsd-graphite.tar docker load < premkit.tar if [ -f debian.tar ]; then docker load < debian.tar fi } ####################################### # Loads Retraced images into docker, these images power the replicated audit logs # Globals: # None # Arguments: # None # Returns: # None ####################################### airgapMaybeLoadSupportBundle() { if [ -f support-bundle.tar ]; then printf "Loading support bundle image\n" docker load < support-bundle.tar fi } ####################################### # Loads Retraced images into docker, these images power the replicated audit logs # Globals: # None # Arguments: # None # Returns: # None ####################################### airgapMaybeLoadRetraced() { printf "Loading audit log images from package\n" # these have been monocontainer'd since 2.24.0 if [ -f retraced.tar ]; then docker load < retraced.tar docker load < retraced-postgres.tar docker load < retraced-nsqd.tar fi # these have been included together prior to 2.21.0 if [ -f retraced-processor.tar ]; then docker load < retraced-processor.tar docker load < retraced-db.tar docker load < retraced-api.tar docker load < retraced-cron.tar fi # single retraced bundle no longer included since 2.21.0 if [ -f retraced-bundle.tar.gz ]; then tar xzvf retraced-bundle.tar.gz docker load < retraced-processor.tar docker load < retraced-postgres.tar docker load < retraced-nsqd.tar docker load < retraced-db.tar docker load < retraced-api.tar docker load < retraced-cron.tar fi # redis is included in Retraced <= 1.1.10 if [ -f retraced-redis.tar ]; then docker load < retraced-redis.tar fi } ####################################### # Prompts for daemon registry address if not defined # Globals: # DAEMON_REGISTRY_ADDRESS # Arguments: # None # Returns: # None ####################################### promptForDaemonRegistryAddress() { if [ -n "$DAEMON_REGISTRY_ADDRESS" ]; then return fi printf "Please enter the Replicated on-prem registry address.\n" while true; do printf "On-prem registry address: " prompt if [ -n "$PROMPT_RESULT" ]; then DAEMON_REGISTRY_ADDRESS="$PROMPT_RESULT" return fi done } ####################################### # Prompts for daemon registry CA if not defined # Globals: # CA # Arguments: # None # Returns: # None ####################################### promptForCA() { if [ -n "$CA" ]; then return fi printf "Please enter the Replicated on-prem registry base64 encoded ca certificate pem.\n" while true; do printf "CA: " prompt if [ -n "$PROMPT_RESULT" ]; then CA="$PROMPT_RESULT" return fi done } ####################################### # # selinux.sh # # require common.sh docker-version.sh prompt.sh # ####################################### ####################################### # Check if SELinux is enabled # Globals: # None # Arguments: # None # Returns: # Non-zero exit status unless SELinux is enabled ####################################### selinux_enabled() { if commandExists "selinuxenabled"; then selinuxenabled return elif commandExists "sestatus"; then ENABLED=$(sestatus | grep 'SELinux status' | awk '{ print $3 }') echo "$ENABLED" | grep --quiet --ignore-case enabled return fi return 1 } ####################################### # Check if SELinux is enforced # Globals: # None # Arguments: # None # Returns: # Non-zero exit status unelss SELinux is enforced ####################################### selinux_enforced() { if commandExists "getenforce"; then ENFORCED=$(getenforce) echo $(getenforce) | grep --quiet --ignore-case enforcing return elif commandExists "sestatus"; then ENFORCED=$(sestatus | grep 'SELinux mode' | awk '{ print $3 }') echo "$ENFORCED" | grep --quiet --ignore-case enforcing return fi return 1 } SELINUX_REPLICATED_DOMAIN_LABEL= get_selinux_replicated_domain_label() { getDockerVersion compareDockerVersions "$DOCKER_VERSION" "1.11.0" if [ "$COMPARE_DOCKER_VERSIONS_RESULT" -eq "-1" ]; then SELINUX_REPLICATED_DOMAIN_LABEL="label:type:$SELINUX_REPLICATED_DOMAIN" else SELINUX_REPLICATED_DOMAIN_LABEL="label=type:$SELINUX_REPLICATED_DOMAIN" fi } ####################################### # Prints a warning if selinux is enabled and enforcing # Globals: # None # Arguments: # Mode - either permissive or enforcing # Returns: # None ####################################### warn_if_selinux() { if selinux_enabled ; then if selinux_enforced ; then printf "${YELLOW}SELinux is enforcing. Running docker with the \"--selinux-enabled\" flag may cause some features to become unavailable.${NC}\n\n" else printf "${YELLOW}SELinux is enabled. Switching to enforcing mode and running docker with the \"--selinux-enabled\" flag may cause some features to become unavailable.${NC}\n\n" fi fi } ####################################### # Prompts to confirm disabling of SELinux for K8s installs, bails on decline. # Globals: # None # Arguments: # None # Returns: # None ####################################### must_disable_selinux() { # From kubernets kubeadm docs for RHEL: # # Disabling SELinux by running setenforce 0 is required to allow containers to # access the host filesystem, which is required by pod networks for example. # You have to do this until SELinux support is improved in the kubelet. if selinux_enabled && selinux_enforced ; then printf "\n${YELLOW}Kubernetes is incompatible with SELinux. Disable SELinux to continue?${NC} " if confirmY ; then setenforce 0 sed -i s/^SELINUX=.*$/SELINUX=permissive/ /etc/selinux/config else bail "\nDisable SELinux with 'setenforce 0' before re-running install script" fi fi } ####################################### # # firewall.sh # # require prompt.sh # ####################################### ####################################### # Warns or terminates if firewalld is active # Globals: # BYPASS_FIREWALLD_WARNING, HARD_FAIL_ON_FIREWALLD, INIT_SYSTEM # Arguments: # None # Returns: # None ####################################### checkFirewalld() { if [ "$BYPASS_FIREWALLD_WARNING" = "1" ]; then return fi # firewalld is only available on RHEL 7+ so other init systems can be ignored if [ "$INIT_SYSTEM" != "systemd" ]; then return fi if ! systemctl -q is-active firewalld ; then return fi if [ "$HARD_FAIL_ON_FIREWALLD" = "1" ]; then printf "${RED}Firewalld is active${NC}\n" 1>&2 exit 1 fi printf "${YELLOW}Continue with firewalld active? ${NC}" if confirmY ; then BYPASS_FIREWALLD_WARNING=1 return fi exit 1 } ####################################### # # registryproxy.sh # # require common.sh # require log.sh # require prompt.sh # ####################################### ARTIFACTORY_ADDRESS= ARTIFACTORY_ACCESS_METHOD= ARTIFACTORY_DOCKER_REPO_KEY= ARTIFACTORY_QUAY_REPO_KEY= ARTIFACTORY_AUTH= ####################################### # Configures the registry address override # and path prefix when a registry proxy is set. # Globals: # ARTIFACTORY_ADDRESS # ARTIFACTORY_ACCESS_METHOD # ARTIFACTORY_DOCKER_REPO_KEY # ARTIFACTORY_QUAY_REPO_KEY # REPLICATED_REGISTRY_PREFIX # Arguments: # None # Returns: # REGISTRY_ADDRESS_OVERRIDE # REGISTRY_PATH_PREFIX ####################################### configureRegistryProxyAddressOverride() { if [ -z "$ARTIFACTORY_ADDRESS" ]; then return fi if [ "$AIRGAP" = "1" ]; then bail "Artifactory registry proxy cannot be used with airgap." fi if [ "$REPLICATED_REGISTRY_PREFIX" = "quay.io/replicated" ]; then case "$ARTIFACTORY_ACCESS_METHOD" in url-prefix) _configureRegistryProxyAddressOverride_UrlPrefixQuay ;; subdomain) _configureRegistryProxyAddressOverride_SubdomainQuay ;; port) _configureRegistryProxyAddressOverride_PortQuay ;; *) # default url-prefix _configureRegistryProxyAddressOverride_UrlPrefixQuay ;; esac else case "$ARTIFACTORY_ACCESS_METHOD" in url-prefix) _configureRegistryProxyAddressOverride_UrlPrefix ;; subdomain) _configureRegistryProxyAddressOverride_Subdomain ;; port) _configureRegistryProxyAddressOverride_Port ;; *) # default url-prefix _configureRegistryProxyAddressOverride_UrlPrefix ;; esac fi } _configureRegistryProxyAddressOverride_UrlPrefix() { if [ -z "$ARTIFACTORY_ADDRESS" ]; then return fi local repoKey="$ARTIFACTORY_DOCKER_REPO_KEY" if [ -z "$repoKey" ]; then logWarn "Flag \"artifactory-docker-repo-key\" not set, defaulting to \"docker-remote\"." repoKey="docker-remote" fi REGISTRY_ADDRESS_OVERRIDE="$ARTIFACTORY_ADDRESS" REGISTRY_PATH_PREFIX="${repoKey}/" } _configureRegistryProxyAddressOverride_UrlPrefixQuay() { if [ -z "$ARTIFACTORY_ADDRESS" ]; then return fi local repoKey="$ARTIFACTORY_QUAY_REPO_KEY" if [ -z "$repoKey" ]; then logWarn "Flag \"artifactory-quay-repo-key\" not set, defaulting to \"quay-remote\"." repoKey="quay-remote" fi REGISTRY_ADDRESS_OVERRIDE="$ARTIFACTORY_ADDRESS" REGISTRY_PATH_PREFIX="${repoKey}/" } _configureRegistryProxyAddressOverride_Subdomain() { if [ -z "$ARTIFACTORY_ADDRESS" ]; then return fi local repoKey="$ARTIFACTORY_DOCKER_REPO_KEY" if [ -z "$repoKey" ]; then logWarn "Flag \"artifactory-docker-repo-key\" not set, defaulting to \"docker-remote\"." repoKey="docker-remote" fi REGISTRY_ADDRESS_OVERRIDE="${repoKey}.${ARTIFACTORY_ADDRESS}" } _configureRegistryProxyAddressOverride_SubdomainQuay() { if [ -z "$ARTIFACTORY_ADDRESS" ]; then return fi local repoKey="$ARTIFACTORY_QUAY_REPO_KEY" if [ -z "$repoKey" ]; then logWarn "Flag \"artifactory-quay-repo-key\" not set, defaulting to \"quay-remote\"." repoKey="quay-remote" fi REGISTRY_ADDRESS_OVERRIDE="${repoKey}.${ARTIFACTORY_ADDRESS}" } _configureRegistryProxyAddressOverride_Port() { if [ -z "$ARTIFACTORY_ADDRESS" ]; then return fi if [ -z "$ARTIFACTORY_DOCKER_REPO_KEY" ]; then bail "Flag \"artifactory-docker-repo-key\" required for Artifactory access method \"port\"." fi splitHostPort "$ARTIFACTORY_ADDRESS" REGISTRY_ADDRESS_OVERRIDE="${HOST}:${ARTIFACTORY_DOCKER_REPO_KEY}" } _configureRegistryProxyAddressOverride_PortQuay() { if [ -z "$ARTIFACTORY_ADDRESS" ]; then return fi if [ -z "$ARTIFACTORY_QUAY_REPO_KEY" ]; then bail "Flag \"artifactory-quay-repo-key\" required for Artifactory access method \"port\"." fi splitHostPort "$ARTIFACTORY_ADDRESS" REGISTRY_ADDRESS_OVERRIDE="${HOST}:${ARTIFACTORY_QUAY_REPO_KEY}" } ####################################### # Writes registry proxy config if it does not exist. # Globals: # ARTIFACTORY_ADDRESS # ARTIFACTORY_ACCESS_METHOD # ARTIFACTORY_DOCKER_REPO_KEY # ARTIFACTORY_QUAY_REPO_KEY # ARTIFACTORY_AUTH # Arguments: # None # Returns: # None ####################################### maybeWriteRegistryProxyConfig() { if [ -z "$ARTIFACTORY_ADDRESS" ]; then return fi if [ -f /etc/replicated/registry_proxy.json ]; then return fi printf "\n${YELLOW}Registry proxy configuration file /etc/replicated/registry_proxy.json not found.${NC}\n\n" printf "${YELLOW}Do you want to proceed anyway? ${NC}" if ! confirmN; then exit 0 fi mkdir -p /etc/replicated _writeRegistryProxyConfig "/etc/replicated/registry_proxy.json" } _writeRegistryProxyConfig() { cat > "$1" <<-EOF { "artifactory": { "address": "$ARTIFACTORY_ADDRESS", "auth": "$ARTIFACTORY_AUTH", EOF if [ -z "$ARTIFACTORY_DOCKER_REPO_KEY" ] && [ -z "$ARTIFACTORY_QUAY_REPO_KEY" ]; then cat >> "$1" <<-EOF "access_method": "$ARTIFACTORY_ACCESS_METHOD" } } EOF return fi cat >> "$1" <<-EOF "access_method": "$ARTIFACTORY_ACCESS_METHOD", "repository_key_map": { EOF if [ -n "$ARTIFACTORY_DOCKER_REPO_KEY" ] && [ -n "$ARTIFACTORY_QUAY_REPO_KEY" ]; then echo " \"docker.io\": \"$ARTIFACTORY_DOCKER_REPO_KEY\"," >> "$1" elif [ -n "$ARTIFACTORY_DOCKER_REPO_KEY" ]; then echo " \"docker.io\": \"$ARTIFACTORY_DOCKER_REPO_KEY\"" >> "$1" fi if [ -n "$ARTIFACTORY_QUAY_REPO_KEY" ]; then echo " \"quay.io\": \"$ARTIFACTORY_QUAY_REPO_KEY\"" >> "$1" fi cat >> "$1" <<-EOF } } } EOF } ####################################### # Prompts for Artifactory auth creds if ARTIFACTORY_AUTH # is set to string literal "". # Globals: # ARTIFACTORY_AUTH # Arguments: # $1 - username (for testing) # $2 - password (for testing) # Returns: # ARTIFACTORY_AUTH ####################################### maybePromptForArtifactoryAuth() { if [ "$ARTIFACTORY_AUTH" != "" ]; then return fi artifactoryUsername="$1" artifactoryPassword="$2" printf "\nPlease enter your artifactory registry credentials (leave blank to skip)\n" if [ -z "$artifactoryUsername" ]; then printf "Username: " prompt local artifactoryUsername="$PROMPT_RESULT" fi if [ -z "$artifactoryPassword" ]; then printf "Password: " prompt local artifactoryPassword="$PROMPT_RESULT" fi if [ -z "$artifactoryUsername" ] || [ -z "$artifactoryPassword" ]; then logWarn "Artifactory credentials are empty" unset ARTIFACTORY_AUTH return fi ARTIFACTORY_AUTH="$(echo -n $artifactoryUsername:$artifactoryPassword | base64)" } ####################################### # Parses a basic auth string (base64 user:pass) # Globals: # None # Arguments: # $1 - Auth string # Returns: # BASICAUTH_USERNAME # BASICAUTH_PASSWORD ####################################### parseBasicAuth() { BASICAUTH_USERNAME= BASICAUTH_PASSWORD= local auth="$(echo "$1" | base64 --decode)" oIFS="$IFS"; IFS=":" read -r BASICAUTH_USERNAME BASICAUTH_PASSWORD <<< "$auth"; IFS="$oIFS" } ############################################################################### ## index.sh ############################################################################### ############################################################################### ## print.sh ############################################################################### info() { printf "[INFO] ${1}\n" } warn() { printf "${YELLOW}[WARN] ${1}${NC}\n" } error() { printf "${RED}[ERROR] ${1}${NC}\n" } ############################################################################### ## disk.sh ############################################################################### ############################################################################### # Determine if root disk usage is over 83% threshold ############################################################################### preflightDiskUsageRootDir() { preflightDiskUsage / 83 } ############################################################################### # Determine if /var/lib/docker disk usage is over 83% threshold ############################################################################### preflightDiskUsageDockerDataDir() { if ! isDockerInstalled ; then return 0 fi preflightDiskUsage /var/lib/docker 83 } ############################################################################### # Determine if /var/lib/replicated disk usage is over 83% threshold ############################################################################### preflightDiskUsageReplicatedDataDir() { if ! commandExists "replicatedctl"; then return 0 fi preflightDiskUsage /var/lib/replicated 83 } preflightDiskUsage() { local dir="$1" local threshold="$2" if [ ! -d "$dir" ]; then return 0 fi getDiskUsagePcent "$dir" if [ "$DISK_USAGE_PCENT" -ge "$threshold" ]; then warn "$dir disk usage is at ${DISK_USAGE_PCENT}%%" return 1 fi info "$dir disk usage is at ${DISK_USAGE_PCENT}%%" return 0 } getDiskUsagePcent() { DISK_USAGE_PCENT="$(df "$1" | awk 'NR==2 {print $5}' | sed 's/%//')" } ############################################################################### ## docker.sh ############################################################################### ############################################################################### # Check if Docker device driver is Devicemapper in loopback mode ############################################################################### preflightDockerDevicemapperLoopback() { if ! isDockerInstalled ; then return 0 fi local driver="$(docker info 2>/dev/null | grep 'Storage Driver' | awk '{print $3}' | awk -F- '{print $1}')" if [ "$driver" != "devicemapper" ]; then return 0 fi if docker info 2>/dev/null | grep -Fqs 'Data loop file:'; then warn "Docker device driver devicemapper is in loopback mode" return 1 fi info "Docker device driver devicemapper not in loopback mode" return 0 } ############################################################################### # Check if Docker is running with an http proxy ############################################################################### preflightDockerHttpProxy() { if ! isDockerInstalled ; then return 0 fi local proxy="$(docker info 2>/dev/null | grep -i 'Http Proxy:' | sed 's/ *Http Proxy: //I')" local no_proxy="$(docker info 2>/dev/null | grep -i 'No Proxy:' | sed 's/ *No Proxy: //I')" if [ -n "$proxy" ]; then info "Docker is set with http proxy \"$proxy\" and no proxy \"$no_proxy\"" else info "Docker http proxy not set" fi return 0 } ############################################################################### # Check if Docker is running with a non-default seccomp profile ############################################################################### preflightDockerSeccompNonDefault() { if ! isDockerInstalled ; then return 0 fi if ! docker info 2>&1 | grep -q seccomp; then # no seccomp profile return 0 fi if docker info 2>&1 | grep -qE "WARNING:.*seccomp profile"; then warn "Docker using a non-default seccomp profile" return 1 fi info "Docker using default seccomp profile" return 0 } ############################################################################### # Check if Docker is running with a non-standard root directory ############################################################################### preflightDockerNonStandardRoot() { if ! isDockerInstalled ; then return 0 fi local dir="$(docker info 2>/dev/null | grep -i 'Docker Root Dir:' | sed 's/ *Docker Root Dir: //I')" if [ -z "$dir" ]; then # failed to detect root dir return 0 fi if [ "$dir" != "/var/lib/docker" ]; then warn "Docker using a non-standard root directory of $dir" return 0 fi info "Docker using standard root directory" return 0 } ############################################################################### # Check if Docker icc is disabled ############################################################################### preflightDockerIccDisabled() { if ! isDockerInstalled ; then return 0 fi if ! docker network >/dev/null 2>&1; then # docker network command does not exist return 0 fi if docker network inspect bridge | grep -q '"com.docker.network.bridge.enable_icc": "false"'; then warn "Docker icc (inter-container communication) disabled" return 1 fi info "Docker icc (inter-container communication) enabled" return 0 } ############################################################################### # Check if any Docker container registries are blocked ############################################################################### preflightDockerContainerRegistriesBlocked() { if ! isDockerInstalled ; then return 0 fi if [ ! -e /etc/containers/registries.conf ]; then return 0 fi local registries="$(cat /etc/containers/registries.conf | awk '/\[registries\.block\]/,0' | grep "registries = " | head -1 | sed 's/registries *= \[ *\([^]]*\) *]/\1/')" if [ -n "$registries" ]; then warn "Docker /etc/containers/registries.conf blocking registries $registries" return 1 fi info "Docker /etc/containers/registries.conf not blocking" return 0 } ############################################################################### # Check if any Docker nofile ulimit is set ############################################################################### preflightDockerUlimitNofileSet() { if ! isDockerInstalled ; then return 0 fi maybeBuildPreflightImage maybeRemoveDockerContainer preflightDockerUlimitNofileSet docker run -d -p 38888:80 --name preflightDockerUlimitNofileSet "$PREFLIGHT_IMAGE" 10 >/dev/null 2>&1 local nofile="$(docker inspect preflightDockerUlimitNofileSet | awk '/"nofile",/,0')" maybeRemoveDockerContainer preflightDockerUlimitNofileSet if [ -n "$nofile" ]; then local soft="$(echo "$nofile" | grep '"Soft":' | head -1 | sed 's/.*"Soft": *\([0-9]*\).*/\1/')" local hard="$(echo "$nofile" | grep '"Hard":' | head -1 | sed 's/.*"Hard": *\([0-9]*\).*/\1/')" if [ -n "$soft" ] || [ -n "$hard" ]; then warn "Docker open files (nofile) ulimit set to ${soft}:${hard}" return 1 fi fi info "Docker open files (nofile) ulimit not set" return 0 } ############################################################################### # Check if Docker userland-proxy is disabled ############################################################################### preflightDockerUserlandProxyDisabled() { if ! isDockerInstalled ; then return 0 fi maybeBuildPreflightImage maybeRemoveDockerContainer preflightDockerUserlandProxyDisabled docker run -d -p 38888:80 --name preflightDockerUserlandProxyDisabled "$PREFLIGHT_IMAGE" 10 >/dev/null 2>&1 if ! ps auxw | grep -q "[d]ocker-proxy"; then maybeRemoveDockerContainer preflightDockerUserlandProxyDisabled warn "Docker userland proxy disabled" return 1 fi maybeRemoveDockerContainer preflightDockerUserlandProxyDisabled info "Docker userland proxy enabled" return 0 } PREFLIGHT_IMAGE="replicated/sleep:1.0" maybeBuildPreflightImage() { if docker inspect "$PREFLIGHT_IMAGE" >/dev/null 2>&1; then return fi local sleep="$(which sleep)" local linked="$(ldd -v "$sleep" | grep " => /" | sed -n 's/.*=> \(\/[^ ]*\).*/\1/p' | sort | uniq)" local dir="$(mktemp -d)" cp "$sleep" "$dir" while read -r so; do cp "$so" "$dir" done <<< "$linked" cat >"$dir/Dockerfile" <> "$dir/Dockerfile" done <<< "$linked" cat >>"$dir/Dockerfile" </dev/null rm -rf "$dir" } maybeRemoveDockerContainer() { docker rm -f "$1" >/dev/null 2>&1 || true } ############################################################################### ## firewalld.sh ############################################################################### ############################################################################### # Determine if firewalld is active ############################################################################### preflightFirewalld() { if ! commandExists "systemctl"; then return 0 fi if ! systemctl -q is-active firewalld; then info "Firewalld is not active" return 0 fi info "Firewalld is active" return 1 } ############################################################################### ## iptables.sh ############################################################################### ############################################################################### # Check if iptables default policy for the input chain is drop ############################################################################### preflightIptablesInputDrop() { if iptables -L | grep 'Chain INPUT (policy DROP)'; then warn "Iptables chain INPUT default policy DROP" return 1 fi info "Iptables chain INPUT default policy ACCEPT" return 0 } ############################################################################### ## selinux.sh ############################################################################### ############################################################################### # Check if SELinux is in enforcing mode ############################################################################### preflightSelinuxEnforcing() { local enforcing= if commandExists "getenforce"; then enforcing="$(getenforce)" elif commandExists "sestatus"; then enforcing="$(sestatus | grep 'SELinux mode' | awk '{ print $3 }')" else return 0 fi if echo "$enforcing" | grep -qi enforcing; then warn "SELinux is in enforcing mode" return 1 fi info "SELinux is not in enforcing mode" return 0 } HAS_PREFLIGHT_WARNINGS= HAS_PREFLIGHT_ERRORS= ############################################################################### # Runs preflight checks # Sets HAS_PREFLIGHT_WARNINGS=1 if there are any warnings # Sets HAS_PREFLIGHT_ERRORS=1 if there are any errors # Globals: # None # Arguments: # None # Returns: # 1 if there are errors ############################################################################### runPreflights() { HAS_PREFLIGHT_WARNINGS=0 HAS_PREFLIGHT_ERRORS=0 set +e if ! preflightDiskUsageRootDir; then HAS_PREFLIGHT_WARNINGS=1 fi if ! preflightDiskUsageDockerDataDir; then HAS_PREFLIGHT_WARNINGS=1 fi if ! preflightDiskUsageReplicatedDataDir; then HAS_PREFLIGHT_WARNINGS=1 fi if ! preflightDockerDevicemapperLoopback; then HAS_PREFLIGHT_WARNINGS=1 fi if ! preflightDockerHttpProxy; then HAS_PREFLIGHT_WARNINGS=1 fi if ! preflightDockerSeccompNonDefault; then HAS_PREFLIGHT_WARNINGS=1 fi if ! preflightDockerNonStandardRoot; then HAS_PREFLIGHT_ERRORS=1 fi if ! preflightDockerIccDisabled; then HAS_PREFLIGHT_WARNINGS=1 fi if ! preflightDockerContainerRegistriesBlocked; then HAS_PREFLIGHT_WARNINGS=1 fi if ! preflightDockerUlimitNofileSet; then HAS_PREFLIGHT_WARNINGS=1 fi if ! preflightDockerUserlandProxyDisabled; then HAS_PREFLIGHT_WARNINGS=1 fi if ! preflightFirewalld; then HAS_PREFLIGHT_WARNINGS=1 fi if ! preflightIptablesInputDrop; then HAS_PREFLIGHT_ERRORS=1 fi if ! preflightSelinuxEnforcing; then HAS_PREFLIGHT_WARNINGS=1 fi set -e if [ "$HAS_PREFLIGHT_ERRORS" = "1" ]; then return 1 fi return 0 } ask_for_registry_name_ipv6() { line= while [[ "$line" == "" ]]; do printf "Enter a hostname that resolves to $PRIVATE_ADDRESS: " prompt line=$PROMPT_RESULT done # check if it's resolvable. it might not be ping-able. if ping6 -c 1 $line 2>&1 | grep -q "unknown host"; then echo -e >&2 "${RED}${line} cannot be resolved${NC}" exit 1 fi REGISTRY_ADVERTISE_ADDRESS="$line" printf "Replicated will use \"%s\" to communicate with this server.\n" "${REGISTRY_ADVERTISE_ADDRESS}" } discoverPrivateIp() { if [ -n "$PRIVATE_ADDRESS" ]; then if [ "$NO_PRIVATE_ADDRESS_PROMPT" != "1" ]; then printf "Validating local address supplied in parameter: '%s'\n" $PRIVATE_ADDRESS if ! isValidPrivateIp "$PRIVATE_ADDRESS" ; then promptForPrivateIp return fi fi printf "The installer will use local address '%s' (from parameter)\n" $PRIVATE_ADDRESS return fi readReplicatedConf "LocalAddress" if [ -n "$REPLICATED_CONF_VALUE" ]; then PRIVATE_ADDRESS="$REPLICATED_CONF_VALUE" if [ "$NO_PRIVATE_ADDRESS_PROMPT" != "1" ]; then printf "Validating local address found in /etc/replicated.conf: '%s'\n" $PRIVATE_ADDRESS if ! isValidPrivateIp "$PRIVATE_ADDRESS" ; then promptForPrivateIp return fi fi printf "The installer will use local address '%s' (imported from /etc/replicated.conf 'LocalAddress')\n" $PRIVATE_ADDRESS return fi promptForPrivateIp } configure_docker_ipv6() { case "$INIT_SYSTEM" in systemd) if ! grep -q "^ExecStart.*--ipv6" /lib/systemd/system/docker.service; then sed -i 's/ExecStart=\/usr\/bin\/dockerd/ExecStart=\/usr\/bin\/dockerd --ipv6/' /lib/systemd/system/docker.service RESTART_DOCKER=1 fi ;; upstart|sysvinit) if [ -e /etc/sysconfig/docker ]; then # CentOS 6 if ! grep -q "^other_args=.*--ipv6" /etc/sysconfig/docker; then sed -i 's/other_args=\"/other_args=\"--ipv6/' /etc/sysconfig/docker RESTART_DOCKER=1 fi fi if [ -e /etc/default/docker ]; then # Everything NOT CentOS 6 if ! grep -q "^DOCKER_OPTS=" /etc/default/docker; then echo 'DOCKER_OPTS="--ipv6"' >> /etc/default/docker RESTART_DOCKER=1 fi fi ;; *) return 0 ;; esac } DAEMON_TOKEN= get_daemon_token() { if [ -n "$DAEMON_TOKEN" ]; then return fi readReplicatedOpts "DAEMON_TOKEN" if [ -n "$REPLICATED_OPTS_VALUE" ]; then DAEMON_TOKEN="$REPLICATED_OPTS_VALUE" return fi readReplicatedConf "DaemonToken" if [ -n "$REPLICATED_CONF_VALUE" ]; then DAEMON_TOKEN="$REPLICATED_CONF_VALUE" return fi getGuid DAEMON_TOKEN="$GUID_RESULT" } SELINUX_REPLICATED_DOMAIN= CUSTOM_SELINUX_REPLICATED_DOMAIN=0 get_selinux_replicated_domain() { # may have been set by command line argument if [ -n "$SELINUX_REPLICATED_DOMAIN" ]; then CUSTOM_SELINUX_REPLICATED_DOMAIN=1 return fi # if previously set to a custom domain it will be in REPLICATED_OPTS readReplicatedOpts "SELINUX_REPLICATED_DOMAIN" if [ -n "$REPLICATED_OPTS_VALUE" ]; then SELINUX_REPLICATED_DOMAIN="$REPLICATED_OPTS_VALUE" CUSTOM_SELINUX_REPLICATED_DOMAIN=1 return fi # default if unset SELINUX_REPLICATED_DOMAIN=spc_t } remove_docker_containers() { # try twice because of aufs error "Unable to remove filesystem" if docker inspect replicated &>/dev/null; then set +e docker rm -f replicated _status=$? set -e if [ "$_status" -ne "0" ]; then if docker inspect replicated &>/dev/null; then printf "Failed to remove replicated container, retrying\n" sleep 1 docker rm -f replicated fi fi fi if docker inspect replicated-ui &>/dev/null; then set +e docker rm -f replicated-ui _status=$? set -e if [ "$_status" -ne "0" ]; then if docker inspect replicated-ui &>/dev/null; then printf "Failed to remove replicated-ui container, retrying\n" sleep 1 docker rm -f replicated-ui fi fi fi } tag_docker_images() { printf "Tagging replicated and replicated-ui images\n" # older docker versions require -f flag to move a tag from one image to another docker tag "$REPLICATED_REGISTRY_PREFIX/replicated:stable-2.14.0" "$REPLICATED_REGISTRY_PREFIX/replicated:current" \ || docker tag -f "$REPLICATED_REGISTRY_PREFIX/replicated:stable-2.14.0" "$REPLICATED_REGISTRY_PREFIX/replicated:current" docker tag "$REPLICATED_REGISTRY_PREFIX/replicated-ui:stable-2.14.0" "$REPLICATED_REGISTRY_PREFIX/replicated-ui:current" \ || docker tag -f "$REPLICATED_REGISTRY_PREFIX/replicated-ui:stable-2.14.0" "$REPLICATED_REGISTRY_PREFIX/replicated-ui:current" } find_hostname() { set +e SYS_HOSTNAME=`hostname -f` if [ "$?" -ne "0" ]; then SYS_HOSTNAME=`hostname` if [ "$?" -ne "0" ]; then SYS_HOSTNAME="" fi fi set -e } REPLICATED_OPTS= build_replicated_opts() { # See https://github.com/golang/go/blob/23173fc025f769aaa9e19f10aa0f69c851ca2f3b/src/crypto/x509/root_linux.go # CentOS 6/7, RHEL 7 # Fedora/RHEL 6 (this is a link on Centos 6/7) # OpenSUSE # OpenELEC # Debian/Ubuntu/Gentoo etc. This is where OpenSSL will look. It's moved to the bottom because this exists as a link on some other platforms set \ "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \ "/etc/pki/tls/certs/ca-bundle.crt" \ "/etc/ssl/ca-bundle.pem" \ "/etc/pki/tls/cacert.pem" \ "/etc/ssl/certs/ca-certificates.crt" for cert_file do if [ -f "$cert_file" ]; then REPLICATED_TRUSTED_CERT_MOUNT="-v ${cert_file}:/etc/ssl/certs/ca-certificates.crt" break fi done if [ -n "$REPLICATED_OPTS" ]; then REPLICATED_OPTS=$(echo "$REPLICATED_OPTS" | sed -e 's/-e[[:blank:]]*HTTP_PROXY=[^[:blank:]]*//g') REPLICATED_OPTS=$(echo "$REPLICATED_OPTS" | sed -e 's/-e[[:blank:]]*HTTPS_PROXY=[^[:blank:]]*//g') if [ -n "$PROXY_ADDRESS" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e HTTP_PROXY=$PROXY_ADDRESS -e HTTPS_PROXY=$PROXY_ADDRESS" fi REPLICATED_OPTS=$(echo "$REPLICATED_OPTS" | sed -e 's/-e[[:blank:]]*NO_PROXY=[^[:blank:]]*//g') if [ -n "$NO_PROXY_ADDRESSES" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e NO_PROXY=$NO_PROXY_ADDRESSES" fi REPLICATED_OPTS=$(echo "$REPLICATED_OPTS" | sed -e 's/-e[[:blank:]]*REGISTRY_ADVERTISE_ADDRESS=[^[:blank:]]*//g') if [ -n "$REGISTRY_ADVERTISE_ADDRESS" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e REGISTRY_ADVERTISE_ADDRESS=$REGISTRY_ADVERTISE_ADDRESS" fi REPLICATED_OPTS=$(echo "$REPLICATED_OPTS" | sed -e 's/-e[[:blank:]]*DISABLE_HOST_NETWORKING=[^[:blank:]]*//g') if [ "$DISABLE_REPLICATED_HOST_NETWORKING" = "1" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e DISABLE_HOST_NETWORKING=true" fi return fi REPLICATED_OPTS="" if [ -n "$PROXY_ADDRESS" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e HTTP_PROXY=$PROXY_ADDRESS -e HTTPS_PROXY=$PROXY_ADDRESS -e NO_PROXY=$NO_PROXY_ADDRESSES" fi if [ -n "$REGISTRY_ADVERTISE_ADDRESS" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e REGISTRY_ADVERTISE_ADDRESS=$REGISTRY_ADVERTISE_ADDRESS" fi if [ "$SKIP_OPERATOR_INSTALL" != "1" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e DAEMON_TOKEN=$DAEMON_TOKEN" fi if [ -n "$LOG_LEVEL" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e LOG_LEVEL=$LOG_LEVEL" else REPLICATED_OPTS="$REPLICATED_OPTS -e LOG_LEVEL=info" fi if [ "$AIRGAP" = "1" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e AIRGAP=true" fi if [ -n "$RELEASE_SEQUENCE" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e RELEASE_SEQUENCE=$RELEASE_SEQUENCE" fi if [ -n "$RELEASE_PATCH_SEQUENCE" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e RELEASE_PATCH_SEQUENCE=$RELEASE_PATCH_SEQUENCE" fi if [ "$CUSTOM_SELINUX_REPLICATED_DOMAIN" = "1" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e SELINUX_REPLICATED_DOMAIN=$SELINUX_REPLICATED_DOMAIN" fi find_hostname REPLICATED_OPTS="$REPLICATED_OPTS -e NODENAME=$SYS_HOSTNAME" REPLICATED_UI_OPTS="" if [ -n "$LOG_LEVEL" ]; then REPLICATED_UI_OPTS="$REPLICATED_UI_OPTS -e LOG_LEVEL=$LOG_LEVEL" fi dockerGetLoggingDriver if [ "$DOCKER_LOGGING_DRIVER" = "json-file" ]; then REPLICATED_OPTS="$REPLICATED_OPTS --log-opt max-size=50m --log-opt max-file=3" REPLICATED_UI_OPTS="$REPLICATED_UI_OPTS --log-opt max-size=50m --log-opt max-file=3" fi if [ "$DISABLE_REPLICATED_HOST_NETWORKING" = "1" ]; then REPLICATED_OPTS="$REPLICATED_OPTS -e DISABLE_HOST_NETWORKING=true" fi } write_replicated_configuration() { cat > $CONFDIR/replicated <<-EOF RELEASE_CHANNEL=stable PRIVATE_ADDRESS=$PRIVATE_ADDRESS SKIP_OPERATOR_INSTALL=$SKIP_OPERATOR_INSTALL REPLICATED_OPTS="$REPLICATED_OPTS" REPLICATED_UI_OPTS="$REPLICATED_UI_OPTS" EOF } write_systemd_services() { cat > /etc/systemd/system/replicated.service <<-EOF [Unit] Description=Replicated Service After=docker.service Requires=docker.service [Service] PermissionsStartOnly=true TimeoutStartSec=0 KillMode=none EnvironmentFile=${CONFDIR}/replicated User=${REPLICATED_USER_ID} Group=${DOCKER_GROUP_ID} ExecStartPre=-/usr/bin/docker rm -f replicated ExecStartPre=/bin/mkdir -p /var/run/replicated /var/lib/replicated /var/lib/replicated/statsd /var/lib/replicated/retraced ExecStartPre=/bin/chown -R ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} /var/run/replicated /var/lib/replicated/branding ExecStartPre=/bin/chown ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} /var/lib/replicated /var/lib/replicated/statsd /var/lib/replicated/retraced ExecStartPre=-/bin/chmod -R 755 /var/lib/replicated/tmp ExecStart=/usr/bin/docker run --name=replicated \\ ${REPLICATED_PORT_RANGE} \\ -u ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} \\ -v /var/lib/replicated:/var/lib/replicated \\ -v /var/run/docker.sock:/host/var/run/docker.sock \\ -v /proc:/host/proc:ro \\ -v /etc:/host/etc:ro \\ -v /etc/os-release:/host/etc/os-release:ro \\ ${REPLICATED_TRUSTED_CERT_MOUNT} \\ -v /var/run/replicated:/var/run/replicated \\ --security-opt ${SELINUX_REPLICATED_DOMAIN_LABEL} \\ -e LOCAL_ADDRESS=\${PRIVATE_ADDRESS} \\ -e RELEASE_CHANNEL=\${RELEASE_CHANNEL} \\ \$REPLICATED_OPTS \\ ${REPLICATED_REGISTRY_PREFIX}/replicated:current ExecStop=/usr/bin/docker stop replicated Restart=on-failure RestartSec=7 [Install] WantedBy=docker.service EOF if [ "$DISABLE_REPLICATED_UI" != "1" ]; then cat > /etc/systemd/system/replicated-ui.service <<-EOF [Unit] Description=Replicated Service After=docker.service Requires=docker.service [Service] PermissionsStartOnly=true TimeoutStartSec=0 KillMode=none EnvironmentFile=${CONFDIR}/replicated User=${REPLICATED_USER_ID} Group=${DOCKER_GROUP_ID} ExecStartPre=-/usr/bin/docker rm -f replicated-ui ExecStartPre=/bin/mkdir -p /var/run/replicated ExecStartPre=/bin/chown -R ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} /var/run/replicated ExecStart=/usr/bin/docker run --name=replicated-ui \\ -p ${UI_BIND_PORT}:8800/tcp \\ -u ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} \\ -v /var/run/replicated:/var/run/replicated \\ --security-opt ${SELINUX_REPLICATED_DOMAIN_LABEL} \\ \$REPLICATED_UI_OPTS \\ ${REPLICATED_REGISTRY_PREFIX}/replicated-ui:current ExecStop=/usr/bin/docker stop replicated-ui Restart=on-failure RestartSec=7 [Install] WantedBy=docker.service EOF fi systemctl daemon-reload } write_upstart_services() { REPLICATED_RESTART_POLICY= # NOTE: SysVinit does not support dependencies therefore we must add a # restart policy to the replicated service. The tradeoff here is that # SysVinit will lose track of the replicated process when docker restarts # the replicated service. if ! ls /etc/init/docker* 1> /dev/null 2>&1; then REPLICATED_RESTART_POLICY="--restart always" fi cat > /etc/init/replicated.conf <<-EOF description "Replicated Service" author "Replicated.com" start on replicated-docker or started docker stop on runlevel [!2345] or stopping docker respawn respawn limit 5 30 normal exit 0 pre-start script /bin/mkdir -p /var/run/replicated /var/lib/replicated /var/lib/replicated/statsd /var/lib/replicated/retraced /bin/chown -R ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} /var/run/replicated /var/lib/replicated/branding /bin/chown ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} /var/lib/replicated /var/lib/replicated/statsd /var/lib/replicated/retraced /bin/chmod -R 755 /var/lib/replicated/tmp 2>/dev/null || true /usr/bin/docker rm -f replicated 2>/dev/null || true COUNTER=0 while \$(/usr/bin/docker ps -a | grep --quiet "replicated:current") && [ \$COUNTER -lt 3 ]; do #Try removing the container again, but don't suppress output this time /usr/bin/docker rm -f replicated || true sleep 1 COUNTER=\$((\$COUNTER+1)) done end script script . ${CONFDIR}/replicated exec su -s /bin/sh -c 'exec "\$0" "\$@"' ${REPLICATED_USERNAME} -- /usr/bin/docker run --name=replicated \\ ${REPLICATED_RESTART_POLICY} \\ ${REPLICATED_PORT_RANGE} \\ -u ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} \\ -v /var/lib/replicated:/var/lib/replicated \\ -v /var/run/docker.sock:/host/var/run/docker.sock \\ -v /proc:/host/proc:ro \\ -v /etc:/host/etc:ro \\ -v /etc/os-release:/host/etc/os-release:ro \\ ${REPLICATED_TRUSTED_CERT_MOUNT} \\ -v /var/run/replicated:/var/run/replicated \\ --security-opt ${SELINUX_REPLICATED_DOMAIN_LABEL} \\ -e LOCAL_ADDRESS=\${PRIVATE_ADDRESS} \\ -e RELEASE_CHANNEL=\${RELEASE_CHANNEL} \\ \$REPLICATED_OPTS \\ ${REPLICATED_REGISTRY_PREFIX}/replicated:current end script EOF cat > /etc/init/replicated-stop.conf <<-EOF description "Replicated shutdown script" author "Replicated.com" start on stopping replicated kill timeout 30 script exec /usr/bin/docker stop replicated end script EOF if [ "$DISABLE_REPLICATED_UI" != "1" ]; then cat > /etc/init/replicated-ui.conf <<-EOF description "Replicated UI Service" author "Replicated.com" start on replicated-docker or started docker stop on runlevel [!2345] or stopping docker respawn respawn limit 5 30 normal exit 0 pre-start script /bin/mkdir -p /var/run/replicated /bin/chown -R ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} /var/run/replicated /usr/bin/docker rm -f replicated-ui 2>/dev/null || true COUNTER=0 while \$(/usr/bin/docker ps -a | grep --quiet "replicated-ui:current") && [ \$COUNTER -lt 3 ]; do #Try removing the container again, but don't suppress output this time /usr/bin/docker rm -f replicated-ui || true sleep 1 COUNTER=\$((\$COUNTER+1)) done end script script . ${CONFDIR}/replicated exec su -s /bin/sh -c 'exec "\$0" "\$@"' ${REPLICATED_USERNAME} -- /usr/bin/docker run --name=replicated-ui \\ ${REPLICATED_RESTART_POLICY} \\ -p ${UI_BIND_PORT}:8800/tcp \\ -u ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} \\ -v /var/run/replicated:/var/run/replicated \\ --security-opt ${SELINUX_REPLICATED_DOMAIN_LABEL} \\ \$REPLICATED_UI_OPTS \\ ${REPLICATED_REGISTRY_PREFIX}/replicated-ui:current end script EOF cat > /etc/init/replicated-ui-stop.conf <<-EOF description "Replicated UI shutdown script" author "Replicated.com" start on stopping replicated-ui kill timeout 30 script exec /usr/bin/docker stop replicated-ui end script EOF fi } write_sysvinit_services() { cat > /etc/init.d/replicated <<-EOF #!/bin/bash set -e ### BEGIN INIT INFO # Provides: replicated # Required-Start: docker # Required-Stop: docker # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: Replicated # Description: Replicated Service ### END INIT INFO REPLICATED=replicated DOCKER=/usr/bin/docker DEFAULTS=${CONFDIR}/replicated [ -r "\${DEFAULTS}" ] && . "\${DEFAULTS}" [ -r "/lib/lsb/init-functions" ] && . "/lib/lsb/init-functions" [ -r "/etc/rc.d/init.d/functions" ] && . "/etc/rc.d/init.d/functions" if [ ! -x \${DOCKER} ]; then echo -n >&2 "\${DOCKER} not present or not executable" exit 1 fi run_container() { /bin/mkdir -p /var/run/replicated /var/lib/replicated /var/lib/replicated/statsd /var/lib/replicated/retraced /bin/chown -R ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} /var/run/replicated /var/lib/replicated/branding /bin/chown ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} /var/lib/replicated /var/lib/replicated/statsd /var/lib/replicated/retraced /bin/chmod -R 755 /var/lib/replicated/tmp 2>/dev/null || true /usr/bin/docker rm -f replicated 2>/dev/null || true exec su -s /bin/sh -c 'exec "\$0" "\$@"' ${REPLICATED_USERNAME} -- \${DOCKER} run -d --name=\${REPLICATED} \\ ${REPLICATED_PORT_RANGE} \\ -u ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} \\ -v /var/lib/replicated:/var/lib/replicated \\ -v /var/run/docker.sock:/host/var/run/docker.sock \\ -v /proc:/host/proc:ro \\ -v /etc:/host/etc:ro \\ -v /etc/os-release:/host/etc/os-release:ro \\ ${REPLICATED_TRUSTED_CERT_MOUNT} \\ -v /var/run/replicated:/var/run/replicated \\ --security-opt ${SELINUX_REPLICATED_DOMAIN_LABEL} \\ -e LOCAL_ADDRESS=\${PRIVATE_ADDRESS} \\ -e RELEASE_CHANNEL=\${RELEASE_CHANNEL} \\ \$REPLICATED_OPTS \\ ${REPLICATED_REGISTRY_PREFIX}/replicated:current } stop_container() { \${DOCKER} stop \${REPLICATED} } remove_container() { \${DOCKER} rm -f \${REPLICATED} } _status() { if type status_of_proc | grep -i function > /dev/null; then status_of_proc "\${REPLICATED}" && exit 0 || exit \$? elif type status | grep -i function > /dev/null; then status "\${REPLICATED}" && exit 0 || exit \$? else exit 1 fi } case "\$1" in start) echo -n "Starting \${REPLICATED} service: " remove_container 2>/dev/null || true run_container ;; stop) echo -n "Shutting down \${REPLICATED} service: " stop_container ;; status) _status ;; restart|reload) pid=`pidofproc "\${REPLICATED}" 2>/dev/null` [ -n "\$pid" ] && ps -p \$pid > /dev/null 2>&1 \\ && \$0 stop \$0 start ;; *) echo "Usage: \${REPLICATED} {start|stop|status|reload|restart" exit 1 ;; esac EOF chmod +x /etc/init.d/replicated if [ "$DISABLE_REPLICATED_UI" != "1" ]; then cat > /etc/init.d/replicated-ui <<-EOF #!/bin/bash set -e ### BEGIN INIT INFO # Provides: replicated-ui # Required-Start: docker # Required-Stop: docker # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: Replicated UI # Description: Replicated UI Service ### END INIT INFO REPLICATED_UI=replicated-ui DOCKER=/usr/bin/docker DEFAULTS=${CONFDIR}/replicated [ -r "\${DEFAULTS}" ] && . "\${DEFAULTS}" [ -r "/lib/lsb/init-functions" ] && . "/lib/lsb/init-functions" [ -r "/etc/rc.d/init.d/functions" ] && . "/etc/rc.d/init.d/functions" if [ ! -x \${DOCKER} ]; then echo -n >&2 "\${DOCKER} not present or not executable" exit 1 fi run_container() { exec su -s /bin/sh -c 'exec "\$0" "\$@"' ${REPLICATED_USERNAME} -- \${DOCKER} run -d --name=\${REPLICATED_UI} \\ -p ${UI_BIND_PORT}:8800/tcp \\ -u ${REPLICATED_USER_ID}:${DOCKER_GROUP_ID} \\ -v /var/run/replicated:/var/run/replicated \\ --security-opt ${SELINUX_REPLICATED_DOMAIN_LABEL} \\ \$REPLICATED_UI_OPTS \\ ${REPLICATED_REGISTRY_PREFIX}/replicated-ui:current } stop_container() { \${DOCKER} stop \${REPLICATED_UI} } remove_container() { \${DOCKER} rm -f \${REPLICATED_UI} } _status() { if type status_of_proc | grep -i function > /dev/null; then status_of_proc "\${REPLICATED_UI}" && exit 0 || exit \$? elif type status | grep -i function > /dev/null; then status "\${REPLICATED_UI}" && exit 0 || exit \$? else exit 1 fi } case "\$1" in start) echo -n "Starting \${REPLICATED_UI} service: " remove_container 2>/dev/null || true run_container ;; stop) echo -n "Shutting down \${REPLICATED_UI} service: " stop_container ;; status) _status ;; restart|reload) pid=`pidofproc "\${REPLICATED_UI}" 2>/dev/null` [ -n "\$pid" ] && ps -p \$pid > /dev/null 2>&1 \\ && \$0 stop \$0 start ;; *) echo "Usage: \${REPLICATED_UI} {start|stop|status|reload|restart" exit 1 ;; esac EOF chmod +x /etc/init.d/replicated-ui fi } stop_systemd_services() { if systemctl status replicated &>/dev/null; then systemctl stop replicated fi if systemctl status replicated-ui &>/dev/null; then systemctl stop replicated-ui fi } start_systemd_services() { systemctl enable replicated systemctl start replicated if [ "$DISABLE_REPLICATED_UI" != "1" ]; then systemctl enable replicated-ui systemctl start replicated-ui fi } stop_upstart_services() { if status replicated &>/dev/null && ! status replicated 2>/dev/null | grep -q "stop"; then stop replicated fi if status replicated-ui &>/dev/null && ! status replicated-ui 2>/dev/null | grep -q "stop"; then stop replicated-ui fi } start_upstart_services() { start replicated start replicated-ui } stop_sysvinit_services() { if service replicated status &>/dev/null; then service replicated stop fi if service replicated-ui status &>/dev/null; then service replicated-ui stop fi } start_sysvinit_services() { # TODO: what about chkconfig update-rc.d replicated stop 20 0 1 6 . start 20 2 3 4 5 . update-rc.d replicated enable service replicated start if [ "$DISABLE_REPLICATED_UI" != "1" ]; then update-rc.d replicated-ui stop 20 0 1 6 . start 20 2 3 4 5 . update-rc.d replicated-ui enable service replicated-ui start fi } install_operator() { prefix="" if [ "$AIRGAP" != "1" ]; then getUrlCmd echo -e "${GREEN}Installing local operator with command:" echo -e "${URLGET_CMD} https://get.replicated.com${prefix}/operator?replicated_operator_tag=2.14.0${NC}" ${URLGET_CMD} "https://get.replicated.com${prefix}/operator?replicated_operator_tag=2.14.0" > "$REPLICATED_TEMP_DIR/operator_install.sh" fi _private_address_with_brackets="$PRIVATE_ADDRESS" if [ "$DISABLE_REPLICATED_HOST_NETWORKING" = "1" ]; then _private_address_with_brackets="$DOCKER0_GATEWAY_IP" fi if isValidIpv6 "$_private_address_with_brackets"; then _private_address_with_brackets="[$_private_address_with_brackets]" fi opts="no-docker skip-preflights daemon-endpoint=$_private_address_with_brackets:9879 daemon-token=$DAEMON_TOKEN private-address=$PRIVATE_ADDRESS tags=$OPERATOR_TAGS" if [ -n "$PUBLIC_ADDRESS" ]; then opts=$opts" public-address=$PUBLIC_ADDRESS" elif [ "$NO_PUBLIC_ADDRESS" = "1" ]; then opts=$opts" no-public-address" fi if [ -n "$PROXY_ADDRESS" ]; then opts=$opts" http-proxy=$PROXY_ADDRESS additional-no-proxy=$NO_PROXY_ADDRESSES" else opts=$opts" no-proxy" fi if [ -z "$READ_TIMEOUT" ]; then opts=$opts" no-auto" fi if [ "$AIRGAP" = "1" ]; then opts=$opts" airgap" fi if [ "$SKIP_DOCKER_PULL" = "1" ]; then opts=$opts" skip-pull" fi if [ -n "$LOG_LEVEL" ]; then opts=$opts" log-level=$LOG_LEVEL" fi if [ "$CUSTOM_SELINUX_REPLICATED_DOMAIN" = "1" ]; then opts=$opts" selinux-replicated-domain=$SELINUX_REPLICATED_DOMAIN" fi if [ -n "$FAST_TIMEOUTS" ]; then opts=$opts" fast-timeouts" fi if [ -n "$NO_CE_ON_EE" ]; then opts=$opts" no-ce-on-ee" fi if [ "$BYPASS_FIREWALLD_WARNING" = "1" ]; then opts=$opts" bypass-firewalld-warning" fi if [ -n "$REGISTRY_ADDRESS_OVERRIDE" ]; then opts=$opts" registry-address-override=$REGISTRY_ADDRESS_OVERRIDE" fi if [ -n "$REGISTRY_PATH_PREFIX" ]; then opts=$opts" registry-path-prefix=$REGISTRY_PATH_PREFIX" fi if [ "$DISABLE_REPLICATED_HOST_NETWORKING" = "1" ]; then # we still bind the registry to the host network opts=$opts" daemon-registry-address=$DOCKER0_GATEWAY_IP:9874" fi # When this script is piped into bash as stdin, apt-get will eat the remaining parts of this script, # preventing it from being executed. So using /dev/null here to change stdin for the docker script. if [ "$AIRGAP" = "1" ]; then bash ./operator_install.sh $opts < /dev/null else bash "$REPLICATED_TEMP_DIR/operator_install.sh" $opts < /dev/null fi } outro() { warn_if_selinux if [ "$DISABLE_REPLICATED_UI" != "1" ]; then if [ -z "$PUBLIC_ADDRESS" ]; then PUBLIC_ADDRESS="" fi printf "To continue the installation, visit the following URL in your browser:\n\n http://%s:$UI_BIND_PORT\n" "$PUBLIC_ADDRESS" fi if ! commandExists "replicated"; then printf "\nTo create an alias for the replicated cli command run the following in your current shell or log out and log back in:\n\n source /etc/replicated.alias\n" fi printf "\n" } ################################################################################ # Execution starts here ################################################################################ export DEBIAN_FRONTEND=noninteractive if replicated12Installed; then echo -e >&2 "${RED}Existing 1.2 install detected; please back up and run migration script before installing.${NC}" echo -e >&2 "${RED}Instructions at https://help.replicated.com/docs/native/customer-installations/upgrading/${NC}" exit 1 fi maybeCreateTempDir require64Bit requireRootUser detectLsbDist detectInitSystem detectInitSystemConfDir getReplicatedRegistryPrefix "$REPLICATED_VERSION" mkdir -p /var/lib/replicated/branding chmod a+x /var/lib/replicated/branding if [ -n "$CHANNEL_CSS" ]; then echo "$CHANNEL_CSS" | base64 --decode > /var/lib/replicated/branding/channel.css fi if [ -n "$TERMS" ]; then echo "$TERMS" | base64 --decode > /var/lib/replicated/branding/terms.json fi # read existing replicated opts values if [ -f $CONFDIR/replicated ]; then # shellcheck source=replicated-default . $CONFDIR/replicated fi if [ -f $CONFDIR/replicated-operator ]; then # support for the old installation script that used REPLICATED_OPTS for # operator tmp_replicated_opts="$REPLICATED_OPTS" # shellcheck source=replicated-operator-default . $CONFDIR/replicated-operator REPLICATED_OPTS="$tmp_replicated_opts" fi # override these values with command line flags while [ "$1" != "" ]; do _param="$(echo "$1" | cut -d= -f1)" _value="$(echo "$1" | grep '=' | cut -d= -f2-)" case $_param in http-proxy|http_proxy) PROXY_ADDRESS="$_value" ;; local-address|local_address|private-address|private_address) PRIVATE_ADDRESS="$_value" NO_PRIVATE_ADDRESS_PROMPT="1" ;; public-address|public_address) PUBLIC_ADDRESS="$_value" ;; no-public-address|no_public_address) NO_PUBLIC_ADDRESS=1 ;; no-operator|no_operator) SKIP_OPERATOR_INSTALL=1 ;; is-migration|is_migration) IS_MIGRATION=1 ;; no-docker|no_docker) SKIP_DOCKER_INSTALL=1 ;; install-docker-only|install_docker_only) ONLY_INSTALL_DOCKER=1 ;; no-proxy|no_proxy) NO_PROXY=1 ;; airgap) # airgap implies "skip docker" AIRGAP=1 SKIP_DOCKER_INSTALL=1 ;; no-auto|no_auto) READ_TIMEOUT= ;; daemon-token|daemon_token) DAEMON_TOKEN="$_value" ;; tags) OPERATOR_TAGS="$_value" ;; docker-version|docker_version) PINNED_DOCKER_VERSION="$_value" ;; ui-bind-port|ui_bind_port) UI_BIND_PORT="$_value" ;; registry-advertise-address|registry_advertise_address) REGISTRY_ADVERTISE_ADDRESS="$_value" ;; release-sequence|release_sequence) RELEASE_SEQUENCE="$_value" ;; release-patch-sequence|release_patch_sequence) RELEASE_PATCH_SEQUENCE="$_value" ;; skip-pull|skip_pull) SKIP_DOCKER_PULL=1 ;; bypass-storagedriver-warnings|bypass_storagedriver_warnings) BYPASS_STORAGEDRIVER_WARNINGS=1 ;; log-level|log_level) LOG_LEVEL="$_value" ;; selinux-replicated-domain|selinux_replicated_domain) SELINUX_REPLICATED_DOMAIN="$_value" ;; fast-timeouts|fast_timeouts) READ_TIMEOUT="-t 1" FAST_TIMEOUTS=1 ;; force-replicated-downgrade|force_replicated_downgrade) FORCE_REPLICATED_DOWNGRADE=1 ;; skip-preflights|skip_preflights) SKIP_PREFLIGHTS=1 ;; prompt-on-preflight-warnings|prompt_on_preflight_warnings) IGNORE_PREFLIGHTS=0 ;; ignore-preflights|ignore_preflights) # do nothing ;; no-ce-on-ee|no_ce_on_ee) NO_CE_ON_EE=1 ;; hard-fail-on-loopback|hard_fail_on_loopback) HARD_FAIL_ON_LOOPBACK=1 ;; bypass-firewalld-warning|bypass_firewalld_warning) BYPASS_FIREWALLD_WARNING=1 ;; hard-fail-on-firewalld|hard_fail_on_firewalld) HARD_FAIL_ON_FIREWALLD=1 ;; additional-no-proxy|additional_no_proxy) if [ -z "$ADDITIONAL_NO_PROXY" ]; then ADDITIONAL_NO_PROXY="$_value" else ADDITIONAL_NO_PROXY="$ADDITIONAL_NO_PROXY,$_value" fi ;; artifactory-address|artifactory_address) ARTIFACTORY_ADDRESS="$_value" ;; artifactory-access-method|artifactory_access_method) ARTIFACTORY_ACCESS_METHOD="$_value" ;; artifactory-docker-repo-key|artifactory_docker_repo_key) ARTIFACTORY_DOCKER_REPO_KEY="$_value" ;; artifactory-quay-repo-key|artifactory_quay_repo_key) ARTIFACTORY_QUAY_REPO_KEY="$_value" ;; artifactory-auth) ARTIFACTORY_AUTH="$_value" ;; registry-address-override|registry_address_override) REGISTRY_ADDRESS_OVERRIDE="$_value" ;; registry-path-prefix|registry_path_prefix) REGISTRY_PATH_PREFIX="$_value" ;; disable-replicated-ui|disable_replicated_ui) DISABLE_REPLICATED_UI=1 ;; disable-replicated-host-networking|disable_replicated_host_networking) # DISABLE_REPLICATED_HOST_NETWORKING supported in replicated 2.49.0+ DISABLE_REPLICATED_HOST_NETWORKING=1 ;; *) echo >&2 "Error: unknown parameter \"$_param\"" exit 1 ;; esac shift done if [ "$FORCE_REPLICATED_DOWNGRADE" != "1" ] && isReplicatedDowngrade "$REPLICATED_VERSION"; then replicated2Version echo -e >&2 "${RED}Current Replicated version $INSTALLED_REPLICATED_VERSION is greater than the proposed version $REPLICATED_VERSION.${NC}" echo -e >&2 "${RED}To downgrade Replicated re-run the script with the force-replicated-downgrade flag.${NC}" exit 1 fi checkFirewalld if [ "$ONLY_INSTALL_DOCKER" = "1" ]; then # no min if only installing docker installDocker "$PINNED_DOCKER_VERSION" "0.0.0" checkDockerDriver checkDockerStorageDriver "$HARD_FAIL_ON_LOOPBACK" exit 0 fi printf "Determining local address\n" discoverPrivateIp if [ -z "$PUBLIC_ADDRESS" ] && [ "$AIRGAP" != "1" ] && [ "$NO_PUBLIC_ADDRESS" != "1" ]; then printf "Determining service address\n" discoverPublicIp # check that we will eventually run the operator install script if [ "$SKIP_OPERATOR_INSTALL" != "1" ] && [ "$IS_MIGRATION" != "1" ]; then # Even though this script does not use PUBLIC_ADDRESS, we must prompt prior to replicated # operator installation to minimize the delay between starting replicated and the operator for # automated installs. If the operator takes too long to start then the app start will fail. readReplicatedOperatorOpts "PUBLIC_ADDRESS" if [ -z "$PUBLIC_ADDRESS" ]; then PUBLIC_ADDRESS="$REPLICATED_OPTS_VALUE" fi # Check that the public address from discoverPublicIp matches the one from Replicated Operator opts if [ -n "$REPLICATED_OPTS_VALUE" ] && [ "$REPLICATED_OPTS_VALUE" = "$PUBLIC_ADDRESS" ]; then printf "The installer will use service address '%s' (imported from $CONFDIR/replicated-operator 'PUBLIC_ADDRESS')\n" $PUBLIC_ADDRESS else if [ -n "$PUBLIC_ADDRESS" ]; then # If public addresses do not match then prompt with confirmation shouldUsePublicIp else printf "The installer was unable to automatically detect the service IP address of this machine.\n" printf "Please enter the address or leave blank for unspecified.\n" promptForPublicIp if [ -z "$PUBLIC_ADDRESS" ]; then NO_PUBLIC_ADDRESS=1 fi fi fi fi fi maybePromptForArtifactoryAuth configureRegistryProxyAddressOverride maybeWriteRegistryProxyConfig if [ "$NO_PROXY" != "1" ]; then if [ -z "$PROXY_ADDRESS" ]; then discoverProxy fi if [ -z "$PROXY_ADDRESS" ] && [ "$AIRGAP" != "1" ]; then promptForProxy fi if [ -n "$PROXY_ADDRESS" ]; then getNoProxyAddresses "$PRIVATE_ADDRESS" fi fi exportProxy if [ "$SKIP_DOCKER_INSTALL" != "1" ]; then installDocker "$PINNED_DOCKER_VERSION" "$MIN_DOCKER_VERSION" checkDockerDriver checkDockerStorageDriver "$HARD_FAIL_ON_LOOPBACK" else requireDocker fi get_docker0_gateway_ip if [ -n "$PROXY_ADDRESS" ]; then requireDockerProxy fi if [ "$CONFIGURE_IPV6" = "1" ] && [ "$DID_INSTALL_DOCKER" = "1" ]; then configure_docker_ipv6 fi if [ "$RESTART_DOCKER" = "1" ]; then restartDocker fi if [ -n "$PROXY_ADDRESS" ]; then checkDockerProxyConfig fi if [ "$SKIP_PREFLIGHTS" != "1" ]; then echo "" echo "Running preflight checks..." runPreflights || true if [ "$IGNORE_PREFLIGHTS" != "1" ]; then if [ "$HAS_PREFLIGHT_ERRORS" = "1" ]; then bail "\nPreflights have encountered some errors. Please correct them before proceeding." elif [ "$HAS_PREFLIGHT_WARNINGS" = "1" ]; then logWarn "\nPreflights have encountered some warnings. Please review them before proceeding." logWarn "Would you like to proceed anyway?" if ! confirmN " "; then exit 1 return fi fi fi fi if [ -n "$ARTIFACTORY_ADDRESS" ] && [ -n "$ARTIFACTORY_AUTH" ]; then parseBasicAuth "$ARTIFACTORY_AUTH" echo "+ docker login $ARTIFACTORY_ADDRESS --username $BASICAUTH_USERNAME" echo "$BASICAUTH_PASSWORD" | docker login "$ARTIFACTORY_ADDRESS" --username "$BASICAUTH_USERNAME" --password-stdin fi detectDockerGroupId maybeCreateReplicatedUser ensureReplicatedConfReadable get_daemon_token if [ "$SKIP_DOCKER_PULL" = "1" ]; then printf "Skip docker pull flag detected, will not pull replicated and replicated-ui images\n" elif [ "$AIRGAP" != "1" ]; then printf "Pulling replicated and replicated-ui images\n" pullReplicatedImages else printf "Loading replicated and replicated-ui images from package\n" airgapLoadReplicatedImages printf "Loading replicated debian, command, statsd-graphite, and premkit images from package\n" airgapLoadSupportImages airgapMaybeLoadSupportBundle airgapMaybeLoadRetraced fi tag_docker_images printf "Stopping replicated and replicated-ui service\n" case "$INIT_SYSTEM" in systemd) stop_systemd_services ;; upstart) stop_upstart_services ;; sysvinit) stop_sysvinit_services ;; esac remove_docker_containers printf "Installing replicated and replicated-ui service\n" REPLICATED_PORT_RANGE="-p 9874-9879:9874-9879/tcp" if [ "$DISABLE_REPLICATED_HOST_NETWORKING" = "1" ]; then if [ -z "$REGISTRY_ADVERTISE_ADDRESS" ]; then REGISTRY_ADVERTISE_ADDRESS="$DOCKER0_GATEWAY_IP:9874" fi REPLICATED_PORT_RANGE="-p $DOCKER0_GATEWAY_IP:9874-9879:9874-9879/tcp" fi get_selinux_replicated_domain get_selinux_replicated_domain_label build_replicated_opts write_replicated_configuration case "$INIT_SYSTEM" in systemd) write_systemd_services ;; upstart) write_upstart_services ;; sysvinit) write_sysvinit_services ;; esac printf "Starting replicated and replicated-ui service\n" case "$INIT_SYSTEM" in systemd) start_systemd_services ;; upstart) start_upstart_services ;; sysvinit) start_sysvinit_services ;; esac printf "Installing replicated command alias\n" installCliFile "sudo docker exec" "replicated" installAliasFile if [ "$SKIP_OPERATOR_INSTALL" != "1" ] && [ "$IS_MIGRATION" != "1" ]; then # we write this value to the opts file so if you didn't install it the first # time it will not install when updating printf "Installing local operator\n" install_operator fi outro exit 0
